import { IConfigurationOverrides } from '@workbench-stack/core';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import * as json from '@vscode-alt/monaco-editor/esm/vs/base/common/json';
export declare const enum ConfigurationEditingErrorCode {
    /**
     * Error when trying to write a configuration key that is not registered.
     */
    ERROR_UNKNOWN_KEY = 0,
    /**
     * Error when trying to write an application setting into workspace settings.
     */
    ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION = 1,
    /**
     * Error when trying to write an invalid folder configuration key to folder settings.
     */
    ERROR_INVALID_FOLDER_CONFIGURATION = 2,
    /**
     * Error when trying to write to user target but not supported for provided key.
     */
    ERROR_INVALID_USER_TARGET = 3,
    /**
     * Error when trying to write to user target but not supported for provided key.
     */
    ERROR_INVALID_WORKSPACE_TARGET = 4,
    /**
     * Error when trying to write a configuration key to folder target
     */
    ERROR_INVALID_FOLDER_TARGET = 5,
    /**
     * Error when trying to write to the workspace configuration without having a workspace opened.
     */
    ERROR_NO_WORKSPACE_OPENED = 6,
    /**
     * Error when trying to write and save to the configuration file while it is dirty in the editor.
     */
    ERROR_CONFIGURATION_FILE_DIRTY = 7,
    /**
     * Error when trying to write to a configuration file that contains JSON errors.
     */
    ERROR_INVALID_CONFIGURATION = 8
}
export declare class ConfigurationEditingError extends Error {
    code: ConfigurationEditingErrorCode;
    constructor(message: string, code: ConfigurationEditingErrorCode);
}
export interface IConfigurationValue {
    key: string;
    value: any;
}
export interface IConfigurationEditingOptions {
    /**
     * If `true`, do not saves the configuration. Default is `false`.
     */
    donotSave?: boolean;
    /**
     * If `true`, do not notifies the error to user by showing the message box. Default is `false`.
     */
    donotNotifyError?: boolean;
    /**
     * Scope of configuration to be written into.
     */
    scopes?: IConfigurationOverrides;
}
export declare const enum EditableConfigurationTarget {
    USER_LOCAL = 1,
    USER_REMOTE = 2,
    WORKSPACE = 3,
    WORKSPACE_FOLDER = 4
}
export interface IConfigurationEditOperation extends IConfigurationValue {
    target: EditableConfigurationTarget;
    jsonPath: json.JSONPath;
    resource?: URI;
    workspaceStandAloneConfigurationKey?: string;
}
export interface ConfigurationEditingOptions extends IConfigurationEditingOptions {
    force?: boolean;
}

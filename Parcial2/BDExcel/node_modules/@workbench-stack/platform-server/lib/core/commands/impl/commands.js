"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullCommandService = exports.CommandsRegistry = void 0;
/* tslint:disable */
const types_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const linkedList_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/linkedList");
const iterator_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/iterator");
exports.CommandsRegistry = new class {
    constructor() {
        this._commands = new Map();
        this._onDidRegisterCommand = new event_1.Emitter();
        this.onDidRegisterCommand = this._onDidRegisterCommand.event;
    }
    registerCommand(idOrCommand, handler) {
        if (!idOrCommand) {
            throw new Error(`invalid command`);
        }
        if (typeof idOrCommand === 'string') {
            if (!handler) {
                throw new Error(`invalid command`);
            }
            return this.registerCommand({ id: idOrCommand, handler });
        }
        // add argument validation if rich command metadata is provided
        if (idOrCommand.description) {
            const constraints = [];
            for (let arg of idOrCommand.description.args) {
                constraints.push(arg.constraint);
            }
            const actualHandler = idOrCommand.handler;
            idOrCommand.handler = function (accessor, ...args) {
                types_1.validateConstraints(args, constraints);
                return actualHandler(accessor, ...args);
            };
        }
        // find a place to store the command
        const { id } = idOrCommand;
        let commands = this._commands.get(id);
        if (!commands) {
            commands = new linkedList_1.LinkedList();
            this._commands.set(id, commands);
        }
        let removeFn = commands.unshift(idOrCommand);
        let ret = lifecycle_1.toDisposable(() => {
            removeFn();
            if (this._commands.get(id).isEmpty()) {
                this._commands.delete(id);
            }
        });
        // tell the world about this command
        this._onDidRegisterCommand.fire(id);
        return ret;
    }
    registerCommandAlias(oldId, newId) {
        return exports.CommandsRegistry.registerCommand(oldId, (accessor, ...args) => {
            // accessor.get(ICommandService).executeCommand(newId, ...args);
        });
    }
    getCommand(id) {
        const list = this._commands.get(id);
        if (!list || list.isEmpty()) {
            return undefined;
        }
        return iterator_1.Iterable.first(list);
    }
    getCommands() {
        const result = new Map();
        for (const key of this._commands.keys()) {
            const command = this.getCommand(key);
            if (command) {
                result.set(key, command);
            }
        }
        return result;
    }
};
exports.NullCommandService = {
    onWillExecuteCommand: () => ({ dispose: () => { } }),
    executeCommand() {
        return Promise.resolve(undefined);
    },
};
//# sourceMappingURL=commands.js.map
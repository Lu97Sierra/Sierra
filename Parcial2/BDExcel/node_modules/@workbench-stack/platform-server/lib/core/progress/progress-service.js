// import { IProgressService, IProgressRunner, IProgressOptions, IProgress, IProgressStep } from '../../interfaces';
// export class ProgressService implements IProgressService {
//     constructor(private progressbar: ProgressBar) { }
//     public withProgress<R=any>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: () => void): Promise<R> {
//         const { location } = options;
//         if (typeof location === 'string') {
//             const viewlet = this._viewletService.getViewlet(location);
//             if (viewlet) {
//                 return this._withViewletProgress(location, task);
//             }
//             console.warn(`Bad progress location: ${location}`);
//             return undefined;
//         }
//         switch (location) {
//             case ProgressLocation.Notification:
//                 return this._withNotificationProgress(options, task, onDidCancel);
//             case ProgressLocation.Window:
//                 return this._withWindowProgress(options, task);
//             case ProgressLocation.Explorer:
//                 return this._withViewletProgress('workbench.view.explorer', task);
//             case ProgressLocation.Scm:
//                 return this._withViewletProgress('workbench.view.scm', task);
//             case ProgressLocation.Extensions:
//                 return this._withViewletProgress('workbench.view.extensions', task);
//             default:
//                 console.warn(`Bad progress location: ${location}`);
//                 return undefined;
//         }
//     }
//     private _withViewletProgress<P extends Promise<R>, R=any>(viewletId: string, task: (progress: IProgress<{ message?: string }>) => P): P {
//         const promise = task(emptyProgress);
//         // show in viewlet
//         const viewletProgress = this._viewletService.getProgressIndicator(viewletId);
//         if (viewletProgress) {
//             viewletProgress.showWhile(promise);
//         }
//         // show activity bar
//         let activityProgress: IDisposable;
//         let delayHandle: any = setTimeout(() => {
//             delayHandle = undefined;
//             const handle = this._activityBar.showActivity(
//                 viewletId,
//                 new ProgressBadge(() => ''),
//                 'progress-badge',
//                 100
//             );
//             const startTimeVisible = Date.now();
//             const minTimeVisible = 300;
//             activityProgress = {
//                 dispose() {
//                     const d = Date.now() - startTimeVisible;
//                     if (d < minTimeVisible) {
//                         // should at least show for Nms
//                         setTimeout(() => handle.dispose(), minTimeVisible - d);
//                     } else {
//                         // shown long enough
//                         handle.dispose();
//                     }
//                 }
//             };
//         }, 300);
//         const onDone = () => {
//             clearTimeout(delayHandle);
//             dispose(activityProgress);
//         };
//         promise.then(onDone, onDone);
//         return promise;
//     }
// }
//# sourceMappingURL=progress-service.js.map
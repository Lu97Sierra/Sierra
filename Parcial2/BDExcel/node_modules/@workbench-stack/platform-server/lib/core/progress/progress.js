"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongRunningOperation = exports.Progress = void 0;
const cancellation_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/cancellation");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
class Progress {
    constructor(callback) {
        this._callback = callback;
    }
    get value() {
        return this._value;
    }
    report(item) {
        this._value = item;
        this._callback(this._value);
    }
}
exports.Progress = Progress;
class LongRunningOperation {
    constructor(progressService) {
        this.progressService = progressService;
        this.currentOperationId = 0;
        this.currentOperationDisposables = [];
    }
    start(progressDelay) {
        // Stop any previous operation
        this.stop();
        // Start new
        const newOperationId = ++this.currentOperationId;
        const newOperationToken = new cancellation_1.CancellationTokenSource();
        this.currentProgressTimeout = setTimeout(() => {
            if (newOperationId === this.currentOperationId) {
                this.currentProgressRunner = this.progressService.show(true);
            }
        }, progressDelay);
        this.currentOperationDisposables.push(lifecycle_1.toDisposable(() => clearTimeout(this.currentProgressTimeout)), lifecycle_1.toDisposable(() => newOperationToken.cancel()), lifecycle_1.toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));
        return {
            id: newOperationId,
            token: newOperationToken.token,
            stop: () => this.doStop(newOperationId),
            isCurrent: () => this.currentOperationId === newOperationId,
        };
    }
    stop() {
        this.doStop(this.currentOperationId);
    }
    doStop(operationId) {
        if (this.currentOperationId === operationId) {
            this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);
        }
    }
    dispose() {
        this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);
    }
}
exports.LongRunningOperation = LongRunningOperation;
//# sourceMappingURL=progress.js.map
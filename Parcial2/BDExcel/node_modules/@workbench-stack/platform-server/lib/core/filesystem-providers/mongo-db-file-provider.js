"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDBFileProvider = void 0;
const key_value_log_provider_1 = require("./key-value-log-provider");
const mongoQuery = require('mongo-queryfilter');
const _ = require("lodash");
const checkJson = (testString) => {
    try {
        const parsedData = JSON.parse(testString);
        return {
            isJson: true,
            parsedData,
        };
    }
    catch (err) {
        return {
            isJson: false
        };
    }
};
/**
 * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.
 * This class is a simple parser which creates the basic component parts
 * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation
 * and encoding.
 *
 *       mongod://<mongo-server-name>:<port>/<database>/<collection>?name=ferret#nose
 *       \____/   \________________________/\______________________/ \_________/ \__/
 *        |           |                                |                |       |
 *     scheme     authority                           path            query   fragment
 *        |   _________________________________________|__
 *       / \ /                                            \
 *       urn:example:animal:ferret:nose
 */
class MongoDBFileProvider extends key_value_log_provider_1.KeyValueLogProvider {
    constructor(scheme, db) {
        super(scheme);
        this.database = db;
        // this.collection.watch([{ settingsId: this.settingsId }]).on('change', data => console.log(data));
    }
    getAllKeys(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = mongoQuery.filter(key.query);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                // overwrite type with `any` to prevent type check on `...args` 
                this.database.collection(key.collection).findOne(filter, function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        const result = data ? Object.keys(data) : [];
                        resolve(result);
                    }
                });
            }));
        });
    }
    hasKey(key) {
        const filter = mongoQuery.filter(key.query);
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.database.collection(key.collection).findOne(filter, function (err, data) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(!!data);
                }
            });
        }));
    }
    getValue(key) {
        const filter = mongoQuery.filter(key.query);
        const testedJson = checkJson(key.fragment);
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let projection;
            if (!testedJson.isJson) {
                projection = { [key.fragment]: true };
            }
            else {
                projection = testedJson.parsedData;
            }
            this.database.collection(key.collection).findOne(filter, {
                projection
            }, function (err, data) {
                if (err) {
                    reject(err);
                }
                else {
                    let result;
                    if (data && key.fragment && !testedJson.isJson) {
                        result = _.get(data, key.fragment);
                    }
                    else {
                        result = data;
                    }
                    resolve(result ? JSON.stringify(result) : null);
                }
            });
        }));
    }
    setValue(key, val) {
        const filter = mongoQuery.filter(key.query);
        // if the value is a single value object, then we concat it with key to set it.
        const value = JSON.parse(val);
        let setValue;
        if (typeof value === 'object' && !_.isArray(value)) {
            const keys = Object.keys(value);
            if (keys.length === 1) {
                const firstKey = keys[0];
                setValue = { [`${key.fragment}.${firstKey}`]: value[firstKey] };
            }
            else {
                setValue = { [key.fragment]: value };
            }
        }
        else {
            setValue = { [key.fragment]: value };
        }
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.database.collection(key.collection).updateOne(filter, {
                $set: setValue
            }, { upsert: true }, function (err, data) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        }));
    }
    deleteKey(key) {
        const filter = mongoQuery.filter(key.query);
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (key.fragment) {
                this.database.collection(key.collection).update(filter, {
                    $unset: { [key.fragment]: true },
                }, function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
            else {
                this.database.collection(key.collection).deleteOne(filter, function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            }
        }));
    }
}
exports.MongoDBFileProvider = MongoDBFileProvider;
//# sourceMappingURL=mongo-db-file-provider.js.map
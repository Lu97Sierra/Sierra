"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUserDataDir = exports.parsePathArg = exports.parseDebugPort = exports.parseSearchPort = exports.parseExtensionHostPort = void 0;
const paths = require("../../paths");
const path = require("path");
function parseExtensionHostPort(args, isBuild) {
    return parseDebugPort(args.debugPluginHost, args.debugBrkPluginHost, 5870, isBuild, args.debugId);
}
exports.parseExtensionHostPort = parseExtensionHostPort;
function parseSearchPort(args, isBuild) {
    return parseDebugPort(args.debugSearch, args.debugBrkSearch, 5876, isBuild);
}
exports.parseSearchPort = parseSearchPort;
function parseDebugPort(debugArg, debugBrkArg, defaultBuildPort, isBuild, debugId) {
    const portStr = debugBrkArg || debugArg;
    const port = Number(portStr) || (!isBuild ? defaultBuildPort : null);
    const brk = port ? Boolean(!!debugBrkArg) : false;
    return { port, break: brk, debugId };
}
exports.parseDebugPort = parseDebugPort;
function parsePathArg(arg, process) {
    if (!arg) {
        return undefined;
    }
    // Determine if the arg is relative or absolute, if relative use the original CWD
    // (VSCODE_CWD), not the potentially overridden one (process.cwd()).
    const resolved = path.resolve(arg);
    if (path.normalize(arg) === resolved) {
        return resolved;
    }
    else {
        return path.resolve(process.env['CDECODE_CWD'] || process.cwd(), arg);
    }
}
exports.parsePathArg = parsePathArg;
function parseUserDataDir(args, process) {
    return parsePathArg(args['user-data-dir'], process) || path.resolve(paths.getDefaultUserDataPath(process.platform));
}
exports.parseUserDataDir = parseUserDataDir;
//# sourceMappingURL=parsing.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIPCHandle = exports.getWin32IPCHandle = exports.getNixIPCHandle = exports.getUniqueUserId = void 0;
const path = require("path");
const package_1 = require("../../package");
const product_1 = require("../../product");
const crypto = require("crypto");
const platform_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/platform");
// Read this before there's any chance it is overwritten
// Related to https://github.com/Microsoft/vscode/issues/30624
const xdgRuntimeDir = process.env['XDG_RUNTIME_DIR'];
function getUniqueUserId() {
    let username;
    if (process.platform === 'win32') {
        username = process.env.USERNAME;
    }
    else {
        username = process.env.USER;
    }
    if (!username) {
        return ''; // fail gracefully if there is no user name
    }
    // use sha256 to ensure the userid value can be used in filenames and are unique
    return crypto.createHash('sha256').update(username).digest('hex').substr(0, 6);
}
exports.getUniqueUserId = getUniqueUserId;
function getNixIPCHandle(userDataPath, type) {
    if (xdgRuntimeDir) {
        const scope = crypto.createHash('md5').update(userDataPath).digest('hex').substr(0, 8);
        return path.join(xdgRuntimeDir, `vscode-${scope}-${package_1.pkg.version}-${type}.sock`);
    }
    return path.join(userDataPath, `${package_1.pkg.version}-${type}.sock`);
}
exports.getNixIPCHandle = getNixIPCHandle;
function getWin32IPCHandle(type) {
    // Support to run VS Code multiple times as different user
    // by making the socket unique over the logged in user
    const userId = getUniqueUserId();
    const name = product_1.product.applicationName + (userId ? `-${userId}` : '');
    return `\\\\.\\pipe\\${name}-${package_1.pkg.version}-${type}-sock`;
}
exports.getWin32IPCHandle = getWin32IPCHandle;
function getIPCHandle(userDataPath, type) {
    if (process.platform === 'win32') {
        return getWin32IPCHandle(type);
    }
    else {
        return getNixIPCHandle(userDataPath, type);
    }
}
exports.getIPCHandle = getIPCHandle;
function getCLIPath(execPath, appRoot, isBuilt) {
    // Windows
    if (platform_1.isWindows) {
        if (isBuilt) {
            return path.join(path.dirname(execPath), 'bin', `${product_1.product.applicationName}.cmd`);
        }
        return path.join(appRoot, 'scripts', 'code-cli.bat');
    }
    // Linux
    if (platform_1.isLinux) {
        if (isBuilt) {
            return path.join(path.dirname(execPath), 'bin', `${product_1.product.applicationName}`);
        }
        return path.join(appRoot, 'scripts', 'code-cli.sh');
    }
    // macOS
    if (isBuilt) {
        return path.join(appRoot, 'bin', 'code');
    }
    return path.join(appRoot, 'scripts', 'code-cli.sh');
}
//# sourceMappingURL=environment.js.map
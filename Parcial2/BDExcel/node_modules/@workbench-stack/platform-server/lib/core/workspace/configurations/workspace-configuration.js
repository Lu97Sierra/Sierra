"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceConfiguration = void 0;
/* tslint:disable */
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const resources = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const network_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/network");
const core_1 = require("@workbench-stack/core");
const errors_1 = require("../../errors");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
const parser_1 = require("./parser");
class WorkspaceConfiguration extends lifecycle_1.Disposable {
    constructor(configurationCache, configurationFileService) {
        super();
        this._workspaceConfigurationChangeDisposable = lifecycle_1.Disposable.None;
        this._workspaceIdentifier = null;
        this._onDidUpdateConfiguration = this._register(new event_1.Emitter());
        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;
        this._loaded = false;
        this._configurationFileService = configurationFileService;
        this._workspaceConfiguration = this._cachedConfiguration = new CachedWorkspaceConfiguration(configurationCache);
    }
    get loaded() { return this._loaded; }
    load(workspaceIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            this._workspaceIdentifier = workspaceIdentifier;
            if (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {
                if (this._workspaceIdentifier.configPath.scheme === network_1.Schemas.file) {
                    this.switch(new FileServiceBasedWorkspaceConfiguration(this._configurationFileService));
                }
                else {
                    this.waitAndSwitch(this._workspaceIdentifier);
                }
            }
            this._loaded = this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration;
            yield this._workspaceConfiguration.load(this._workspaceIdentifier);
        });
    }
    reload() {
        return this._workspaceIdentifier ? this.load(this._workspaceIdentifier) : Promise.resolve();
    }
    getFolders() {
        return this._workspaceConfiguration.getFolders();
    }
    setFolders(folders, jsonEditingService /** @sri replace with interface */) {
        if (this._workspaceIdentifier) {
            return jsonEditingService.write(this._workspaceIdentifier.configPath, { key: 'folders', value: folders }, true)
                .then(() => this.reload());
        }
        return Promise.resolve();
    }
    getConfiguration() {
        return this._workspaceConfiguration.getWorkspaceSettings();
    }
    reprocessWorkspaceSettings() {
        this._workspaceConfiguration.reprocessWorkspaceSettings();
        return this.getConfiguration();
    }
    waitAndSwitch(workspaceIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._configurationFileService.whenProviderRegistered(workspaceIdentifier.configPath.scheme);
            if (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {
                const fileServiceBasedWorkspaceConfiguration = this._register(new FileServiceBasedWorkspaceConfiguration(this._configurationFileService));
                yield fileServiceBasedWorkspaceConfiguration.load(workspaceIdentifier);
                this.switch(fileServiceBasedWorkspaceConfiguration);
                this._loaded = true;
                this.onDidWorkspaceConfigurationChange(false);
            }
        });
    }
    switch(fileServiceBasedWorkspaceConfiguration) {
        this._workspaceConfiguration.dispose();
        this._workspaceConfigurationChangeDisposable.dispose();
        this._workspaceConfiguration = this._register(fileServiceBasedWorkspaceConfiguration);
        this._workspaceConfigurationChangeDisposable = this._register(this._workspaceConfiguration.onDidChange(e => this.onDidWorkspaceConfigurationChange(true)));
    }
    onDidWorkspaceConfigurationChange(reload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (reload) {
                yield this.reload();
            }
            this.updateCache();
            this._onDidUpdateConfiguration.fire();
        });
    }
    updateCache() {
        if (this._workspaceIdentifier && this._workspaceIdentifier.configPath.scheme !== network_1.Schemas.file && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {
            return this._workspaceConfiguration.load(this._workspaceIdentifier)
                .then(() => this._cachedConfiguration.updateWorkspace(this._workspaceIdentifier, this._workspaceConfiguration.getConfigurationModel()));
        }
        return Promise.resolve(undefined);
    }
}
exports.WorkspaceConfiguration = WorkspaceConfiguration;
class FileServiceBasedWorkspaceConfiguration extends lifecycle_1.Disposable {
    constructor(configurationFileService) {
        super();
        this.configurationFileService = configurationFileService;
        this._workspaceIdentifier = null;
        this._onDidChange = this._register(new event_1.Emitter());
        this.onDidChange = this._onDidChange.event;
        this.workspaceConfigurationModelParser = new parser_1.WorkspaceConfigurationModelParser('');
        this.workspaceSettings = new core_1.ConfigurationModel();
        this._register(configurationFileService.onFileChanges(e => this.handleWorkspaceFileEvents(e)));
        this.reloadConfigurationScheduler = this._register(new async_1.RunOnceScheduler(() => this._onDidChange.fire(), 50));
        this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());
        if (!this.configurationFileService.isWatching) {
            this.configurationFileService.whenWatchingStarted.then(() => this.onWatchStarted());
        }
    }
    get workspaceIdentifier() {
        return this._workspaceIdentifier;
    }
    load(workspaceIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._workspaceIdentifier || this._workspaceIdentifier.id !== workspaceIdentifier.id) {
                this._workspaceIdentifier = workspaceIdentifier;
                this.workspaceConfigurationModelParser = new parser_1.WorkspaceConfigurationModelParser(this._workspaceIdentifier.id);
                lifecycle_1.dispose(this.workspaceConfigWatcher);
                this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());
            }
            let contents = '';
            try {
                contents = yield this.configurationFileService.readFile(this._workspaceIdentifier.configPath);
            }
            catch (error) {
                const exists = yield this.configurationFileService.exists(this._workspaceIdentifier.configPath);
                if (exists) {
                    errors_1.errors.onUnexpectedError(error);
                }
            }
            this.workspaceConfigurationModelParser.parseContent(contents);
            this.consolidate();
        });
    }
    getConfigurationModel() {
        return this.workspaceConfigurationModelParser.configurationModel;
    }
    getFolders() {
        return this.workspaceConfigurationModelParser.folders;
    }
    getWorkspaceSettings() {
        return this.workspaceSettings;
    }
    reprocessWorkspaceSettings() {
        this.workspaceConfigurationModelParser.reprocessWorkspaceSettings();
        this.consolidate();
        return this.getWorkspaceSettings();
    }
    onWatchStarted() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.workspaceIdentifier) {
                const currentModel = this.getConfigurationModel();
                yield this.load(this.workspaceIdentifier);
                const newModel = this.getConfigurationModel();
                const { added, removed, updated } = core_1.compare(currentModel, newModel);
                if (added.length || removed.length || updated.length) {
                    this._onDidChange.fire();
                }
            }
        });
    }
    consolidate() {
        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel);
    }
    watchWorkspaceConfigurationFile() {
        return this._workspaceIdentifier ? this.configurationFileService.watch(this._workspaceIdentifier.configPath) : lifecycle_1.Disposable.None;
    }
    handleWorkspaceFileEvents(event) {
        if (this._workspaceIdentifier) {
            const events = event.changes;
            let affectedByChanges = false;
            // Find changes that affect workspace file
            for (let i = 0, len = events.length; i < len && !affectedByChanges; i++) {
                affectedByChanges = resources.isEqual(this._workspaceIdentifier.configPath, events[i].resource);
            }
            if (affectedByChanges) {
                this.reloadConfigurationScheduler.schedule();
            }
        }
    }
}
class CachedWorkspaceConfiguration extends lifecycle_1.Disposable {
    constructor(configurationCache) {
        super();
        this.configurationCache = configurationCache;
        this._onDidChange = this._register(new event_1.Emitter());
        this.onDidChange = this._onDidChange.event;
        this.workspaceConfigurationModelParser = new parser_1.WorkspaceConfigurationModelParser('');
        this.workspaceSettings = new core_1.ConfigurationModel();
    }
    load(workspaceIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const key = this.getKey(workspaceIdentifier);
                const contents = yield this.configurationCache.read(key);
                this.workspaceConfigurationModelParser = new parser_1.WorkspaceConfigurationModelParser(key.key);
                this.workspaceConfigurationModelParser.parseContent(contents);
                this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel);
            }
            catch (e) {
            }
        });
    }
    get workspaceIdentifier() {
        return null;
    }
    getConfigurationModel() {
        return this.workspaceConfigurationModelParser.configurationModel;
    }
    getFolders() {
        return this.workspaceConfigurationModelParser.folders;
    }
    getWorkspaceSettings() {
        return this.workspaceSettings;
    }
    reprocessWorkspaceSettings() {
        return this.workspaceSettings;
    }
    updateWorkspace(workspaceIdentifier, configurationModel) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const key = this.getKey(workspaceIdentifier);
                if (configurationModel.keys.length) {
                    yield this.configurationCache.write(key, JSON.stringify(configurationModel.toJSON().contents));
                }
                else {
                    yield this.configurationCache.remove(key);
                }
            }
            catch (error) {
            }
        });
    }
    getKey(workspaceIdentifier) {
        return {
            type: 'workspaces',
            key: workspaceIdentifier.id
        };
    }
}
//# sourceMappingURL=workspace-configuration.js.map
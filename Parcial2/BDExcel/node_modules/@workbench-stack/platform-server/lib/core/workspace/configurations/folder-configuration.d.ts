import { Disposable, IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { ConfigurationModel, IWorkspaceFolder, WorkbenchState } from '@workbench-stack/core';
import { IConfigurationCache } from '@workbench-stack/core';
import { IConfigurationFileService } from '../../../interfaces';
export interface IFolderConfiguration extends IDisposable {
    readonly onDidChange: Event<void>;
    loadConfiguration(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
}
export declare class FolderConfiguration extends Disposable implements IFolderConfiguration {
    readonly workspaceFolder: IWorkspaceFolder;
    private readonly workbenchState;
    protected readonly _onDidChange: Emitter<void>;
    readonly onDidChange: Event<void>;
    private folderConfiguration;
    private folderConfigurationDisposable;
    private readonly configurationFolder;
    private cachedFolderConfiguration;
    constructor(workspaceFolder: IWorkspaceFolder, configFolderRelativePath: string, workbenchState: WorkbenchState, configurationFileService: IConfigurationFileService, configurationCache: IConfigurationCache);
    loadConfiguration(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
    private onDidFolderConfigurationChange;
    private updateCache;
}

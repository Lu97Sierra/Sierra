"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandaloneConfigurationModelParser = exports.WorkspaceConfigurationModelParser = void 0;
const core_1 = require("@workbench-stack/core");
const parsers_1 = require("../../configuration/parsers");
class WorkspaceConfigurationModelParser extends parsers_1.ConfigurationModelParser {
    constructor(name) {
        super(name);
        this._folders = [];
        this._settingsModelParser = new parsers_1.ConfigurationModelParser(name, core_1.WORKSPACE_SCOPES);
        this._launchModel = new core_1.ConfigurationModel();
    }
    get folders() {
        return this._folders;
    }
    get settingsModel() {
        return this._settingsModelParser.configurationModel;
    }
    get launchModel() {
        return this._launchModel;
    }
    reprocessWorkspaceSettings() {
        this._settingsModelParser.parse();
    }
    doParseRaw(raw) {
        this._folders = (raw['folders'] || []);
        this._settingsModelParser.parseRaw(raw['settings']);
        this._launchModel = this.createConfigurationModelFrom(raw, 'launch');
        return super.doParseRaw(raw);
    }
    createConfigurationModelFrom(raw, key) {
        const data = raw[key];
        if (data) {
            const contents = core_1.toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));
            const scopedContents = Object.create(null);
            scopedContents[key] = contents;
            const keys = Object.keys(data).map(k => `${key}.${k}`);
            return new core_1.ConfigurationModel(scopedContents, keys, []);
        }
        return new core_1.ConfigurationModel();
    }
}
exports.WorkspaceConfigurationModelParser = WorkspaceConfigurationModelParser;
class StandaloneConfigurationModelParser extends parsers_1.ConfigurationModelParser {
    constructor(name, scope) {
        super(name);
        this.scope = scope;
    }
    doParseRaw(raw) {
        const contents = core_1.toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));
        const scopedContents = Object.create(null);
        scopedContents[this.scope] = contents;
        const keys = Object.keys(raw).map(key => `${this.scope}.${key}`);
        return { contents: scopedContents, keys, overrides: [] };
    }
}
exports.StandaloneConfigurationModelParser = StandaloneConfigurationModelParser;
//# sourceMappingURL=parser.js.map
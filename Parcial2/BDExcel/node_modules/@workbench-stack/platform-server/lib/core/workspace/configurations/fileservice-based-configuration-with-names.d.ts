import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { ConfigurationModel, ConfigurationScope } from '@workbench-stack/core';
import { FileChangesEvent, IFileService } from '@files-stack/core';
import { RunOnceScheduler } from '@vscode-alt/monaco-editor/esm/vs/base/common/async';
export declare class FileServiceBasedConfigurationWithNames extends Disposable {
    protected readonly configurationFolder: URI;
    private readonly configurationNames;
    private readonly scopes;
    private fileService;
    private _folderSettingsModelParser;
    private _standAloneConfigurations;
    private _cache;
    protected readonly configurationResources: URI[];
    protected changeEventTriggerScheduler: RunOnceScheduler;
    protected readonly _onDidChange: Emitter<void>;
    readonly onDidChange: Event<void>;
    constructor(configurationFolder: URI, configurationNames: string[], scopes: ConfigurationScope[] | undefined, fileService: IFileService);
    loadConfiguration(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
    private consolidate;
    protected handleFileEvents(event: FileChangesEvent): Promise<void>;
    private toFolderRelativePath;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScopes = exports.validateProperty = exports.validateProperties = void 0;
/* tslint:disable */
const nls = require("@vscode-alt/monaco-editor/esm/vs/nls");
const core_1 = require("@workbench-stack/core");
const registry_1 = require("../../registry");
function validateProperties(configuration, collector) {
    let properties = configuration.properties;
    if (properties) {
        if (typeof properties !== 'object') {
            collector.error(nls.localize('invalid.properties', "'configuration.properties' must be an object"));
            configuration.properties = {};
        }
        for (let key in properties) {
            const message = validateProperty(key);
            const propertyConfiguration = configuration.properties[key];
            propertyConfiguration.scope = propertyConfiguration.scope && propertyConfiguration.scope.toString() === 'resource' ? 4 /* RESOURCE */ : 3 /* WINDOW */;
            if (message) {
                collector.warn(message);
                delete properties[key];
            }
        }
    }
    let subNodes = configuration.allOf;
    if (subNodes) {
        for (let node of subNodes) {
            validateProperties(node, collector);
        }
    }
}
exports.validateProperties = validateProperties;
//commented as configurationRegistry always null inside validateProperty method
// const configurationRegistry = Registry.Instance.as<IConfigurationRegistry>(Extensions.Configuration);
function validateProperty(property) {
    //@sri here as if initialized outside the function configurationRegistry variable always null
    const configurationRegistry = registry_1.Registry.Instance.as(core_1.Extensions.Configuration);
    if (core_1.OVERRIDE_PROPERTY_PATTERN.test(property)) {
        return nls.localize('config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property);
    }
    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {
        return nls.localize('config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property);
    }
    return null;
}
exports.validateProperty = validateProperty;
// @sri add configurationRegistry as argument
function getScopes(configurationRegistry) {
    const scopes = {};
    const configurationProperties = configurationRegistry.getConfigurationProperties();
    for (const key of Object.keys(configurationProperties)) {
        scopes[key] = configurationProperties[key].scope;
    }
    scopes['launch'] = 4 /* RESOURCE */;
    scopes['task'] = 4 /* RESOURCE */;
    return scopes;
}
exports.getScopes = getScopes;
//# sourceMappingURL=validation.js.map
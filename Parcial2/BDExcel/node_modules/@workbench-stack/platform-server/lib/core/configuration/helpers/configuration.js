"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOverrides = exports.getDefaultValues = exports.getConfigurationKeys = void 0;
/* tslint:disable */
const core_1 = require("@workbench-stack/core");
const registry_1 = require("../../registry");
const core_2 = require("@workbench-stack/core");
// src/vs/platform/configuration/common/configuration.ts
function getConfigurationKeys() {
    const properties = registry_1.Registry.Instance.as(core_2.Extensions.Configuration).getConfigurationProperties();
    return Object.keys(properties);
}
exports.getConfigurationKeys = getConfigurationKeys;
function getDefaultValues() {
    const valueTreeRoot = Object.create(null);
    const properties = registry_1.Registry.Instance.as(core_2.Extensions.Configuration).getConfigurationProperties();
    for (let key in properties) {
        let value = properties[key].default;
        core_1.addToValueTree(valueTreeRoot, key, value, message => console.error(`Conflict in default settings: ${message}`));
    }
    return valueTreeRoot;
}
exports.getDefaultValues = getDefaultValues;
function toOverrides(raw, conflictReporter) {
    const overrides = [];
    const configurationProperties = registry_1.Registry.Instance.as(core_2.Extensions.Configuration).getConfigurationProperties();
    for (const key of Object.keys(raw)) {
        if (core_2.OVERRIDE_PROPERTY_PATTERN.test(key)) {
            const overrideRaw = {};
            for (const keyInOverrideRaw in raw[key]) {
                if (configurationProperties[keyInOverrideRaw] && configurationProperties[keyInOverrideRaw].overridable) {
                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];
                }
            }
            overrides.push({
                identifiers: [core_1.overrideIdentifierFromKey(key).trim()],
                contents: core_1.toValuesTree(overrideRaw, conflictReporter)
            });
        }
    }
    return overrides;
}
exports.toOverrides = toOverrides;
//# sourceMappingURL=configuration.js.map
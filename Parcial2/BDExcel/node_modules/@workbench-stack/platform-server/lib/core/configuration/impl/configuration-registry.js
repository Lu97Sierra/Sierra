"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationRegistry = void 0;
const core_1 = require("@workbench-stack/core");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const registry_1 = require("../../registry");
const types = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const strings = require("@vscode-alt/monaco-editor/esm/vs/base/common/strings");
const helpers_1 = require("../helpers");
const nls = require("@vscode-alt/monaco-editor/esm/vs/nls");
const constants_1 = require("../../../constants");
const interfaces_1 = require("../../../interfaces");
const contributionRegistry = registry_1.Registry.Instance.as(core_1.Extensions.JSONContribution);
class ConfigurationRegistry {
    constructor() {
        this.overrideIdentifiers = [];
        this._onDidSchemaChange = new event_1.Emitter();
        this.onDidSchemaChange = this._onDidSchemaChange.event;
        this._onDidUpdateConfiguration = new event_1.Emitter();
        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;
        this.defaultOverridesConfigurationNode = {
            id: 'defaultOverrides',
            title: nls.localize('defaultConfigurations.title', "Default Configuration Overrides"),
            properties: {}
        };
        this.configurationContributors = [this.defaultOverridesConfigurationNode];
        this.editorConfigurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting' };
        this.configurationProperties = {};
        this.excludedConfigurationProperties = {};
        this.computeOverridePropertyPattern();
        contributionRegistry.registerSchema(constants_1.editorConfigurationSchemaId, this.editorConfigurationSchema);
    }
    registerConfiguration(configuration, validate = true) {
        this.registerConfigurations([configuration], validate);
    }
    registerConfigurations(configurations, validate = true) {
        const properties = [];
        configurations.forEach(configuration => {
            properties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults
            this.configurationContributors.push(configuration);
            this.registerJSONConfiguration(configuration);
            this.updateSchemaForOverrideSettingsConfiguration(configuration);
        });
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire(properties);
    }
    deregisterConfigurations(configurations) {
        const properties = [];
        const deregisterConfiguration = (configuration) => {
            if (configuration.properties) {
                for (const key in configuration.properties) {
                    properties.push(key);
                    delete this.configurationProperties[key];
                    delete this.editorConfigurationSchema.properties[key];
                    // Delete from schema
                    delete interfaces_1.allSettings.properties[key];
                    switch (configuration.properties[key].scope) {
                        case 1 /* APPLICATION */:
                            delete interfaces_1.applicationSettings.properties[key];
                            break;
                        case 2 /* MACHINE */:
                            delete interfaces_1.machineSettings.properties[key];
                            break;
                        case 3 /* WINDOW */:
                            delete interfaces_1.windowSettings.properties[key];
                            break;
                        case 4 /* RESOURCE */:
                            delete interfaces_1.resourceSettings.properties[key];
                            break;
                    }
                }
            }
            if (configuration.allOf) {
                configuration.allOf.forEach(node => deregisterConfiguration(node));
            }
        };
        for (const configuration of configurations) {
            deregisterConfiguration(configuration);
            const index = this.configurationContributors.indexOf(configuration);
            if (index !== -1) {
                this.configurationContributors.splice(index, 1);
            }
        }
        contributionRegistry.registerSchema(constants_1.editorConfigurationSchemaId, this.editorConfigurationSchema);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire(properties);
    }
    registerDefaultConfigurations(defaultConfigurations) {
        const properties = [];
        for (const defaultConfiguration of defaultConfigurations) {
            for (const key in defaultConfiguration.defaults) {
                const defaultValue = defaultConfiguration.defaults[key];
                if (core_1.OVERRIDE_PROPERTY_PATTERN.test(key) && typeof defaultValue === 'object') {
                    const propertySchema = {
                        type: 'object',
                        default: defaultValue,
                        description: nls.localize('overrideSettings.description', "Configure editor settings to be overridden for {0} language.", key),
                        $ref: constants_1.editorConfigurationSchemaId
                    };
                    interfaces_1.allSettings.properties[key] = propertySchema;
                    this.defaultOverridesConfigurationNode.properties[key] = propertySchema;
                    this.configurationProperties[key] = propertySchema;
                    properties.push(key);
                }
            }
        }
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire(properties);
    }
    deregisterDefaultConfigurations(defaultConfigurations) {
        const properties = [];
        for (const defaultConfiguration of defaultConfigurations) {
            for (const key in defaultConfiguration.defaults) {
                properties.push(key);
                delete interfaces_1.allSettings.properties[key];
                delete this.defaultOverridesConfigurationNode.properties[key];
                delete this.configurationProperties[key];
            }
        }
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire(properties);
    }
    notifyConfigurationSchemaUpdated(...configurations) {
        this._onDidSchemaChange.fire();
    }
    registerOverrideIdentifiers(overrideIdentifiers) {
        this.overrideIdentifiers.push(...overrideIdentifiers);
        this.updateOverridePropertyPatternKey();
    }
    validateAndRegisterProperties(configuration, validate = true, scope = 3 /* WINDOW */, overridable = false) {
        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;
        overridable = configuration.overridable || overridable;
        let propertyKeys = [];
        let properties = configuration.properties;
        if (properties) {
            for (let key in properties) {
                let message;
                if (validate && (message = helpers_1.validateProperty(key))) {
                    console.warn(message);
                    delete properties[key];
                    continue;
                }
                // fill in default values
                let property = properties[key];
                let defaultValue = property.default;
                if (types.isUndefined(defaultValue)) {
                    property.default = getDefaultValue(property.type);
                }
                // Inherit overridable property from parent
                if (overridable) {
                    property.overridable = true;
                }
                if (core_1.OVERRIDE_PROPERTY_PATTERN.test(key)) {
                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`
                }
                else {
                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;
                }
                // Add to properties maps
                // Property is included by default if 'included' is unspecified
                if (properties[key].hasOwnProperty('included') && !properties[key].included) {
                    this.excludedConfigurationProperties[key] = properties[key];
                    delete properties[key];
                    continue;
                }
                else {
                    this.configurationProperties[key] = properties[key];
                }
                propertyKeys.push(key);
            }
        }
        let subNodes = configuration.allOf;
        if (subNodes) {
            for (let node of subNodes) {
                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope, overridable));
            }
        }
        return propertyKeys;
    }
    getConfigurations() {
        return this.configurationContributors;
    }
    getConfigurationProperties() {
        return this.configurationProperties;
    }
    getExcludedConfigurationProperties() {
        return this.excludedConfigurationProperties;
    }
    registerJSONConfiguration(configuration) {
        function register(configuration) {
            let properties = configuration.properties;
            if (properties) {
                for (const key in properties) {
                    interfaces_1.allSettings.properties[key] = properties[key];
                    switch (properties[key].scope) {
                        case 1 /* APPLICATION */:
                            interfaces_1.applicationSettings.properties[key] = properties[key];
                            break;
                        case 2 /* MACHINE */:
                            interfaces_1.machineSettings.properties[key] = properties[key];
                            break;
                        case 3 /* WINDOW */:
                            interfaces_1.windowSettings.properties[key] = properties[key];
                            break;
                        case 4 /* RESOURCE */:
                            interfaces_1.resourceSettings.properties[key] = properties[key];
                            break;
                    }
                }
            }
            let subNodes = configuration.allOf;
            if (subNodes) {
                subNodes.forEach(register);
            }
        }
        register(configuration);
    }
    updateSchemaForOverrideSettingsConfiguration(configuration) {
        if (configuration.id !== core_1.SETTINGS_OVERRRIDE_NODE_ID) {
            this.update(configuration);
            contributionRegistry.registerSchema(constants_1.editorConfigurationSchemaId, this.editorConfigurationSchema);
        }
    }
    updateOverridePropertyPatternKey() {
        let patternProperties = interfaces_1.allSettings.patternProperties[this.overridePropertyPattern];
        if (!patternProperties) {
            patternProperties = {
                type: 'object',
                description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
                errorMessage: 'Unknown Identifier. Use language identifiers',
                $ref: constants_1.editorConfigurationSchemaId
            };
        }
        delete interfaces_1.allSettings.patternProperties[this.overridePropertyPattern];
        delete interfaces_1.applicationSettings.patternProperties[this.overridePropertyPattern];
        delete interfaces_1.machineSettings.patternProperties[this.overridePropertyPattern];
        delete interfaces_1.windowSettings.patternProperties[this.overridePropertyPattern];
        delete interfaces_1.resourceSettings.patternProperties[this.overridePropertyPattern];
        this.computeOverridePropertyPattern();
        interfaces_1.allSettings.patternProperties[this.overridePropertyPattern] = patternProperties;
        interfaces_1.applicationSettings.patternProperties[this.overridePropertyPattern] = patternProperties;
        interfaces_1.machineSettings.patternProperties[this.overridePropertyPattern] = patternProperties;
        interfaces_1.windowSettings.patternProperties[this.overridePropertyPattern] = patternProperties;
        interfaces_1.resourceSettings.patternProperties[this.overridePropertyPattern] = patternProperties;
        this._onDidSchemaChange.fire();
    }
    update(configuration) {
        let properties = configuration.properties;
        if (properties) {
            for (let key in properties) {
                if (properties[key].overridable) {
                    this.editorConfigurationSchema.properties[key] = this.getConfigurationProperties()[key];
                }
            }
        }
        let subNodes = configuration.allOf;
        if (subNodes) {
            subNodes.forEach(subNode => this.update(subNode));
        }
    }
    computeOverridePropertyPattern() {
        this.overridePropertyPattern = this.overrideIdentifiers.length ? core_1.OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(identifier => strings.createRegExp(identifier, false).source).join('|')) : core_1.OVERRIDE_PROPERTY;
    }
}
exports.ConfigurationRegistry = ConfigurationRegistry;
function getDefaultValue(type) {
    const t = Array.isArray(type) ? type[0] : type;
    switch (t) {
        case 'boolean':
            return false;
        case 'integer':
        case 'number':
            return 0;
        case 'string':
            return '';
        case 'array':
            return [];
        case 'object':
            return {};
        default:
            return null;
    }
}
//# sourceMappingURL=configuration-registry.js.map
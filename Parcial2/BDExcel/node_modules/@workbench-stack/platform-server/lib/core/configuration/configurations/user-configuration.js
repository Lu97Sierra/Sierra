"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserConfiguration = exports.RemoteUserConfiguration = void 0;
const resources = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
const core_1 = require("@files-stack/core");
const parsers_1 = require("../parsers");
const core_2 = require("@workbench-stack/core");
class RemoteUserConfiguration extends lifecycle_1.Disposable {
    constructor(remoteAuthority, configurationCache, configurationFileService, remoteAgentService) {
        super();
        this._userConfigurationInitializationPromise = null;
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this._configurationFileService = configurationFileService;
        this._userConfiguration = this._cachedConfiguration = new CachedUserConfiguration(remoteAuthority, configurationCache);
        remoteAgentService.getEnvironment().then((environment) => __awaiter(this, void 0, void 0, function* () {
            if (environment) {
                const userConfiguration = this._register(new UserConfiguration(environment.settingsPath, core_2.REMOTE_MACHINE_SCOPES, this._configurationFileService));
                this._register(userConfiguration.onDidChangeConfiguration(configurationModel => this.onDidUserConfigurationChange(configurationModel)));
                this._userConfigurationInitializationPromise = userConfiguration.initialize();
                const configurationModel = yield this._userConfigurationInitializationPromise;
                this._userConfiguration.dispose();
                this._userConfiguration = userConfiguration;
                this.onDidUserConfigurationChange(configurationModel);
            }
        }));
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._userConfiguration instanceof UserConfiguration) {
                return this._userConfiguration.initialize();
            }
            // Initialize cached configuration
            let configurationModel = yield this._userConfiguration.initialize();
            if (this._userConfigurationInitializationPromise) {
                // Use user configuration
                configurationModel = yield this._userConfigurationInitializationPromise;
                this._userConfigurationInitializationPromise = null;
            }
            return configurationModel;
        });
    }
    reload() {
        return this._userConfiguration.reload();
    }
    reprocess() {
        return this._userConfiguration.reprocess();
    }
    onDidUserConfigurationChange(configurationModel) {
        this.updateCache(configurationModel);
        this._onDidChangeConfiguration.fire(configurationModel);
    }
    updateCache(configurationModel) {
        return this._cachedConfiguration.updateConfiguration(configurationModel);
    }
}
exports.RemoteUserConfiguration = RemoteUserConfiguration;
class UserConfiguration extends lifecycle_1.Disposable {
    constructor(configurationResource, scopes, configurationFileService) {
        super();
        this.configurationResource = configurationResource;
        this.scopes = scopes;
        this.configurationFileService = configurationFileService;
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this.fileWatcherDisposable = lifecycle_1.Disposable.None;
        this.directoryWatcherDisposable = lifecycle_1.Disposable.None;
        console.log('UserConfiguration ----', this.configurationResource.toString(), this.scopes);
        this.parser = new parsers_1.ConfigurationModelParser(this.configurationResource.toString(), this.scopes);
        this._register(configurationFileService.onFileChanges(e => this.handleFileEvents(e)));
        this.reloadConfigurationScheduler = this._register(new async_1.RunOnceScheduler(() => this.reload().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)), 50));
        this._register(lifecycle_1.toDisposable(() => {
            this.stopWatchingResource();
            this.stopWatchingDirectory();
        }));
    }
    watchResource() {
        this.fileWatcherDisposable = this.configurationFileService.watch(this.configurationResource);
    }
    stopWatchingResource() {
        this.fileWatcherDisposable.dispose();
        this.fileWatcherDisposable = lifecycle_1.Disposable.None;
    }
    watchDirectory() {
        const directory = resources.dirname(this.configurationResource);
        this.directoryWatcherDisposable = this.configurationFileService.watch(directory);
    }
    stopWatchingDirectory() {
        this.directoryWatcherDisposable.dispose();
        this.directoryWatcherDisposable = lifecycle_1.Disposable.None;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const exists = yield this.configurationFileService.exists(this.configurationResource);
            this.onResourceExists(exists);
            const configuraitonModel = yield this.reload();
            if (!this.configurationFileService.isWatching) {
                this.configurationFileService.whenWatchingStarted.then(() => this.onWatchStarted(configuraitonModel));
            }
            return configuraitonModel;
        });
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const content = yield this.configurationFileService.readFile(this.configurationResource);
                this.parser.parseContent(content);
                return this.parser.configurationModel;
            }
            catch (e) {
                return new core_2.ConfigurationModel();
            }
        });
    }
    reprocess() {
        this.parser.parse();
        return this.parser.configurationModel;
    }
    onWatchStarted(currentModel) {
        return __awaiter(this, void 0, void 0, function* () {
            const configuraitonModel = yield this.reload();
            const { added, removed, updated } = core_2.compare(currentModel, configuraitonModel);
            if (added.length || removed.length || updated.length) {
                this._onDidChangeConfiguration.fire(configuraitonModel);
            }
        });
    }
    handleFileEvents(event) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('---EVENT ', event);
            const events = event.changes;
            let affectedByChanges = false;
            // Find changes that affect the resource
            for (const event of events) {
                affectedByChanges = resources.isEqual(this.configurationResource, event.resource);
                if (affectedByChanges) {
                    if (event.type === core_1.FileChangeType.ADDED) {
                        this.onResourceExists(true);
                    }
                    else if (event.type === core_1.FileChangeType.DELETED) {
                        this.onResourceExists(false);
                    }
                    break;
                }
            }
            if (affectedByChanges) {
                this.reloadConfigurationScheduler.schedule();
            }
        });
    }
    onResourceExists(exists) {
        if (exists) {
            this.stopWatchingDirectory();
            this.watchResource();
        }
        else {
            this.stopWatchingResource();
            this.watchDirectory();
        }
    }
}
exports.UserConfiguration = UserConfiguration;
class CachedUserConfiguration extends lifecycle_1.Disposable {
    constructor(remoteAuthority, configurationCache) {
        super();
        this.configurationCache = configurationCache;
        this._onDidChange = this._register(new event_1.Emitter());
        this.onDidChange = this._onDidChange.event;
        this.key = { type: 'user', key: remoteAuthority };
        this.configurationModel = new core_2.ConfigurationModel();
    }
    getConfigurationModel() {
        return this.configurationModel;
    }
    initialize() {
        return this.reload();
    }
    reprocess() {
        return this.configurationModel;
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.configurationCache.read(this.key);
            try {
                const parsed = JSON.parse(content);
                this.configurationModel = new core_2.ConfigurationModel(parsed.contents, parsed.keys, parsed.overrides);
            }
            catch (e) {
            }
            return this.configurationModel;
        });
    }
    updateConfiguration(configurationModel) {
        if (configurationModel.keys.length) {
            return this.configurationCache.write(this.key, JSON.stringify(configurationModel.toJSON()));
        }
        else {
            return this.configurationCache.remove(this.key);
        }
    }
}
//# sourceMappingURL=user-configuration.js.map
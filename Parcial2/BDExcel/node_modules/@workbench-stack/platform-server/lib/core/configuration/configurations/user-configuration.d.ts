import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IConfigurationCache, ConfigurationScope, ConfigurationModel } from '@workbench-stack/core';
import { IConfigurationFileService } from '../../../interfaces';
import { IRemoteAgentService } from '../../../interfaces';
export declare class RemoteUserConfiguration extends Disposable {
    private readonly _cachedConfiguration;
    private readonly _configurationFileService;
    private _userConfiguration;
    private _userConfigurationInitializationPromise;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<ConfigurationModel>;
    constructor(remoteAuthority: string, configurationCache: IConfigurationCache, configurationFileService: IConfigurationFileService, remoteAgentService: IRemoteAgentService);
    initialize(): Promise<ConfigurationModel>;
    reload(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
    private onDidUserConfigurationChange;
    private updateCache;
}
export declare class UserConfiguration extends Disposable {
    private readonly configurationResource;
    private readonly scopes;
    private readonly configurationFileService;
    private readonly parser;
    private readonly reloadConfigurationScheduler;
    protected readonly _onDidChangeConfiguration: Emitter<ConfigurationModel>;
    readonly onDidChangeConfiguration: Event<ConfigurationModel>;
    private fileWatcherDisposable;
    private directoryWatcherDisposable;
    constructor(configurationResource: URI, scopes: ConfigurationScope[] | undefined, configurationFileService: IConfigurationFileService);
    private watchResource;
    private stopWatchingResource;
    private watchDirectory;
    private stopWatchingDirectory;
    initialize(): Promise<ConfigurationModel>;
    reload(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
    private onWatchStarted;
    private handleFileEvents;
    private onResourceExists;
}

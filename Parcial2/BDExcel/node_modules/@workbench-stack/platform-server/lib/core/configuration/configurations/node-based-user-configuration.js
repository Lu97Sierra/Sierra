"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeBasedUserConfiguration = void 0;
/* tslint:disable */
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const errors_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/errors");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const config_workaround_1 = require("./config-workaround");
const parsers_1 = require("../parsers");
class NodeBasedUserConfiguration extends lifecycle_1.Disposable {
    constructor(settingsPath) {
        super();
        this.settingsPath = settingsPath;
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
    }
    initialize() {
        if (!this.initializePromise) {
            this.initializePromise = new Promise((c, e) => {
                this.userConfigModelWatcher = new config_workaround_1.ConfigWatcher(this.settingsPath, {
                    changeBufferDelay: 300, onError: error => errors_1.onUnexpectedError(error), defaultConfig: new parsers_1.ConfigurationModelParser(this.settingsPath),
                    parse: (content, parseErrors) => {
                        const userConfigModelParser = new parsers_1.ConfigurationModelParser(this.settingsPath);
                        userConfigModelParser.parseContent(content);
                        parseErrors = [...userConfigModelParser.errors];
                        return userConfigModelParser;
                    },
                    initCallback: () => c(undefined)
                });
                this._register(this.userConfigModelWatcher);
                // Listeners
                this._register(this.userConfigModelWatcher.onDidUpdateConfiguration(() => this._onDidChangeConfiguration.fire(this.userConfigModelWatcher.getConfig().configurationModel)));
            });
        }
        return this.initializePromise.then(() => this.userConfigModelWatcher.getConfig().configurationModel);
    }
    initializeSync() {
        this.initialize();
        return this.userConfigModelWatcher.getConfig().configurationModel;
    }
    reload() {
        return this.initialize().then(() => new Promise(c => this.userConfigModelWatcher.reload(userConfigModelParser => c(userConfigModelParser.configurationModel))));
    }
    getConfigurationModel() {
        return this.userConfigModelWatcher.getConfig().configurationModel;
    }
}
exports.NodeBasedUserConfiguration = NodeBasedUserConfiguration;
//# sourceMappingURL=node-based-user-configuration.js.map
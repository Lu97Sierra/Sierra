import { IEnvironmentService, ParsedArgs, IExtensionHostDebugParams, IDebugParams } from '@workbench-stack/core';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
export declare class EnvironmentService implements IEnvironmentService {
    private _args;
    private _execPath;
    get args(): ParsedArgs;
    get appRoot(): string;
    get execPath(): string;
    readonly logsPath: string;
    get cliPath(): string;
    get userHome(): string;
    get userDataPath(): string;
    get appNameLong(): string;
    get appQuality(): string;
    get appSettingsHome(): string;
    get userRoamingDataHome(): URI;
    get appSettingsPath(): string;
    get machineSettingsHome(): string;
    get globalStorageHome(): string;
    get settingsSearchBuildId(): number;
    get settingsSearchUrl(): string;
    get workspaceStorageHome(): string;
    get appKeybindingsPath(): string;
    get isExtensionDevelopment(): boolean;
    get backupHome(): string;
    get backupWorkspacesPath(): string;
    get workspacesHome(): string;
    get workspacesProjectPath(): string;
    get workspaceSettingsPath(): string;
    get untitledWorkspacesHome(): URI;
    get installSourcePath(): string;
    get builtinExtensionsPath(): string;
    get extensionsPath(): string;
    get extensionDevelopmentLocationURI(): URI[];
    get extensionTestsPath(): string;
    get disableExtensions(): boolean | string[];
    get skipGettingStarted(): boolean;
    get skipReleaseNotes(): boolean;
    get skipAddToRecentlyOpened(): boolean;
    get debugExtensionHost(): IExtensionHostDebugParams;
    get debugSearch(): IDebugParams;
    get isBuilt(): boolean;
    get verbose(): boolean;
    get logLevel(): any;
    get log(): string;
    get wait(): boolean;
    get logExtensionHostCommunication(): boolean;
    get performance(): boolean;
    get status(): boolean;
    get mainIPCHandle(): string;
    get sharedIPCHandle(): string;
    get nodeCachedDataDir(): string;
    get disableUpdates(): boolean;
    get disableCrashReporter(): boolean;
    get driverHandle(): string;
    get driverVerbose(): boolean;
    get keybindingsResource(): URI;
    get settingsResource(): URI;
    get keyboardLayoutResource(): URI;
    constructor(_args: ParsedArgs, _execPath: string);
}

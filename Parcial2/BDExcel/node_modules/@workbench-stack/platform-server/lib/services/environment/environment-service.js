"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentService = void 0;
/* tslint:disable */
const inversify_1 = require("inversify");
const os = require("os");
const path = require("path");
const decorators_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/decorators");
const product_1 = require("../../core/product");
const helpers_1 = require("../../core/environment/helpers");
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
const platform_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/platform");
const date_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/date");
const LogLevel = require("bunyan");
const resources = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
function getCLIPath(execPath, appRoot, isBuilt) {
    // Windows
    if (platform_1.isWindows) {
        if (isBuilt) {
            return path.join(path.dirname(execPath), 'bin', `${product_1.product.applicationName}.cmd`);
        }
        return path.join(appRoot, 'scripts', 'code-cli.bat');
    }
    // Linux
    if (platform_1.isLinux) {
        if (isBuilt) {
            return path.join(path.dirname(execPath), 'bin', `${product_1.product.applicationName}`);
        }
        return path.join(appRoot, 'scripts', 'code-cli.sh');
    }
    // macOS
    if (isBuilt) {
        return path.join(appRoot, 'bin', 'code');
    }
    return path.join(appRoot, 'scripts', 'code-cli.sh');
}
let EnvironmentService = class EnvironmentService {
    constructor(_args, _execPath) {
        this._args = _args;
        this._execPath = _execPath;
        if (!process.env['CDECODE_LOGS']) {
            const key = date_1.toLocalISOString(new Date()).replace(/-|:|\.\d+Z$/g, '');
            process.env['CDECODE_LOGS'] = path.join(this.userDataPath, 'logs', key);
        }
        this.logsPath = process.env['CDECODE_LOGS'];
    }
    get args() { return this._args; }
    //@sri modified
    get appRoot() { return __dirname; }
    get execPath() { return this._execPath; }
    get cliPath() { return getCLIPath(this.execPath, this.appRoot, this.isBuilt); }
    get userHome() { return os.homedir(); }
    // example: <root-path>/user-data
    get userDataPath() {
        const vscodePortable = process.env['CDECODE_PORTABLE'];
        if (vscodePortable) {
            return path.join(vscodePortable, 'user-data');
        }
        //@sri modified
        return helpers_1.parseUserDataDir(this._args, process.platform);
    }
    get appNameLong() { return product_1.product.nameLong; }
    get appQuality() { return product_1.product.quality; }
    //@sri modified
    get appSettingsHome() { return this.userDataPath; }
    get userRoamingDataHome() { return uri_1.URI.file(path.join(this.userDataPath, 'User')); }
    // example: <root-path>/user-data/settings.json
    get appSettingsPath() { return path.join(this.appSettingsHome, 'settings.json'); }
    // get appSettingsPath(): string { return 'mongo:///settings.json' }
    // example: <root-path>/user-data/Machine
    get machineSettingsHome() { return path.join(this.userDataPath, 'Machine'); }
    // example: <root-path>/user-data/globalStorage
    get globalStorageHome() { return path.join(this.appSettingsHome, 'globalStorage'); }
    get settingsSearchBuildId() { return product_1.product.settingsSearchBuildId; }
    get settingsSearchUrl() { return product_1.product.settingsSearchUrl; }
    // example: <root-path>/user-data/workspaceStorage
    get workspaceStorageHome() { return path.join(this.appSettingsHome, 'workspaceStorage'); }
    // example: <root-path>/user-data/keybindings.json
    get appKeybindingsPath() { return path.join(this.appSettingsHome, 'keybindings.json'); }
    get isExtensionDevelopment() { return !!this._args.extensionDevelopmentPath; }
    // example: <root-path>/user-data/Backups
    get backupHome() { return path.join(this.userDataPath, 'Backups'); }
    // example: <root-path>/user-data/Backups/workspaces.json
    get backupWorkspacesPath() { return path.join(this.backupHome, 'workspaces.json'); }
    // example: <root-path>/user-data/Workspaces
    get workspacesHome() { return path.join(this.userDataPath, 'Workspaces'); }
    get workspacesProjectPath() {
        const workspaceProject = process.env['FILE_ROOT_PATH'];
        if (workspaceProject) {
            return workspaceProject;
        }
        //@sri modified
        return path.join(this.workspacesHome, 'App');
    }
    // example: <root-path>/user-data/Workspaces/workspaces.json
    get workspaceSettingsPath() { return path.join(this.workspacesHome, 'workspaces.json'); }
    // example: /usr/path/user-data/Workspaces
    get untitledWorkspacesHome() { return uri_1.URI.file(path.join(this.userDataPath, 'Workspaces')); }
    // example: /usr/path/user-data/installSource
    get installSourcePath() { return path.join(this.userDataPath, 'installSource'); }
    //@sri modified
    get builtinExtensionsPath() {
        const fromArgs = helpers_1.parsePathArg(this._args['builtin-extensions-dir'], process);
        if (fromArgs) {
            return fromArgs;
        }
        else {
            return '/tmp';
        }
    }
    get extensionsPath() {
        const fromArgs = helpers_1.parsePathArg(this._args['extensions-dir'], process);
        if (fromArgs) {
            return fromArgs;
        }
        else if (process.env['VSCODE_EXTENSIONS'] || process.env['CDECODE_EXTENSIONS']) {
            return process.env['VSCODE_EXTENSIONS'] || process.env['CDECODE_EXTENSIONS'];
        }
        else if (process.env['VSCODE_PORTABLE'] || process.env['CDECODE_PORTABLE']) {
            return path.join(process.env['VSCODE_PORTABLE'] || process.env['CDECODE_PORTABLE'], 'extensions');
        }
        else {
            return path.join(this.userHome, product_1.product.dataFolderName, 'extensions');
        }
    }
    get extensionDevelopmentLocationURI() {
        const s = this._args.extensionDevelopmentPath;
        if (Array.isArray(s)) {
            return s.map(p => {
                if (/^[^:/?#]+?:\/\//.test(p)) {
                    return uri_1.URI.parse(p);
                }
                return uri_1.URI.file(path.normalize(p));
            });
        }
        else if (s) {
            if (/^[^:/?#]+?:\/\//.test(s)) {
                return [uri_1.URI.parse(s)];
            }
            return [uri_1.URI.file(path.normalize(s))];
        }
        return undefined;
    }
    get extensionTestsPath() { return this._args.extensionTestsPath ? path.normalize(this._args.extensionTestsPath) : this._args.extensionTestsPath; }
    get disableExtensions() {
        if (this._args['disable-extensions']) {
            return true;
        }
        const disableExtensions = this._args['disable-extension'];
        if (disableExtensions) {
            if (typeof disableExtensions === 'string') {
                return [disableExtensions];
            }
            if (Array.isArray(disableExtensions) && disableExtensions.length > 0) {
                return disableExtensions;
            }
        }
        return false;
    }
    get skipGettingStarted() { return this._args['skip-getting-started']; }
    get skipReleaseNotes() { return this._args['skip-release-notes']; }
    get skipAddToRecentlyOpened() { return this._args['skip-add-to-recently-opened']; }
    get debugExtensionHost() { return helpers_1.parseExtensionHostPort(this._args, this.isBuilt); }
    get debugSearch() { return helpers_1.parseSearchPort(this._args, this.isBuilt); }
    get isBuilt() { return !process.env['VSCODE_DEV']; }
    get verbose() { return this._args.verbose; }
    get logLevel() {
        if (this.verbose) {
            return LogLevel.TRACE;
        }
        if (typeof this._args.log === 'string') {
            const logLevel = this._args.log.toLowerCase();
            switch (logLevel) {
                case 'trace':
                    return LogLevel.TRACE;
                case 'debug':
                    return LogLevel.DEBUG;
                case 'info':
                    return LogLevel.INFO;
                case 'warn':
                    return LogLevel.WARN;
                case 'error':
                    return LogLevel.ERROR;
                case 'critical':
                    return LogLevel.FATAL;
                case 'off':
                    return LogLevel.INFO;
            }
        }
        return LogLevel.INFO;
    }
    get log() { return this._args.log; }
    get wait() { return this._args.wait; }
    get logExtensionHostCommunication() { return this._args.logExtensionHostCommunication; }
    get performance() { return this._args.performance; }
    get status() { return this._args.status; }
    // example: /usr/path/user-data/main
    get mainIPCHandle() { return helpers_1.getIPCHandle(this.userDataPath, 'main'); }
    // example: /usr/path/user-data/shared
    get sharedIPCHandle() { return helpers_1.getIPCHandle(this.userDataPath, 'shared'); }
    get nodeCachedDataDir() { return process.env['VSCODE_NODE_CACHED_DATA_DIR'] || undefined; }
    get disableUpdates() { return !!this._args['disable-updates']; }
    get disableCrashReporter() { return !!this._args['disable-crash-reporter']; }
    get driverHandle() { return this._args['driver']; }
    get driverVerbose() { return this._args['driver-verbose']; }
    get keybindingsResource() { return resources.joinPath(this.userRoamingDataHome, 'keybindings.json'); }
    get settingsResource() { return resources.joinPath(this.userRoamingDataHome, 'settings.json'); }
    get keyboardLayoutResource() { return resources.joinPath(this.userRoamingDataHome, 'keyboardLayout.json'); }
};
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "appRoot", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "cliPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "userHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "userDataPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "appSettingsHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", uri_1.URI),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "userRoamingDataHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "appSettingsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "machineSettingsHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "globalStorageHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "settingsSearchBuildId", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "settingsSearchUrl", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "workspaceStorageHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "appKeybindingsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "isExtensionDevelopment", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "backupHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "backupWorkspacesPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "workspacesHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "workspacesProjectPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "workspaceSettingsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", uri_1.URI),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "untitledWorkspacesHome", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "installSourcePath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "builtinExtensionsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "extensionsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "extensionDevelopmentLocationURI", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "extensionTestsPath", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "debugExtensionHost", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "debugSearch", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "logLevel", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "mainIPCHandle", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "sharedIPCHandle", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "nodeCachedDataDir", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", uri_1.URI),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "keybindingsResource", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", uri_1.URI),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "settingsResource", null);
__decorate([
    decorators_1.memoize,
    __metadata("design:type", uri_1.URI),
    __metadata("design:paramtypes", [])
], EnvironmentService.prototype, "keyboardLayoutResource", null);
EnvironmentService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [Object, String])
], EnvironmentService);
exports.EnvironmentService = EnvironmentService;
//# sourceMappingURL=environment-service.js.map
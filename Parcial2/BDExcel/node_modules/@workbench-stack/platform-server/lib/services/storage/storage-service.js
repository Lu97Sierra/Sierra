"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageService = void 0;
const errors = require("@vscode-alt/monaco-editor/esm/vs/base/common/errors");
const strings = require("@vscode-alt/monaco-editor/esm/vs/base/common/strings");
const types = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
class StorageService extends lifecycle_1.Disposable {
    constructor(globalStorage, workspaceStorage, workspaceId, legacyWorkspaceId) {
        super();
        this._onDidChangeStorage = this._register(new event_1.Emitter());
        this.globalStorage = globalStorage;
        this.workspaceStorage = workspaceStorage || globalStorage;
        // Calculate workspace storage key
        this.workspaceKey = this.getWorkspaceKey(workspaceId);
        // Make sure to delete all workspace storage if the workspace has been recreated meanwhile
        // which is only possible if a id property is provided that we can check on
        if (types.isNumber(legacyWorkspaceId)) {
            this.cleanupWorkspaceScope(legacyWorkspaceId);
        }
    }
    get onDidChangeStorage() { return this._onDidChangeStorage.event; }
    getWorkspaceKey(id) {
        if (!id) {
            return StorageService.NO_WORKSPACE_IDENTIFIER;
        }
        // Special case file:// URIs: strip protocol from key to produce shorter key
        const fileProtocol = 'file:///';
        if (id.indexOf(fileProtocol) === 0) {
            id = id.substr(fileProtocol.length);
        }
        // Always end with "/"
        return `${strings.rtrim(id, '/')}/`;
    }
    cleanupWorkspaceScope(workspaceUid) {
        // Get stored identifier from storage
        const id = this.getInteger(StorageService.WORKSPACE_IDENTIFIER, "WORKSPACE" /* WORKSPACE */);
        // If identifier differs, assume the workspace got recreated and thus clean all storage for this workspace
        if (types.isNumber(id) && workspaceUid !== id) {
            const keyPrefix = this.toStorageKey('', "WORKSPACE" /* WORKSPACE */);
            const toDelete = [];
            const length = this.workspaceStorage.length;
            for (let i = 0; i < length; i++) {
                const key = this.workspaceStorage.key(i);
                if (key.indexOf(StorageService.WORKSPACE_PREFIX) < 0) {
                    continue; // ignore stored things that don't belong to storage service or are defined globally
                }
                // Check for match on prefix
                if (key.indexOf(keyPrefix) === 0) {
                    toDelete.push(key);
                }
            }
            // Run the delete
            toDelete.forEach((keyToDelete) => {
                this.workspaceStorage.removeItem(keyToDelete);
            });
        }
        // Store workspace identifier now
        if (workspaceUid !== id) {
            this.store(StorageService.WORKSPACE_IDENTIFIER, workspaceUid, "WORKSPACE" /* WORKSPACE */);
        }
    }
    clear() {
        this.globalStorage.clear();
        this.workspaceStorage.clear();
    }
    store(key, value, scope = "GLOBAL" /* GLOBAL */) {
        const storage = (scope === "GLOBAL" /* GLOBAL */) ? this.globalStorage : this.workspaceStorage;
        if (types.isUndefinedOrNull(value)) {
            this.remove(key, scope); // we cannot store null or undefined, in that case we remove the key
            return;
        }
        const storageKey = this.toStorageKey(key, scope);
        // Store
        try {
            storage.setItem(storageKey, value);
        }
        catch (error) {
            errors.onUnexpectedError(error);
        }
    }
    get(key, scope = "GLOBAL" /* GLOBAL */, defaultValue) {
        const storage = (scope === "GLOBAL" /* GLOBAL */) ? this.globalStorage : this.workspaceStorage;
        const value = storage.getItem(this.toStorageKey(key, scope));
        if (types.isUndefinedOrNull(value)) {
            return defaultValue;
        }
        return value;
    }
    remove(key, scope = "GLOBAL" /* GLOBAL */) {
        const storage = (scope === "GLOBAL" /* GLOBAL */) ? this.globalStorage : this.workspaceStorage;
        const storageKey = this.toStorageKey(key, scope);
        // Remove
        storage.removeItem(storageKey);
    }
    swap(key, valueA, valueB, scope = "GLOBAL" /* GLOBAL */, defaultValue) {
        const value = this.get(key, scope);
        if (types.isUndefinedOrNull(value) && defaultValue) {
            this.store(key, defaultValue, scope);
        }
        else if (value === valueA.toString()) { // Convert to string because store is string based
            this.store(key, valueB, scope);
        }
        else {
            this.store(key, valueA, scope);
        }
    }
    getInteger(key, scope = "GLOBAL" /* GLOBAL */, defaultValue) {
        const value = this.get(key, scope, defaultValue);
        if (types.isUndefinedOrNull(value)) {
            return defaultValue;
        }
        return parseInt(value, 10);
    }
    getBoolean(key, scope = "GLOBAL" /* GLOBAL */, defaultValue) {
        const value = this.get(key, scope, defaultValue);
        if (types.isUndefinedOrNull(value)) {
            return defaultValue;
        }
        if (types.isString(value)) {
            return value.toLowerCase() === 'true' ? true : false;
        }
        return value ? true : false;
    }
    toStorageKey(key, scope) {
        if (scope === "GLOBAL" /* GLOBAL */) {
            return StorageService.GLOBAL_PREFIX + key.toLowerCase();
        }
        return StorageService.WORKSPACE_PREFIX + this.workspaceKey + key.toLowerCase();
    }
}
exports.StorageService = StorageService;
StorageService.COMMON_PREFIX = 'storage://';
StorageService.GLOBAL_PREFIX = `${StorageService.COMMON_PREFIX}global/`;
StorageService.WORKSPACE_PREFIX = `${StorageService.COMMON_PREFIX}workspace/`;
StorageService.WORKSPACE_IDENTIFIER = 'workspaceIdentifier';
StorageService.NO_WORKSPACE_IDENTIFIER = '__$noWorkspace__';
//# sourceMappingURL=storage-service.js.map
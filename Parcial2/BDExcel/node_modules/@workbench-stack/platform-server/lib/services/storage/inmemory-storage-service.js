"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryStorageService = void 0;
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const types_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const inversify_1 = require("inversify");
let InMemoryStorageService = class InMemoryStorageService extends lifecycle_1.Disposable {
    constructor() {
        super(...arguments);
        this._onDidChangeStorage = this._register(new event_1.Emitter());
        this.onWillSaveState = event_1.Event.None;
        this.globalCache = new Map();
        this.workspaceCache = new Map();
    }
    get onDidChangeStorage() { return this._onDidChangeStorage.event; }
    getCache(scope) {
        return scope === "GLOBAL" /* GLOBAL */ ? this.globalCache : this.workspaceCache;
    }
    get(key, scope, fallbackValue) {
        const value = this.getCache(scope).get(key);
        if (types_1.isUndefinedOrNull(value)) {
            return fallbackValue;
        }
        return value;
    }
    getBoolean(key, scope, fallbackValue) {
        const value = this.getCache(scope).get(key);
        if (types_1.isUndefinedOrNull(value)) {
            return fallbackValue;
        }
        return value === 'true';
    }
    getInteger(key, scope, fallbackValue) {
        const value = this.getCache(scope).get(key);
        if (types_1.isUndefinedOrNull(value)) {
            return fallbackValue;
        }
        return parseInt(value, 10);
    }
    store(key, value, scope) {
        // We remove the key for undefined/null values
        if (types_1.isUndefinedOrNull(value)) {
            return this.remove(key, scope);
        }
        // Otherwise, convert to String and store
        const valueStr = String(value);
        // Return early if value already set
        const currentValue = this.getCache(scope).get(key);
        if (currentValue === valueStr) {
            return Promise.resolve();
        }
        // Update in cache
        this.getCache(scope).set(key, valueStr);
        // Events
        this._onDidChangeStorage.fire({ scope, key });
        return Promise.resolve();
    }
    remove(key, scope) {
        const wasDeleted = this.getCache(scope).delete(key);
        if (!wasDeleted) {
            return Promise.resolve(); // Return early if value already deleted
        }
        // Events
        this._onDidChangeStorage.fire({ scope, key });
        return Promise.resolve();
    }
};
InMemoryStorageService = __decorate([
    inversify_1.injectable()
], InMemoryStorageService);
exports.InMemoryStorageService = InMemoryStorageService;
//# sourceMappingURL=inmemory-storage-service.js.map
import { IStorage, IStorageService, StorageScope, IWorkspaceStorageChangeEvent } from '../../interfaces';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
export declare class StorageService extends Disposable implements IStorageService {
    private _onDidChangeStorage;
    get onDidChangeStorage(): Event<IWorkspaceStorageChangeEvent>;
    private static COMMON_PREFIX;
    private static GLOBAL_PREFIX;
    private static WORKSPACE_PREFIX;
    private static WORKSPACE_IDENTIFIER;
    private static NO_WORKSPACE_IDENTIFIER;
    private workspaceStorage;
    private globalStorage;
    private workspaceKey;
    constructor(globalStorage: IStorage, workspaceStorage: IStorage, workspaceId?: string, legacyWorkspaceId?: number);
    private getWorkspaceKey;
    private cleanupWorkspaceScope;
    clear(): void;
    store(key: string, value: any, scope?: StorageScope): void;
    get(key: string, scope?: StorageScope, defaultValue?: any): string;
    remove(key: string, scope?: StorageScope): void;
    swap(key: string, valueA: any, valueB: any, scope?: StorageScope, defaultValue?: any): void;
    getInteger(key: string, scope?: StorageScope, defaultValue?: number): number;
    getBoolean(key: string, scope?: StorageScope, defaultValue?: boolean): boolean;
    private toStorageKey;
}

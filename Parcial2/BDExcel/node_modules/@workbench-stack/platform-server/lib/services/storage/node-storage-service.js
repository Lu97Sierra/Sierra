"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeStorageService = void 0;
const path = require("path");
const fs = require("fs");
const core_1 = require("@workbench-stack/core");
const inversify_1 = require("inversify");
let NodeStorageService = class NodeStorageService {
    constructor(environmentService) {
        this.environmentService = environmentService;
        this.database = null;
        this.dbPath = path.join(environmentService.userDataPath, 'storage.json');
    }
    getItem(key, defaultValue) {
        if (!this.database) {
            this.database = this.load();
        }
        const res = this.database[key];
        if (typeof res === 'undefined') {
            return defaultValue;
        }
        return this.database[key];
    }
    setItem(key, data) {
        if (!this.database) {
            this.database = this.load();
        }
        // Shortcut for primitives that did not change
        if (typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {
            if (this.database[key] === data) {
                return;
            }
        }
        this.database[key] = data;
        this.save();
    }
    removeItem(key) {
        if (!this.database) {
            this.database = this.load();
        }
        if (this.database[key]) {
            delete this.database[key];
            this.save();
        }
    }
    load() {
        try {
            return JSON.parse(fs.readFileSync(this.dbPath).toString()); // invalid JSON or permission issue can happen here
        }
        catch (error) {
            if (this.environmentService.verbose) {
                console.error(error);
            }
            return {};
        }
    }
    save() {
        try {
            fs.writeFileSync(this.dbPath, JSON.stringify(this.database, null, 4)); // permission issue can happen here
        }
        catch (error) {
            if (this.environmentService.verbose) {
                console.error(error);
            }
        }
    }
};
NodeStorageService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(core_1.TYPES.IEnvironmentService)),
    __metadata("design:paramtypes", [Object])
], NodeStorageService);
exports.NodeStorageService = NodeStorageService;
//# sourceMappingURL=node-storage-service.js.map
// import { inject, injectable } from 'inversify';
// import { IWindowsService, ClientTypes, IOpenConfiguration } from '@workbench-stack/core';
// import { CommonType } from '@common-stack/core';
// export class WindowsManager implements IWindowsService {
//     private static readonly windowsStateStorageKey = 'windowsState';
//     constructor(
//         private readonly machineId: string,
//         @inject(ClientTypes.IEnvironmentService)
//         private readonly environmentService: IEnvironment,
//         @inject(ClientTypes.ILifecycleService)
//         private readonly lifecycleService: ILifecycleService,
//     ){
//     }
//     public open(openConfig: IOpenConfiguration): ICodeWindow[] {
//         this.log.trace('windowsManager#open');
//         openConfig = this.validateOpenConfig(openConfig);
//         const pathsToOpen = this.getPathsToOpen(openConfig);
//         const foldersToAdd: IFolderPathToOpen[] = [];
//         const foldersToOpen: IFolderPathToOpen[] = [];
//         const workspacesToOpen: IWorkspacePathToOpen[] = [];
//         const emptyToRestore: IemptyWindowBackupInfo[] = []; // empty windows with backupPath
//         let emptyToOpen: number = 0;
//         let fileINputs: IFileInputs | undefined; // collect all file inputs
//         for (const path of pathsToOpen) {
//             if (isFolderPathToOpen(path)) {
//                 if (openConfig.addMode) {
//                 }
//             }
//         }
//     }
// }
//# sourceMappingURL=windows-manager.js.map
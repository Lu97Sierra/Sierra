"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationFileService = void 0;
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
class ConfigurationFileService {
    constructor(fileService) {
        this.fileService = fileService;
        this.whenWatchingStarted = Promise.resolve();
        this.isWatching = true;
    }
    get onFileChanges() { return this.fileService.onFileChanges; }
    whenProviderRegistered(scheme) {
        if (this.fileService.canHandleResource(uri_1.URI.from({ scheme }))) {
            return Promise.resolve();
        }
        return new Promise((c, e) => {
            const disposable = this.fileService.onDidChangeFileSystemProviderRegistrations(e => {
                if (e.scheme === scheme && e.added) {
                    disposable.dispose();
                    c();
                }
            });
        });
    }
    watch(resource) {
        return this.fileService.watch(resource, { excludes: [], recursive: false }); // @sri modify at IFileService
    }
    exists(resource) {
        return this.fileService.exists(resource);
    }
    readFile(resource) {
        return this.fileService.readFile(resource).then(content => {
            return content.value.toString();
        });
    }
}
exports.ConfigurationFileService = ConfigurationFileService;
//# sourceMappingURL=file-service-based-configuration-file-service.js.map
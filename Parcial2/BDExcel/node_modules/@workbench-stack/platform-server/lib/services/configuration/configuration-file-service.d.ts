import { IConfigurationFileService } from '../../interfaces';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { FileChangesEvent, IFileService } from '@files-stack/core';
import { Disposable, IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
export declare class ConfigurationFileService extends Disposable implements IConfigurationFileService {
    private _fileServiceBasedConfigurationFileService;
    private _fileServiceBasedConfigurationFileServiceCallback;
    private _whenFileServiceBasedConfigurationFileServiceAvailable;
    private _watchResources;
    readonly whenWatchingStarted: Promise<void>;
    private readonly _onFileChanges;
    readonly onFileChanges: Event<FileChangesEvent>;
    get isWatching(): boolean;
    watch(resource: URI): IDisposable;
    whenProviderRegistered(scheme: string): Promise<void>;
    exists(resource: URI): Promise<boolean>;
    readFile(resource: URI): Promise<string>;
    private _fileService;
    get fileService(): IFileService | null;
    set fileService(fileService: IFileService | null);
}

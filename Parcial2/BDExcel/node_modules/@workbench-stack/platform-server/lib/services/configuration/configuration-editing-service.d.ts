import { IWorkspaceContextService, IConfigurationService } from '@workbench-stack/core';
import { IFileService, INodeTextFileService } from '@files-stack/core';
import { IEnvironmentService } from '@workbench-stack/core';
import { IConfigurationValue, IConfigurationEditingOptions, EditableConfigurationTarget } from '../../interfaces';
import { INotificationService } from '@workbench-stack/core';
export declare class ConfigurationEditingService {
    private configurationService;
    private contextService;
    private environmentService;
    private fileService;
    private textFileService;
    private notificationService;
    private queue;
    private remoteSettingsResource;
    constructor(configurationService: IConfigurationService, contextService: IWorkspaceContextService, environmentService: IEnvironmentService, fileService: IFileService, textFileService: INodeTextFileService, notificationService: INotificationService);
    writeConfiguration(target: EditableConfigurationTarget, value: IConfigurationValue, options?: IConfigurationEditingOptions): Promise<void>;
    private doWriteConfiguration;
    private writeToBuffer;
    private applyEditsToBuffer;
    private onError;
    private onInvalidConfigurationError;
    private onConfigurationFileDirtyError;
    private openSettings;
    private openFile;
    private wrapError;
    private toErrorMessage;
    private stringifyTarget;
    private getEdits;
    private resolveModelReference;
    private hasParseErrors;
    private resolveAndValidate;
    private getConfigurationEditOperation;
    private isWorkspaceConfigurationResource;
    private getConfigurationFileResource;
}

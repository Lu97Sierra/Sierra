import { IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IConfigurationData, IConfigurationOverrides, ConfigurationTarget, IConfigurationChangeEvent } from '@workbench-stack/core';
import { IEnvironmentService } from '@workbench-stack/core';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Configuration } from '@workbench-stack/core';
import { IWorkspaceFolder, IConfigurationService, Disposable } from '@workbench-stack/core';
/**
 * Initial configuration only contains a merge of usersConfiguration and default Configuration.
 * Later workspace configuration is merged.
 */
export declare class ConfigurationService extends Disposable implements IConfigurationService, IDisposable {
    private _configuration;
    private userConfiguration;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    constructor(environmentService: IEnvironmentService);
    get configuration(): Configuration;
    getConfigurationData(): IConfigurationData;
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    updateValue(key: string, value: any): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    inspect<T>(key: string): {
        default: T;
        user: T;
        workspace?: T;
        workspaceFolder?: T;
        value: T;
    };
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    reloadConfiguration(folder?: IWorkspaceFolder): Promise<void>;
    private onDidChangeUserConfiguration;
    private onDidDefaultConfigurationChange;
    private trigger;
    private getTargetConfiguration;
}

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestConfigurationService = void 0;
/* tslint:disable */
const map_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/map");
const core_1 = require("@workbench-stack/core");
const core_2 = require("@workbench-stack/core");
const helpers_1 = require("../../../core/configuration/helpers");
const inversify_1 = require("inversify");
let TestConfigurationService = class TestConfigurationService {
    constructor() {
        this.configuration = Object.create(null);
        this.configurationByRoot = map_1.TernarySearchTree.forPaths();
    }
    reloadConfiguration() {
        return Promise.resolve(this.getValue());
    }
    getValue(arg1, arg2) {
        let configuration;
        const overrides = core_1.isConfigurationOverrides(arg1) ? arg1 : core_1.isConfigurationOverrides(arg2) ? arg2 : void 0;
        if (overrides) {
            if (overrides.resource) {
                configuration = this.configurationByRoot.findSubstr(overrides.resource.fsPath);
            }
        }
        configuration = configuration ? configuration : this.configuration;
        if (arg1 && typeof arg1 === 'string') {
            return core_2.getConfigurationValue(configuration, arg1);
        }
        return configuration;
    }
    updateValue(key, overrides) {
        return Promise.resolve(null);
    }
    setUserConfiguration(key, value, root) {
        if (root) {
            const configForRoot = this.configurationByRoot.get(root.fsPath) || Object.create(null);
            configForRoot[key] = value;
            this.configurationByRoot.set(root.fsPath, configForRoot);
        }
        else {
            this.configuration[key] = value;
        }
        return Promise.resolve(null);
    }
    onDidChangeConfiguration() {
        return { dispose() { } };
    }
    inspect(key, overrides) {
        const config = this.getValue(undefined, overrides);
        return {
            value: core_2.getConfigurationValue(config, key),
            default: core_2.getConfigurationValue(config, key),
            user: core_2.getConfigurationValue(config, key),
            workspace: null,
            workspaceFolder: null
        };
    }
    keys() {
        return {
            default: helpers_1.getConfigurationKeys(),
            user: Object.keys(this.configuration),
            workspace: [],
            workspaceFolder: []
        };
    }
    getConfigurationData() {
        return null;
    }
    dispose() { }
};
TestConfigurationService = __decorate([
    inversify_1.injectable()
], TestConfigurationService);
exports.TestConfigurationService = TestConfigurationService;
//# sourceMappingURL=test-configuration-service.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonConfig = exports.preferences = void 0;
exports.preferences = {
    'files.trimTrailingWhitespace': {
        type: 'boolean',
        default: false,
        description: 'When enabled, will trim trailing whitespace when saving a file.',
        overridable: true,
        settings: 'both',
    },
    'files.autoSave': {
        type: 'string',
        enum: [
            'off',
            'afterDelay',
            'onFocusChange',
            'onWindowChange',
        ],
        enumDescriptions: [
            'A dirty file is never automatically saved.',
            'A dirty file is automatically saved after the configured \'files.autoSaveDelay\'.',
            'A dirty file is automatically saved when the editor loses focus.',
            'A dirty file is automatically saved when the window loses focus.',
        ],
        default: 'off',
        description: 'Controls auto save of dirty files. Accepted values:  \'off\', ' +
            '\'afterDelay\', \'onFocusChange\' (editor loses focus), \'onWindowChange\' ' +
            '(window loses focus). If set to \'afterDelay\', you can configure the delay ' +
            'in \'files.autoSaveDelay\'.',
        settings: 'both',
    },
    'files.exclude': {
        type: 'object',
        description: 'Configure glob patterns for excluding files and folders. For example, the files explorer' +
            'decides which files and folders to show or hide based on this setting.',
        default: { '**/.git': true, '**/.svn': true, '**/.hg': true, '**/CVS': true, '**/.DS_Store': true },
        'additionalProperties': {
            'anyOf': [
                {
                    'type': 'boolean',
                    'description': 'The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.',
                },
                {
                    'type': 'object',
                    'properties': {
                        'when': {
                            'type': 'string',
                            'pattern': '\\w*\\$\\(basename\\)\\w*',
                            'default': '$(basename).ext',
                            'description': 'Additional check on the siblings of a matching file. ' +
                                'Use $(basename) as variable for the matching file name.',
                        },
                    },
                },
            ],
        },
    },
    'files.associations': {
        type: 'object',
        description: 'Configure file associations to languages (e.g. \"*.extension\": \"html\"). ' +
            'These have precedence over the default associations of the languages installed.',
        default: {},
    },
    'files.encoding': {
        type: 'string',
        overridable: true,
        enum: ['utf8'],
        default: 'utf8',
        description: 'The default character set encoding to use when reading and writing files. ' +
            'This setting can be configured per language too.',
        enumDescriptions: ['utf8'],
    },
    'files.autoGuessEncoding': {
        type: 'boolean',
        overridable: true,
        default: false,
        description: 'When enabled, will attempt to guess the character set encoding when opening files.' +
            ' This setting can be configured per language too.',
    },
    'files.eol': {
        type: 'string',
        enum: [
            '\n',
            '\r\n',
        ],
        default: `\n`,
        description: 'The default end of line character. Use \\n for LF and \\r\\n for CRLF.',
    },
    'files.insertFinalNewline': {
        type: 'boolean',
        default: false,
        description: 'When enabled, insert a final new line at the end of the file when saving it.',
        overridable: true,
    },
    'files.autoSaveDelay': {
        type: 'number',
        default: 1000,
        description: 'This is the description for a setting. Values surrounded by single quotes are not to be translated.',
    },
    'files.watcherExclude': {
        type: 'object',
        default: {
            '**/.git/**': true,
            '**/node_modules/**': true,
        },
        description: 'Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths ' +
            '(i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. ' +
            'When you experience ' +
            'Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.',
    },
    'files.hotExit': {
        type: 'string',
        enum: ['off', 'onExit', 'onExitAndWindowClose'],
        default: 'onExit',
        enumDescriptions: [
            'Disable hot exit.',
            'Hot exit will be triggered when the application is closed, that is when the last window ' +
                'is closed on Windows/Linux or when the workbench.action.quit command is triggered (command ' +
                'palette, keybinding, menu). All windows with backups will be restored upon next launch.',
            'Hot exit will be triggered when the application is closed, that is when the last window ' +
                'is closed on Windows/Linux or when the workbench.action.quit command is triggered (command ' +
                'palette, keybinding, menu), and also for any window with a folder opened regardless of ' +
                'whether it\'s the last window. All windows without folders opened will be restored upon next ' +
                'launch. To restore folder windows as they were before shutdown set "window.restoreWindows" to "all".',
        ],
        description: 'Controls whether unsaved files are remembered between sessions, allowing ' +
            'the save prompt when exiting the editor to be skipped.',
    },
    'files.useExperimentalFileWatcher': {
        type: 'boolean',
        default: false,
        description: 'Use the new experimental file watcher.',
    },
    'files.defaultLanguage': {
        type: 'string',
        default: ' ',
        description: 'The default language mode that is assigned to new files.',
    },
};
exports.jsonConfig = "{\"search\":{\"exclude\":{\"**/node_modules\":true,\"**/bower_components\":true},\"location\":\"sidebar\",\"smartCase\":false,\"useRipgrep\":true,\"useIgnoreFiles\":true,\"followSymlinks\":true,\"globalFindClipboard\":false,\"quickOpen\":{\"includeSymbols\":false}},\"files\":{\"eol\":\"\\n\",\"exclude\":{\"**/\":{\"hg\":true,\"git\":true,\"svn\":true,\"DS_Store\":true},\"**/CVS\":true},\"hotExit\":\"onExit\",\"encoding\":\"utf8\",\"autoSave\":\"off\",\"associations\":{},\"autoSaveDelay\":1000,\"watcherExclude\":{\"**/\":{\"git/**\":true},\"**/node_modules/**\":true},\"defaultLanguage\":\" \",\"autoGuessEncoding\":false,\"insertFinalNewline\":false,\"trimTrailingWhitespace\":false,\"useExperimentalFileWatcher\":false},\"terminal\":{\"integrated\":{\"shell\":{\"linux\":\"sh\"},\"shellArgs\":{\"osx\":[\"-l\"],\"linux\":[]},\"setLocaleVariables\":false}}}";
//# sourceMappingURL=sample-preference.js.map
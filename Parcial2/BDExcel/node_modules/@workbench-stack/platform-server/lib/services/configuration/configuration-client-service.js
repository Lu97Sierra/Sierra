"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ConfigurationClientService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationClientService = void 0;
const inversify_1 = require("inversify");
const moleculer_1 = require("moleculer");
const core = require("@workbench-stack/core");
const core_1 = require("@workbench-stack/core");
const ILogger = require("bunyan");
const core_2 = require("@common-stack/core");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
let ConfigurationClientService = ConfigurationClientService_1 = class ConfigurationClientService extends core_1.AbstractWorkspaceConfigurationClientService {
    constructor(lifecycleService, logger, broker) {
        super(logger);
        this.lifecycleService = lifecycleService;
        this.broker = broker;
        this.topic = "ConfigurationService" /* ConfigurationService */;
        this.logger = logger.child({ className: ConfigurationClientService_1 });
        this.startupBarrier = new async_1.Barrier();
    }
    // @postConstruct()
    extInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.broker.waitForServices("WorkspaceReady" /* WorkspaceReady */);
            if (!this.startupBarrier.isOpen()) {
                this.startupBarrier.open();
            }
            console.log('CONFIGURATION CLIENT AVAILABLE STATE RESOLVED', this.configuration);
            if (!this.configuration) {
                console.log('CONFIGURATION CLIENT READY STATE RESOLVED');
                yield this.asyncInitializedConfigurationContainer();
            }
        });
    }
    updateValue(key, value, arg3, arg4, donotNotifyError) {
        return this.callAction("updateValue" /* updateValue */, { key, value, arg3, arg4, donotNotifyError });
    }
    asyncInitializedConfigurationContainer(opts = { meta: { $cache: true } }) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info('Configuration Data is requested');
            const data = yield this.callAction("getConfigurationData" /* getConfigurationData */, {}, opts);
            console.log('---Data received', data);
            this.configuration = ConfigurationClientService_1.parse(data);
            console.log('---async loading finished');
        });
    }
    reloadConfiguration(folder) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.callAction("reloadConfiguration" /* reloadConfiguration */, { folder });
            console.log('reload configuration done');
            yield this.asyncInitializedConfigurationContainer({ meta: { $cache: false } });
        });
    }
    callAction(command, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.startupBarrier.wait().then(() => {
                return this.broker.call(`${this.topic}.${command}`, params, opts);
            });
        });
    }
};
ConfigurationClientService = ConfigurationClientService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(core.ClientTypes.ILifecycleService)),
    __param(1, inversify_1.inject(core_2.CommonType.LOGGER)),
    __param(2, inversify_1.inject(core_2.CommonType.MOLECULER_BROKER)),
    __metadata("design:paramtypes", [Object, ILogger,
        moleculer_1.ServiceBroker])
], ConfigurationClientService);
exports.ConfigurationClientService = ConfigurationClientService;
//# sourceMappingURL=configuration-client-service.js.map
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationService = void 0;
/* tslint:disable */
const inversify_1 = require("inversify");
const registry_1 = require("../../core/registry");
const core_1 = require("@workbench-stack/core");
const models_1 = require("../../core/configuration/models");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const configurations_1 = require("../../core/configuration/configurations");
const core_2 = require("@workbench-stack/core");
const core_3 = require("@workbench-stack/core");
/**
 * Initial configuration only contains a merge of usersConfiguration and default Configuration.
 * Later workspace configuration is merged.
 */
let ConfigurationService = class ConfigurationService extends core_3.Disposable {
    constructor(environmentService) {
        super();
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this.userConfiguration = this._register(new configurations_1.NodeBasedUserConfiguration(environmentService.appSettingsPath));
        // Initialize
        const defaults = new models_1.DefaultConfigurationModel();
        const user = this.userConfiguration.initializeSync();
        this._configuration = new core_2.Configuration(defaults, user);
        // Listeners
        this._register(this.userConfiguration.onDidChangeConfiguration(userConfigurationModel => this.onDidChangeUserConfiguration(userConfigurationModel)));
        this._register(registry_1.Registry.Instance.as(core_3.Extensions.Configuration).onDidUpdateConfiguration(configurationProperties => this.onDidDefaultConfigurationChange(configurationProperties)));
    }
    get configuration() {
        return this._configuration;
    }
    getConfigurationData() {
        return this.configuration.toData();
    }
    getValue(arg1, arg2) {
        const section = typeof arg1 === 'string' ? arg1 : undefined;
        const overrides = core_1.isConfigurationOverrides(arg1) ? arg1 : core_1.isConfigurationOverrides(arg2) ? arg2 : {};
        return this.configuration.getValue(section, overrides, undefined);
    }
    updateValue(key, value, arg3, arg4) {
        return Promise.reject(new Error('not supported'));
    }
    inspect(key) {
        return this.configuration.inspect(key, {}, undefined);
    }
    keys() {
        return this.configuration.keys(undefined);
    }
    reloadConfiguration(folder) {
        return folder ? Promise.resolve(undefined) :
            this.userConfiguration.reload().then(userConfigurationModel => this.onDidChangeUserConfiguration(userConfigurationModel));
    }
    onDidChangeUserConfiguration(userConfigurationModel) {
        const { added, updated, removed } = core_1.compare(this._configuration.localUserConfiguration, userConfigurationModel);
        const changedKeys = [...added, ...updated, ...removed];
        if (changedKeys.length) {
            this._configuration.updateLocalUserConfiguration(userConfigurationModel);
            this.trigger(changedKeys, 1 /* USER */);
        }
    }
    onDidDefaultConfigurationChange(keys) {
        this._configuration.updateDefaultConfiguration(new models_1.DefaultConfigurationModel());
        this.trigger(keys, 6 /* DEFAULT */);
    }
    trigger(keys, source) {
        this._onDidChangeConfiguration.fire(new core_2.ConfigurationChangeEvent().change(keys).telemetryData(source, this.getTargetConfiguration(source)));
    }
    getTargetConfiguration(target) {
        switch (target) {
            case 6 /* DEFAULT */:
                return this._configuration.defaults.contents;
            case 1 /* USER */:
                return this._configuration.localUserConfiguration.contents;
        }
        return {};
    }
};
ConfigurationService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(core_1.TYPES.IEnvironmentService)),
    __metadata("design:paramtypes", [Object])
], ConfigurationService);
exports.ConfigurationService = ConfigurationService;
//# sourceMappingURL=configuration-service.js.map
import { ServiceBroker } from 'moleculer';
import { IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import * as core from '@workbench-stack/core';
import { AbstractWorkspaceConfigurationClientService, IConfigurationOverrides, ConfigurationTarget } from '@workbench-stack/core';
import * as ILogger from 'bunyan';
export declare class ConfigurationClientService extends AbstractWorkspaceConfigurationClientService implements core.IClientConfigurationService, IDisposable {
    private lifecycleService;
    broker: ServiceBroker;
    private topic;
    protected logger: ILogger;
    private startupBarrier;
    constructor(lifecycleService: core.ILifecycleService, logger: ILogger, broker: ServiceBroker);
    extInitialize(): Promise<void>;
    updateValue(key: string, value: any): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;
    private asyncInitializedConfigurationContainer;
    reloadConfiguration(folder?: core.IWorkspaceFolder): Promise<void>;
    private callAction;
}

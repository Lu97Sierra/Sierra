"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloService = void 0;
const Logger = require("bunyan");
const apollo_link_1 = require("apollo-link");
const apollo_client_1 = require("apollo-client");
const apollo_cache_inmemory_1 = require("apollo-cache-inmemory");
const inversify_1 = require("inversify");
const core_1 = require("@workbench-stack/core");
const constants_1 = require("../constants");
let ApolloService = class ApolloService {
    constructor(logger, links) {
        this._logger = logger.child({
            className: ApolloService,
        });
        this._client = new apollo_client_1.ApolloClient({
            cache: new apollo_cache_inmemory_1.InMemoryCache({
                dataIdFromObject: (result) => core_1.dataIdFromObject[result.__typename] || result.id || result._id || result.__typename,
            }),
            link: apollo_link_1.ApolloLink.from(links),
        });
    }
};
ApolloService = __decorate([
    __param(0, inversify_1.inject('Logger')),
    __param(1, inversify_1.multiInject(constants_1.Types.IApolloLink)), __param(1, inversify_1.optional()),
    __metadata("design:paramtypes", [Logger, Array])
], ApolloService);
exports.ApolloService = ApolloService;
//# sourceMappingURL=apollo-service.js.map
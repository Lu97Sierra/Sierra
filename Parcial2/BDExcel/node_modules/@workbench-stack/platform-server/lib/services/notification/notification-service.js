"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const core_1 = require("@workbench-stack/core");
const inversify_1 = require("inversify");
const apollo_client_1 = require("apollo-client");
function messageConversion(message) {
    if (typeof message === 'string') {
        return { value: message };
    }
    if (message.value) {
        return message;
    }
    return {
        value: message.message,
        raw: `Error ${message.name}: ${message.message}`,
    };
}
let NotificationService = class NotificationService {
    constructor(apollo) {
        this.apollo = apollo;
    }
    info(message) {
        if (Array.isArray(message)) {
            message.forEach(m => this.info(m));
        }
        this.notify({ severity: core_1.NotificationSeverity.Info, message });
    }
    warn(message) {
        if (Array.isArray(message)) {
            message.forEach(m => this.warn(m));
        }
        this.notify({ severity: core_1.NotificationSeverity.Warning, message });
    }
    error(message) {
        if (Array.isArray(message)) {
            message.forEach(m => this.error(m));
        }
        this.notify({ severity: core_1.NotificationSeverity.Error, message });
    }
    // TODO: need to update the return.
    notify(notification) {
        const { message } = notification, rest = __rest(notification, ["message"]);
        const messageInput = messageConversion(notification.message);
        return this._notify(Object.assign(Object.assign({}, rest), { message: messageInput }));
    }
    _notify(notification) {
        this.apollo.mutate({
            mutation: core_1.AddServerNotificationDocument,
            variables: {
                notification: Object.assign(Object.assign({}, notification), { sticky: true, actions: null }),
            },
        });
        return null;
    }
    prompt(severity, message, choices, options) {
        this.apollo.mutate({
            mutation: core_1.NotifyPromptDocument,
            variables: {
                severity,
                message,
                choices,
                options,
            },
        });
        return null;
    }
};
NotificationService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject('ApolloClient')),
    __metadata("design:paramtypes", [apollo_client_1.ApolloClient])
], NotificationService);
exports.NotificationService = NotificationService;
//# sourceMappingURL=notification-service.js.map
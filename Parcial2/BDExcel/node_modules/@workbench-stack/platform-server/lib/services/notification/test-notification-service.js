"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TestNotificationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestNotificationService = void 0;
const core_1 = require("@workbench-stack/core");
const helpers_1 = require("./helpers");
const inversify_1 = require("inversify");
let TestNotificationService = TestNotificationService_1 = class TestNotificationService /** implements INotificationService */ {
    info(message) {
        return this.notify({ severity: core_1.NotificationSeverity.Info, message });
    }
    warn(message) {
        return this.notify({ severity: core_1.NotificationSeverity.Warning, message });
    }
    error(error) {
        return this.notify({ severity: core_1.NotificationSeverity.Error, message: error });
    }
    notify(notification) {
        return TestNotificationService_1.NO_OP;
    }
    prompt(severity, message, choices, options) {
        return TestNotificationService_1.NO_OP;
    }
};
TestNotificationService.NO_OP = new helpers_1.NoOpNotification();
TestNotificationService = TestNotificationService_1 = __decorate([
    inversify_1.injectable()
], TestNotificationService);
exports.TestNotificationService = TestNotificationService;
//# sourceMappingURL=test-notification-service.js.map
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleClientService = void 0;
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
const inversify_1 = require("inversify");
const client_core_1 = require("@common-stack/client-core");
let LifecycleClientService = class LifecycleClientService {
    constructor(logService) {
        this.logService = logService;
        this._phase = 1 /* Starting */;
        this.phaseWhen = new Map();
        this._onBeforeShutdown = new event_1.Emitter();
        this._onWillShutdown = new event_1.Emitter();
        this._onShutdown = new event_1.Emitter();
    }
    get phase() {
        return this._phase;
    }
    set phase(value) {
        if (value < this.phase) {
            throw new Error('Lifecycle cannot go backwards');
        }
        if (this._phase === value) {
            return;
        }
        this.logService.trace(`lifecycle: phase changed (value: ${value})`);
        this._phase = value;
        // mark(`LifecyclePhase/${LifecyclePhaseToString(value)}`);
        const barrier = this.phaseWhen.get(this._phase);
        if (barrier) {
            barrier.open();
            this.phaseWhen.delete(this._phase);
        }
    }
    fireShutdown(reason = 2 /* QUIT */) {
        this._onWillShutdown.fire({
            join: () => { },
            reason,
        });
    }
    fireWillShutdown(event) {
        this._onBeforeShutdown.fire(event);
    }
    get onBeforeShutdown() {
        return this._onBeforeShutdown.event;
    }
    get onWillShutdown() {
        return this._onWillShutdown.event;
    }
    get onShutdown() {
        return this._onShutdown.event;
    }
    when(phase) {
        return __awaiter(this, void 0, void 0, function* () {
            if (phase <= this._phase) {
                return;
            }
            let barrier = this.phaseWhen.get(phase);
            if (!barrier) {
                barrier = new async_1.Barrier();
                this.phaseWhen.set(phase, barrier);
            }
            yield barrier.wait();
        });
    }
};
LifecycleClientService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(client_core_1.ClientTypes.Logger)),
    __metadata("design:paramtypes", [Object])
], LifecycleClientService);
exports.LifecycleClientService = LifecycleClientService;
//# sourceMappingURL=lifecycle-client-service.js.map
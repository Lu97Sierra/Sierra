import * as Logger from 'bunyan';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { INotificationService } from '@workbench-stack/core';
import { ILifecycleService, BeforeShutdownEvent, StartupKind, LifecyclePhase, WillShutdownEvent, IStorageService } from '../../interfaces';
export declare class LifecycleService implements ILifecycleService {
    private readonly notificationService;
    private readonly storageService;
    private static readonly LAST_SHUTDOWN_REASON_KEY;
    private logService;
    private ipc;
    private phaseWhen;
    private readonly _onBeforeShutdown;
    get onBeforeShutdown(): Event<BeforeShutdownEvent>;
    private readonly _onWillShutdown;
    get onWillShutdown(): Event<WillShutdownEvent>;
    private readonly _onShutdown;
    get onShutdown(): Event<void>;
    private readonly _startupKind;
    get startupKind(): StartupKind;
    private _phase;
    get phase(): LifecyclePhase;
    private shutdownReason;
    constructor(notificationService: INotificationService, storageService: IStorageService, logService: Logger);
    private resolveStartupKind;
    private registerListeners;
    fireWillShutdown(event: WillShutdownEvent): void;
    private handleBeforeShutdown;
    private handleWillShutdown;
    set phase(value: LifecyclePhase);
    when(phase: LifecyclePhase): Promise<any>;
}

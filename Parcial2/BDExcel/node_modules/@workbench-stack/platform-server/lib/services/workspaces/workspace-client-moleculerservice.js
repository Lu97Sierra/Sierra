"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceClientMoleculerService = void 0;
const moleculer_1 = require("moleculer");
const core_1 = require("@workbench-stack/core");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
class WorkspaceClientMoleculerService extends moleculer_1.Service {
    constructor(broker, { container, settings }) {
        super(broker);
        this.container = container;
        this.startupBarrier = new async_1.Barrier();
        this.parseServiceSchema({
            name: "WorkspaceClientContextService" /* WorkspaceClientContextService */,
            dependencies: [
                { name: "WorkspaceContextService" /* WorkspaceContextService */ },
            ],
            started: () => __awaiter(this, void 0, void 0, function* () {
                const lifecycle = this.container.get(core_1.TYPES.ILifecycleService);
                lifecycle.when(2 /* Ready */).then(() => {
                    console.log('---OPENING WORKSPACE CLIENT BARRIER ');
                    this.startupBarrier.open();
                });
            }),
            events: {
                ["onDidChangeWorkbenchState" /* onDidChangeWorkbenchState */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        (yield this.workspaceContextService).extAcceptChangedWorkbenchState(ctx.params.data, ctx.params.event);
                    }),
                },
                ["onDidChangeWorkspaceFolders" /* onDidChangeWorkspaceFolders */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        console.log('---EVENT', ctx.params.event);
                        (yield this.workspaceContextService).extAcceptChangedWorkspaceFolders(ctx.params.data, ctx.params.event);
                    }),
                },
                ["onDidChangeWorkspaceName" /* onDidChangeWorkspaceName */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        (yield this.workspaceContextService).extAcceptChangedWorkspaceName(ctx.params.data);
                    }),
                },
            },
            stopped: () => __awaiter(this, void 0, void 0, function* () {
                if (!this.startupBarrier.isOpen()) {
                    this.startupBarrier.open();
                    return (yield this.workspaceContextService).dispose();
                }
                return (yield this.workspaceContextService).dispose();
            }),
        });
    }
    get workspaceContextService() {
        if (this._workspaceContextService) {
            return this._workspaceContextService;
        }
        return this.startupBarrier.wait().then(() => {
            return this._workspaceContextService = this.container.get(core_1.TYPES.IWorkspaceContextService);
        });
    }
}
exports.WorkspaceClientMoleculerService = WorkspaceClientMoleculerService;
//# sourceMappingURL=workspace-client-moleculerservice.js.map
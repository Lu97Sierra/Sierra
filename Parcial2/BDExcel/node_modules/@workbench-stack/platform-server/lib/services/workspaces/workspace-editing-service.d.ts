import { IWorkspaceEditingService, ILifecycleService, IWorkspaceFolderCreationData, IWorkspaceIdentifier, INotificationService, IJSONEditingService, IWorkbenchEnvironmentService, IConfigurationService, IExtensionService, IWorkspacesService } from '@workbench-stack/core';
import { WorkspaceService } from './workspace-service';
import { ITextFileService, IFileService } from '@files-stack/core';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { IStorageService, IRegistry } from '../../interfaces';
export declare class WorkspaceEditingService implements IWorkspaceEditingService {
    private readonly jsonEditingService;
    private readonly contextService;
    private readonly configurationService;
    private readonly storageService;
    private readonly fileService;
    private readonly textFileService;
    private readonly extensionService;
    private readonly workspaceService;
    private readonly notificationService;
    private readonly environmentService;
    readonly lifecycleService: ILifecycleService;
    readonly registry: IRegistry;
    constructor(jsonEditingService: IJSONEditingService, contextService: WorkspaceService, configurationService: IConfigurationService, storageService: IStorageService, fileService: IFileService, textFileService: ITextFileService, extensionService: IExtensionService, workspaceService: IWorkspacesService, notificationService: INotificationService, environmentService: IWorkbenchEnvironmentService, lifecycleService: ILifecycleService, registry: IRegistry);
    updateFolders(index: number, deleteCount?: number, foldersToAdd?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doUpdateFolders;
    addFolders(foldersToAdd: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doAddFolders;
    removeFolders(foldersToRemove: URI[], donotNotifyError?: boolean): Promise<void>;
    private includesSingleFolderWorkspace;
    createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void>;
    saveAndEnterWorkspace(path: URI): Promise<void>;
    isValidTargetWorkspacePath(path: URI): Promise<boolean>;
    private saveWorkspaceAs;
    private handleWorkspaceConfigurationEditingError;
    private onInvalidWorkspaceConfigurationFileError;
    private onWorkspaceConfigurationFileDirtyError;
    private askToOpenWorkspaceConfigurationFile;
    enterWorkspace(path: URI): Promise<void>;
    private migrateWorkspaceSettings;
    copyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void>;
    private doCopyWorkspaceSettings;
    private getCurrentWorkspaceIdentifier;
}

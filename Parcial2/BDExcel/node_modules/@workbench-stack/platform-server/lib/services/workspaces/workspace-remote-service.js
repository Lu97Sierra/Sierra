"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceRemoteService = void 0;
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const core = require("@workbench-stack/core");
const core_1 = require("@workbench-stack/core");
const inversify_1 = require("inversify");
const apollo_client_1 = require("apollo-client");
const client_core_1 = require("@common-stack/client-core");
const core_2 = require("@workbench-stack/core");
const resources_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
let WorkspaceRemoteService = class WorkspaceRemoteService extends lifecycle_1.Disposable {
    constructor(lifecycleService, apollo, utility) {
        super();
        this.lifecycleService = lifecycleService;
        this.apollo = apollo;
        this.utility = utility;
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this._onDidChangeWorkspaceFolders = this._register(new event_1.Emitter());
        this.onDidChangeWorkspaceFolders = this._onDidChangeWorkspaceFolders.event;
        this._onDidChangeWorkspaceName = this._register(new event_1.Emitter());
        this.onDidChangeWorkspaceName = this._onDidChangeWorkspaceName.event;
        this._onDidChangeWorkbenchState = this._register(new event_1.Emitter());
        this.onDidChangeWorkbenchState = this._onDidChangeWorkbenchState.event;
    }
    asyncInitializedWorkspaceContainer() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('---called asynInitialized');
            // await this.lifecycleService.when(core.LifecyclePhase.Ready);
            const workspaceResult = yield this.apollo.query({
                query: core_1.GetWorkspace_WSDocument,
            });
            this.workspace = workspaceResult.data.getWorkspace;
            yield this.apollo.query({
                query: core.FinalConfiguration_WSDocument,
            });
            // this._configuration = configResult.data.viewerSettings;
        });
    }
    get configuration() {
        const id = this.utility.getCacheKey({ __typename: "Configuration" /* Configuration */ });
        const result = this.apollo.readFragment({
            fragment: core.FinalConfigurationFragmentDoc,
            fragmentName: 'FinalConfiguration',
            id,
        });
        return result;
    }
    initialize(arg) {
        throw new Error('Method not implemented.');
    }
    // Workspace Context Service Impl
    getCompleteWorkspace() {
        return Promise.resolve({
            folders: [],
        });
    }
    getWorkspace() {
        return this.workspace;
    }
    getWorkbenchState() {
        // Workspace has configuration file
        if (this.workspace.configuration) {
            return 3 /* WORKSPACE */;
        }
        // Folder has single root
        if (this.workspace.folders.length === 1) {
            return 2 /* FOLDER */;
        }
        // Empty
        return 1 /* EMPTY */;
    }
    getWorkspaceFolder(resource) {
        const id = this.utility.getCacheKey({ __typename: "WorkspaceFolderData" /* WorkspaceFolderData */ });
        const folder = this.apollo.readFragment({
            id,
            fragment: core.WorkspaceFolderFragmentDoc,
        });
        return folder;
    }
    addFolders(foldersToAdd, index) {
        return this.updateFolders(foldersToAdd, [], index);
    }
    removeFolders(foldersToRemove) {
        return this.updateFolders([], foldersToRemove);
    }
    updateFolders(foldersToAdd, foldersToRemove, index) {
        return Promise.reject('WorkspaceService-updateFolders not implemented');
    }
    isInsideWorkspace(resource) {
        return !!this.getWorkspaceFolder(resource);
    }
    isCurrentWorkspace(workspaceIdentifier) {
        switch (this.getWorkbenchState()) {
            case 2 /* FOLDER */:
                return core_2.isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && resources_1.isEqual(workspaceIdentifier, this.workspace.folders[0].uri);
            case 3 /* WORKSPACE */:
                return core_1.isWorkspaceIdentifier(workspaceIdentifier) && this.workspace.id === workspaceIdentifier.id;
        }
        return false;
    }
    // Workspace Configuration Service Impl
    getConfigurationData() {
        // return this.configuration.toData(); // configuratonData from queries
        return null;
    }
    getValue(arg1, arg2) {
        const section = typeof arg1 === 'string' ? arg1 : undefined;
        const overrides = core.isConfigurationOverrides(arg1) ? arg1 : core.isConfigurationOverrides(arg2) ? arg2 : {};
        // return this.configuration.getValue(section, overrides, undefined);
        return core.getConfigurationValue(this.configuration, section, overrides);
    }
    updateValue(key, value, arg3, arg4, donotNotifyError) {
        return Promise.reject('WorkspaceService-updateValue not implemented');
    }
    reloadConfiguration(folder, key) {
        return Promise.reject('WorkspaceRemoteService-reloadConfiguration: not implemented');
    }
    inspect(key, overrides) {
        // return this._configuration.inspect<T>(key, overrides);
        return null;
    }
    keys() {
        // return this._configuration.keys();
        return null;
    }
};
__decorate([
    inversify_1.postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], WorkspaceRemoteService.prototype, "asyncInitializedWorkspaceContainer", null);
WorkspaceRemoteService = __decorate([
    __param(0, inversify_1.inject(core.ClientTypes.ILifecycleService)),
    __param(1, inversify_1.inject(client_core_1.ClientTypes.ApolloClient)),
    __param(2, inversify_1.inject(client_core_1.ClientTypes.UtilityClass)),
    __metadata("design:paramtypes", [Object, apollo_client_1.ApolloClient, Object])
], WorkspaceRemoteService);
exports.WorkspaceRemoteService = WorkspaceRemoteService;
//# sourceMappingURL=workspace-remote-service.js.map
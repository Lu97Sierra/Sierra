import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceContextService } from '@workbench-stack/core';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { IWorkspaceFoldersChangeEvent, WorkbenchState, IWorkspaceFolder, IWorkspace as IWorkbenchWorkspace, IWorkspaceInitializationPayload } from '@workbench-stack/core';
export declare class TestContextService implements IWorkspaceContextService {
    private workspace;
    private options;
    private readonly _onDidChangeWorkspaceName;
    private readonly _onDidChangeWorkspaceFolders;
    private readonly _onDidChangeWorkbenchState;
    constructor(workspace?: any, options?: any);
    initialize(arg: IWorkspaceInitializationPayload): Promise<any>;
    getCompleteWorkspace(): Promise<IWorkbenchWorkspace>;
    addFolders(foldersToAdd: import("@workbench-stack/core").IWorkspaceFolderCreationData[], index?: number): Promise<void>;
    removeFolders(foldersToRemove: URI[]): Promise<void>;
    updateFolders(foldersToAdd: import("@workbench-stack/core").IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void>;
    dispose(): void;
    get onDidChangeWorkspaceName(): Event<void>;
    get onDidChangeWorkspaceFolders(): Event<IWorkspaceFoldersChangeEvent>;
    get onDidChangeWorkbenchState(): Event<WorkbenchState>;
    getFolders(): IWorkspaceFolder[];
    getWorkbenchState(): WorkbenchState;
    getWorkspace(): IWorkbenchWorkspace;
    getWorkspaceFolder(resource: URI): IWorkspaceFolder;
    setWorkspace(workspace: any): void;
    getOptions(): any;
    updateOptions(): void;
    isInsideWorkspace(resource: URI): boolean;
    toResource(workspaceRelativePath: string): URI;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
}

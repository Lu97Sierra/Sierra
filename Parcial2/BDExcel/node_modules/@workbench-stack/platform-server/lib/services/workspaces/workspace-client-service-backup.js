// /* tslint:disable */
// import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
// import { ServiceBroker, CallingOptions } from 'moleculer';
// import * as core from '@workbench-stack/core';
// import { interfaces, inject, postConstruct } from 'inversify';
// import {
//     IWorkspaceData, LifecyclePhase, IConfigurationOverrides, ConfigurationTarget,
//     AbstractWorkspaceService, AbstractWorkspaceContextService, toWorkspaceFolder, Workspace, IMoleculerServiceName,
//     IWorkspaceContextServiceAction, IConfigurationServiceAction, toWorkspaceFolders, WorkspaceFolder, IWorkspaceFolderCreationData,
// } from '@workbench-stack/core';
// import * as ILogger from 'bunyan';
// import { CommonType } from '@common-stack/core';
// import { Barrier } from '@vscode-alt/monaco-editor/esm/vs/base/common/async';
// import { IWorkspaceInitializationPayload } from '@workbench-stack/core';
// export class WorkspaceClientService extends AbstractWorkspaceService {
//     private topic = IMoleculerServiceName.WorkspaceContextService;
//     private startupBarrier: Barrier;
//     constructor(
//         @inject(core.ClientTypes.ILifecycleService)
//         private lifecycleService: core.ILifecycleService,
//         @inject(CommonType.LOGGER)
//         logger: ILogger,
//         @inject(CommonType.MOLECULER_BROKER)
//         public broker: ServiceBroker,
//     ) {
//         super(logger);
//         console.log('WORKSPACE CLIENT SERVICE IS CRATED WITHOUT LOADING');
//         this.logger = logger.child({ className: WorkspaceClientService });
//         this.startupBarrier = new Barrier();
//     }
//     @postConstruct()
//     public async extInitialize() {
//         console.log('WORKSPACE CLIENT SERVICE POST CONSTRUCT CALLED')
//         await this.broker.waitForServices(IMoleculerServiceName.WorkspaceReady);
//         console.log('WORKSPACE CLIENT READY STATE RESOLVED')
//         if (!this.startupBarrier.isOpen()) {
//             this.startupBarrier.open();
//         }
//         if (!this.configuration && !this.workspace) {
//             await this.asyncInitializeWorkspace();
//         }
//         if (!this.configuration) {
//             await this.asyncInitializeConfiguration();
//         }
//     }
//     public async initialize(arg: IWorkspaceInitializationPayload): Promise<any> {
//         throw new Error("Method not implemented.");
//     }
//     private async asyncInitializeWorkspace(opts?: CallingOptions) {
//         const workspace = await this.callAction<IWorkspaceData>(IWorkspaceContextServiceAction.getWorkspace);
//         this.logger.debug('Wokspace data received in post construct: [%j]', this.workspace);
//         this.workspace = this.reviveWorkspaceUris(workspace);
//     }
//     private async asyncInitializeConfiguration(opts?: CallingOptions) {
//         this.logger.info('Loading configuration data and workspace data');
//         const configData = await this.callAction(IConfigurationServiceAction.getConfigurationData, null, IMoleculerServiceName.ConfigurationService);
//         this.configuration = AbstractWorkspaceService.parse(configData);
//     }
//     public updateValue(key: string, value: any): Promise<void>;
//     public updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
//     public updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
//     public updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
//     public updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;
//     public updateValue(key: string, value: any, arg3?: any, arg4?: any, donotNotifyError?: any): Promise<void> {
//         return this.callAction(IConfigurationServiceAction.updateValue, { key, value, arg3, arg4, donotNotifyError });
//     }
//     public async reloadConfiguration(folder?: core.IWorkspaceFolder) {
//         await this.callAction<any, { folder?: core.IWorkspaceFolder }>(IConfigurationServiceAction.reloadConfiguration, { folder }, IMoleculerServiceName.ConfigurationService);
//         console.log('reload configuration done');
//         await this.asyncInitializeWorkspace({ meta: { $cache: false } });
//         await this.asyncInitializeConfiguration({ meta: { $cache: false } });
//     }
//     public async addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void> {
//         this.updateWorkspaceBarrier = new Barrier();
//         await this.callAction<void, { foldersToAdd: IWorkspaceFolderCreationData[], index?: number }>(IWorkspaceContextServiceAction.addFolders, { foldersToAdd, index });
//         await this.updateWorkspaceBarrier.wait();
//     }
//     public async removeFolders(foldersToRemove: URI[]): Promise<void> {
//         this.updateWorkspaceBarrier = new Barrier();
//         await this.callAction<void, { foldersToRemove: URI[] }>(IWorkspaceContextServiceAction.removeFolders, { foldersToRemove });
//         await this.updateWorkspaceBarrier.wait();
//     }
//     public async updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void> {
//         this.updateWorkspaceBarrier = new Barrier();
//         await this.callAction<void, { foldersToRemove: URI[], foldersToAdd: IWorkspaceFolderCreationData[], index?: number }>(IWorkspaceContextServiceAction.updateFolders, { foldersToAdd, foldersToRemove, index });
//         await this.updateWorkspaceBarrier.wait();
//     }
//     private async callAction<T, P = any>(command: string, params?: P, topic?: string, opts?: CallingOptions) {
//         return this.startupBarrier.wait().then(() => {
//             return this.broker.call<T, P>(`${topic || this.topic}.${command}`, params, opts);
//         });
//     }
// }
//# sourceMappingURL=workspace-client-service-backup.js.map
import { Subscribable } from 'rxjs';
import { ITextModel, ITextBufferFactory, ITextModelCreationOptions } from '@vscode-alt/monaco-editor/esm/vs/editor/common/model';
import { ILanguageSelection } from '@vscode-alt/monaco-editor/esm/vs/editor/common/services/modeService';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Observable } from 'rxjs';
import { IModelService as IEditorModelService } from '@vscode-alt/monaco-editor/esm/vs/editor/common/services/modelService';


export const enum ModelActionType {
    'add',
    'remove',
    'removeAll',
    'onDirty',
    'onSave',
    'changeContent',
}


/**
 * The model service manages document contents and metadata.
 *
 * see {@link Model} for an explanation of the difference between a model and an editor.
 */
export interface IModelService extends Pick<IEditorModelService, Exclude<keyof IEditorModelService, '_serviceBrand' | 'createModel' | 'onModelAdded' | 'onModelRemoved' | 'onModelModeChanged'>> {

    /**
     * Adds a model.
     *
     * @param model The model to add.
     */
    createModel(value: string | ITextBufferFactory, languageSelection: string | ILanguageSelection, resource: URI, isForSimpleWidget?: boolean): ITextModel;

    onModelAdded: Observable<ITextModel>;
    onModelRemoved: Observable<ITextModel>;
    onModelModeChanged: Observable<{ model: ITextModel, oldModeId: string }>;

}

import { URI, UriComponents } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { IStoredWorkspaceFolder, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier, IRawFileWorkspaceFolder, IRawUriWorkspaceFolder, ISingleFolderWorkspaceInitializationPayload, IWorkspace } from '../../../interfaces';
export declare function reviveWorkspaceIdentifier(workspace: {
    id: string;
    configPath: UriComponents;
}): IWorkspaceIdentifier;
export declare function isStoredWorkspaceFolder(thing: any): thing is IStoredWorkspaceFolder;
export declare function isRawFileWorkspaceFolder(thing: any): thing is IRawFileWorkspaceFolder;
export declare function isRawUriWorkspaceFolder(thing: any): thing is IRawUriWorkspaceFolder;
export declare function isSingleFolderWorkspaceIdentifier(obj: any): obj is ISingleFolderWorkspaceIdentifier;
export declare function isWorkspaceIdentifier(obj: any): obj is IWorkspaceIdentifier;
export declare function toWorkspaceIdentifier(workspace: IWorkspace): IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;
export declare function isSingleFolderWorkspaceInitializationPayload(obj: any): obj is ISingleFolderWorkspaceInitializationPayload;
export declare function hasWorkspaceFileExtension(path: string | URI): boolean;
/**
 * Given a folder URI and the workspace config folder, computes the IStoredWorkspaceFolder using
 * a relative or absolute path or a uri.
 * Undefined is returned if the folderURI and the targetConfigFolderURI don't have the same schema or authority
 *
 * @param folderURI a workspace folder
 * @param folderName a workspace name
 * @param targetConfigFolderURI the folder where the workspace is living in
 * @param useSlashForPath if set, use forward slashes for file paths on windows
 */
export declare function getStoredWorkspaceFolder(folderURI: URI, folderName: string | undefined, targetConfigFolderURI: URI, useSlashForPath?: boolean): IStoredWorkspaceFolder;
/**
 * Rewrites the content of a workspace file to be saved at a new location.
 * Throws an exception if file is not a valid workspace file
 */
export declare function rewriteWorkspaceFileForNewLocation(rawWorkspaceContents: string, configPathURI: URI, targetConfigPathURI: URI): string;
export declare function useSlashForPath(storedFolders: IStoredWorkspaceFolder[]): boolean;

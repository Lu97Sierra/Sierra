"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceConfiguration = void 0;
const configuration_1 = require("../configuration");
const objects_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/objects");
//src/vs/workbench/services/configuration/common/configurationModels.ts
class WorkspaceConfiguration extends configuration_1.Configuration {
    constructor(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, _workspace) {
        super(defaults, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);
        this._workspace = _workspace;
    }
    getValue(key, overrides = {}) {
        return super.getValue(key, overrides, this._workspace);
    }
    inspect(key, overrides = {}) {
        return super.inspect(key, overrides, this._workspace);
    }
    keys() {
        return super.keys(this._workspace);
    }
    compareAndUpdateLocalUserConfiguration(user) {
        const { added, updated, removed } = configuration_1.compare(this.localUserConfiguration, user);
        let changedKeys = [...added, ...updated, ...removed];
        if (changedKeys.length) {
            super.updateLocalUserConfiguration(user);
        }
        return new configuration_1.ConfigurationChangeEvent().change(changedKeys);
    }
    compareAndUpdateRemoteUserConfiguration(user) {
        const { added, updated, removed } = configuration_1.compare(this.remoteUserConfiguration, user);
        let changedKeys = [...added, ...updated, ...removed];
        if (changedKeys.length) {
            super.updateRemoteUserConfiguration(user);
        }
        return new configuration_1.ConfigurationChangeEvent().change(changedKeys);
    }
    compareAndUpdateWorkspaceConfiguration(workspaceConfiguration) {
        const { added, updated, removed } = configuration_1.compare(this.workspaceConfiguration, workspaceConfiguration);
        let changedKeys = [...added, ...updated, ...removed];
        if (changedKeys.length) {
            super.updateWorkspaceConfiguration(workspaceConfiguration);
        }
        return new configuration_1.ConfigurationChangeEvent().change(changedKeys);
    }
    compareAndUpdateFolderConfiguration(resource, folderConfiguration) {
        const currentFolderConfiguration = this.folderConfigurations.get(resource);
        if (currentFolderConfiguration) {
            const { added, updated, removed } = configuration_1.compare(currentFolderConfiguration, folderConfiguration);
            let changedKeys = [...added, ...updated, ...removed];
            if (changedKeys.length) {
                super.updateFolderConfiguration(resource, folderConfiguration);
            }
            return new configuration_1.ConfigurationChangeEvent().change(changedKeys, resource);
        }
        else {
            super.updateFolderConfiguration(resource, folderConfiguration);
            return new configuration_1.ConfigurationChangeEvent().change(folderConfiguration.keys, resource);
        }
    }
    compareAndDeleteFolderConfiguration(folder) {
        if (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {
            // Do not remove workspace configuration
            return new configuration_1.ConfigurationChangeEvent();
        }
        const folderConfig = this.folderConfigurations.get(folder);
        if (!folderConfig) {
            throw new Error('Unknown folder ' + folder.fsPath);
        }
        const keys = folderConfig.keys;
        super.deleteFolderConfiguration(folder);
        return new configuration_1.ConfigurationChangeEvent().change(keys, folder);
    }
    compare(other) {
        const result = [];
        for (const key of this.allKeys()) {
            if (!objects_1.equals(this.getValue(key), other.getValue(key))
                || (this._workspace && this._workspace.folders.some(folder => !objects_1.equals(this.getValue(key, { resource: folder.uri }), other.getValue(key, { resource: folder.uri }))))) {
                result.push(key);
            }
        }
        return result;
    }
    allKeys() {
        return super.allKeys(this._workspace);
    }
}
exports.WorkspaceConfiguration = WorkspaceConfiguration;
//# sourceMappingURL=configuration.js.map
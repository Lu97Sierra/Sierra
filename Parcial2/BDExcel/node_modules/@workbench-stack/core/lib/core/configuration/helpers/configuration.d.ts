import { IConfigurationModel, ConfigurationTarget, IConfigurationService, IConfigurationOverrides, IOverrides, ISettingsSubject } from '../../../interfaces';
export declare function isConfigurationOverrides(thing: any): thing is IConfigurationOverrides;
/**
 * @SRI modified to match to the union type of graphql type Settings
 */
export declare function ConfigurationTargetToString(configurationTarget: ConfigurationTarget): ISettingsSubject['__typename'];
export declare function SettingsTypeToConfiguraitonTarget(settings: ISettingsSubject['__typename']): ConfigurationTarget;
export declare function compare(from: IConfigurationModel, to: IConfigurationModel): {
    added: string[];
    removed: string[];
    updated: string[];
};
export declare function toOverrides(raw: any, configurationProperties: any, conflictReporter: (message: string) => void): IOverrides[];
export declare function toValuesTree(properties: {
    [qualifiedKey: string]: any;
}, conflictReporter: (message: string) => void): any;
export declare function addToValueTree(settingsTreeRoot: any, key: string, value: any, conflictReporter: (message: string) => void): void;
export declare function removeFromValueTree(valueTree: any, key: string): void;
/**
 * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)
 */
export declare function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T;
export declare function merge(base: any, add: any, overwrite: boolean): void;
export declare function overrideIdentifierFromKey(key: string): string;
export declare function keyFromOverrideIdentifier(overrideIdentifier: string): string;
export declare function getMigratedSettingValue<T>(configurationService: IConfigurationService, currentSettingName: string, legacySettingName: string): T;

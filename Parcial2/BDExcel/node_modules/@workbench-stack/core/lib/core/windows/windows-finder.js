"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findWindowOnWorkspaceOrFolderUri = exports.findWindowOnExtensionDevelopmentPath = exports.findWindowOnWorkspace = exports.getLastActiveWindow = void 0;
const resources_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const extpath = require("@vscode-alt/monaco-editor/esm/vs/base/common/extpath");
const workspaces_1 = require("@vscode-alt/monaco-editor/esm/vs/platform/workspaces/common/workspaces");
const resources_2 = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const workspaces_2 = require("@vscode-alt/monaco-editor/esm/vs/platform/workspaces/common/workspaces");
const platform = require("@vscode-alt/monaco-editor/esm/vs/base/common/platform");
function findWindowOnFilePath(windows, fileUri, localWorkspaceResolver) {
    // First check for windows with workspaces that have a parent folder of the provided path opened
    for (const window of windows) {
        const workspace = window.openedWorkspace;
        if (workspace) {
            const resolvedWorkspace = localWorkspaceResolver(workspace);
            if (resolvedWorkspace) {
                // workspace could be resolved: It's in the local file system
                if (resolvedWorkspace.folders.some(folder => resources_1.isEqualOrParent(fileUri, folder.uri))) {
                    return window;
                }
            }
            else {
                // use the config path instead
                if (resources_1.isEqualOrParent(fileUri, workspace.configPath)) {
                    return window;
                }
            }
        }
    }
    // Then go with single folder windows that are parent of the provided file path
    const singleFolderWindowsOnFilePath = windows.filter(window => window.openedFolderUri && resources_1.isEqualOrParent(fileUri, window.openedFolderUri));
    if (singleFolderWindowsOnFilePath.length) {
        return singleFolderWindowsOnFilePath.sort((a, b) => -(a.openedFolderUri.path.length - b.openedFolderUri.path.length))[0];
    }
    return null;
}
function getLastActiveWindow(windows) {
    const lastFocusedDate = Math.max.apply(Math, windows.map(window => window.lastFocusTime));
    return windows.filter(window => window.lastFocusTime === lastFocusedDate)[0];
}
exports.getLastActiveWindow = getLastActiveWindow;
function findWindowOnWorkspace(windows, workspace) {
    if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {
        for (const window of windows) {
            // match on folder
            if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {
                if (window.openedFolderUri && resources_2.isEqual(window.openedFolderUri, workspace)) {
                    return window;
                }
            }
        }
    }
    else if (workspaces_2.isWorkspaceIdentifier(workspace)) {
        for (const window of windows) {
            // match on workspace
            if (window.openedWorkspace && window.openedWorkspace.id === workspace.id) {
                return window;
            }
        }
    }
    return null;
}
exports.findWindowOnWorkspace = findWindowOnWorkspace;
function findWindowOnExtensionDevelopmentPath(windows, extensionDevelopmentPath) {
    const matches = (uriString) => {
        if (Array.isArray(extensionDevelopmentPath)) {
            return extensionDevelopmentPath.some(p => extpath.isEqual(p, uriString, !platform.isLinux /* ignorecase */));
        }
        else if (extensionDevelopmentPath) {
            return extpath.isEqual(extensionDevelopmentPath, uriString, !platform.isLinux /* ignorecase */);
        }
        return false;
    };
    for (const window of windows) {
        // match on extension development path. The path can be one or more paths or uri strings, using paths.isEqual is not 100% correct but good enough
        if (window.extensionDevelopmentPath) {
            if (Array.isArray(window.extensionDevelopmentPath)) {
                if (window.extensionDevelopmentPath.some(p => matches(p))) {
                    return window;
                }
            }
            else if (window.extensionDevelopmentPath) {
                if (matches(window.extensionDevelopmentPath)) {
                    return window;
                }
            }
        }
    }
    return null;
}
exports.findWindowOnExtensionDevelopmentPath = findWindowOnExtensionDevelopmentPath;
function findWindowOnWorkspaceOrFolderUri(windows, uri) {
    if (!uri) {
        return null;
    }
    for (const window of windows) {
        // check for workspace config path
        if (window.openedWorkspace && resources_2.isEqual(window.openedWorkspace.configPath, uri)) {
            return window;
        }
        // check for folder path
        if (window.openedFolderUri && resources_2.isEqual(window.openedFolderUri, uri)) {
            return window;
        }
    }
    return null;
}
exports.findWindowOnWorkspaceOrFolderUri = findWindowOnWorkspaceOrFolderUri;
//# sourceMappingURL=windows-finder.js.map
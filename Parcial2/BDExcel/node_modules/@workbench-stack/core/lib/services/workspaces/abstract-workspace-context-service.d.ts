import { IWorkspaceFolder, IWorkspaceData, WorkbenchState, IConfigurationChangeEvent, IWorkspaceFoldersChangeEvent, IWorkspaceFolderCreationData, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier, IClientWorkspaceContextService } from '../../interfaces';
import { Workspace } from '../../core';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { Barrier } from '@vscode-alt/monaco-editor/esm/vs/base/common/async';
import { CdmLogger } from '@cdm-logger/core';
declare type ILogger = CdmLogger.ILogger;
export declare abstract class AbstractWorkspaceContextService extends Disposable implements IClientWorkspaceContextService {
    protected workspace: Workspace;
    protected completeWorkspaceBarrier: Barrier;
    protected updateWorkspaceBarrier: Barrier;
    private _configuration;
    protected logger: ILogger;
    protected readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent>;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    protected readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent>;
    readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;
    protected readonly _onDidChangeWorkspaceName: Emitter<void>;
    readonly onDidChangeWorkspaceName: Event<void>;
    protected readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState>;
    readonly onDidChangeWorkbenchState: Event<WorkbenchState>;
    constructor(logger: ILogger);
    abstract extInitialize(): any;
    abstract initialize(args: any): any;
    getCompleteWorkspace(): Promise<Workspace>;
    getWorkspace(): Workspace;
    getWorkbenchState(): WorkbenchState;
    getWorkspaceFolder(resource: URI): IWorkspaceFolder | null;
    abstract addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void>;
    abstract removeFolders(foldersToRemove: URI[]): Promise<void>;
    abstract updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void>;
    isInsideWorkspace(resource: URI): boolean;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
    extAcceptChangedWorkbenchState(workspace: IWorkspaceData, event: WorkbenchState): void;
    extAcceptChangedWorkspaceFolders(workspace: IWorkspaceData, event: IWorkspaceFoldersChangeEvent): void;
    extAcceptChangedWorkspaceName(workspace: IWorkspaceData): void;
    protected releaseWorkspaceBarrier(): void;
    protected releaseUpdateWorkspaceBarrier(): void;
    protected reviveWorkspaceUris(workspaceData: IWorkspaceData): Workspace;
}
export {};

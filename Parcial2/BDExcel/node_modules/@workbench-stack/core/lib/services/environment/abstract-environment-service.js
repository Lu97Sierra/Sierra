"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractEnvironmentService = void 0;
const inversify_1 = require("inversify");
let AbstractEnvironmentService = class AbstractEnvironmentService {
    get args() {
        return this._environment.args;
    }
    get execPath() {
        return this._environment.execPath;
    }
    get cliPath() {
        return this._environment.cliPath;
    }
    get appRoot() {
        return this._environment.appRoot;
    }
    get userHome() {
        return this._environment.userHome;
    }
    get userDataPath() {
        return this._environment.userDataPath;
    }
    get appNameLong() {
        return this._environment.appNameLong;
    }
    get appQuality() {
        return this._environment.appQuality;
    }
    get appSettingsHome() {
        return this._environment.appSettingsHome;
    }
    get appSettingsPath() {
        return this._environment.appSettingsPath;
    }
    get appKeybindingsPath() {
        return this._environment.appKeybindingsPath;
    }
    get settingsSearchBuildId() {
        return this._environment.settingsSearchBuildId;
    }
    get settingsSearchUrl() {
        return this._environment.settingsSearchUrl;
    }
    get globalStorageHome() {
        return this._environment.globalStorageHome;
    }
    get workspaceStorageHome() {
        return this._environment.workspaceStorageHome;
    }
    get backupHome() {
        return this._environment.backupHome;
    }
    get backupWorkspacesPath() {
        return this._environment.backupWorkspacesPath;
    }
    get workspacesHome() {
        return this._environment.workspacesHome;
    }
    get isExtensionDevelopment() {
        return this._environment.isExtensionDevelopment;
    }
    get disableExtensions() {
        return this._environment.disableExtensions;
    }
    get builtinExtensionsPath() {
        return this._environment.builtinExtensionsPath;
    }
    get extensionsPath() {
        return this._environment.extensionsPath;
    }
    get extensionDevelopmentLocationURI() {
        return this._environment.extensionDevelopmentLocationURI;
    }
    get extensionTestsPath() {
        return this._environment.extensionTestsPath;
    }
    get debugExtensionHost() {
        return this._environment.debugExtensionHost;
    }
    get debugSearch() {
        return this._environment.debugSearch;
    }
    get logExtensionHostCommunication() {
        return this._environment.logExtensionHostCommunication;
    }
    get isBuilt() {
        return this._environment.isBuilt;
    }
    get wait() {
        return this._environment.wait;
    }
    get status() {
        return this._environment.status;
    }
    get performance() {
        return this._environment.performance;
    }
    get log() {
        return this._environment.log;
    }
    get logsPath() {
        return this._environment.logsPath;
    }
    get verbose() {
        return this._environment.verbose;
    }
    get logLevel() {
        return this._environment.logLevel;
    }
    get skipGettingStarted() {
        return this._environment.skipGettingStarted;
    }
    get skipReleaseNotes() {
        return this._environment.skipReleaseNotes;
    }
    get skipAddToRecentlyOpened() {
        return this._environment.skipAddToRecentlyOpened;
    }
    get nodeCachedDataDir() {
        return this._environment.nodeCachedDataDir;
    }
    get installSourcePath() {
        return this.installSourcePath;
    }
    get disableUpdates() {
        return this._environment.disableUpdates;
    }
    get disableCrashReporter() {
        return this._environment.disableCrashReporter;
    }
    get driverHandle() {
        return this._environment.driverHandle;
    }
    get driverVerbose() {
        return this._environment.driverVerbose;
    }
    get keyboardLayoutResource() {
        return this._environment.keyboardLayoutResource;
    }
    get keybindingsResource() {
        return this._environment.keybindingsResource;
    }
};
AbstractEnvironmentService = __decorate([
    inversify_1.injectable()
], AbstractEnvironmentService);
exports.AbstractEnvironmentService = AbstractEnvironmentService;
//# sourceMappingURL=abstract-environment-service.js.map
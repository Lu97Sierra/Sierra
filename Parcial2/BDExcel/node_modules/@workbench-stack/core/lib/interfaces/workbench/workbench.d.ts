import { LifecyclePhase, ILifecycleService } from '../lifecycle';
import { interfaces } from 'inversify';
import { IConstructorSignature0 } from '../common-interfaces';
export interface IWorkbenchContribution {
}
export declare type BrandedService = {
    _serviceBrand: undefined;
};
export declare type IWorkbenchContributionSignature = IConstructorSignature0<IWorkbenchContribution>;
export interface IWorkbenchContributionsRegistry {
    /**
     * Registers a workbench contribution to the platform that will be loaded when the workbench starts and disposed when
     * the workbench shuts down.
     *
     * @param phase the lifecycle phase when to instantiate the contribution.
     */
    registerWorkbenchContribution(contribution: IWorkbenchContributionSignature, phase: LifecyclePhase): void;
    /**
     * Starts the registry by providing the required services.
     */
    start(container: interfaces.Container, lifecycleService: ILifecycleService): void;
}

import { IWorkspaceIdentifier, IWorkspaceFolderCreationData } from '../../interfaces';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
export interface IWorkspaceEditingService {
    /**
     * Add folders to the existing workspace.
     * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action
     */
    addFolders(folders: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    /**
     * Remove folders from the existing workspace
     * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action
     */
    removeFolders(folders: URI[], donotNotifyError?: boolean): Promise<void>;
    /**
     * Allows to add and remove folders to the existing workspace at once.
     * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action
     */
    updateFolders(index: number, deleteCount?: number, foldersToAdd?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    /**
     * enters the workspace with the provided path.
     */
    enterWorkspace(path: URI): Promise<void>;
    /**
     * creates a new workspace with the provided folders and opens it. if path is provided
     * the workspace will be saved into that location.
     */
    createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void>;
    /**
     * saves the current workspace to the provided path and opens it. requires a workspace to be opened.
     */
    saveAndEnterWorkspace(path: URI): Promise<void>;
    /**
     * copies current workspace settings to the target workspace.
     */
    copyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void>;
}
export interface IWorkspaceMigrationService {
    /**
     * Migrate current workspace to given workspace
     */
    migrate(toWokspaceId: IWorkspaceIdentifier): Promise<void>;
}

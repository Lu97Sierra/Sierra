import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { IWorkspace, IWorkspaceFolder } from '../workspace';
import { IExtensionManifest, IBaseExtension, IExtensionIdentifier } from '../generated-model';
export declare function isIExtensionIdentifier(thing: any): thing is IExtensionIdentifier;
export interface IGalleryMetadata {
    id: string;
    publisherId: string;
    publisherDisplayName: string;
}
export interface ILocalExtension extends IBaseExtension {
    readonly manifest: IExtensionManifest;
    metadata: IGalleryMetadata;
    readmeUrl: URI | null;
    changelogUrl: URI | null;
}
export declare const enum SortBy {
    NoneOrRelevance = 0,
    LastUpdatedDate = 1,
    Title = 2,
    PublisherName = 3,
    InstallCount = 4,
    PublishedDate = 5,
    AverageRating = 6,
    WeightedRating = 12
}
export declare const enum SortOrder {
    Default = 0,
    Ascending = 1,
    Descending = 2
}
export interface IQueryOptions {
    text?: string;
    ids?: string[];
    names?: string[];
    pageSize?: number;
    sortBy?: SortBy;
    sortOrder?: SortOrder;
    source?: string;
}
export declare const enum StatisticType {
    Uninstall = "uninstall"
}
export interface IReportedExtension {
    id: IExtensionIdentifier;
    malicious: boolean;
}
export declare const enum InstallOperation {
    None = 0,
    Install = 1,
    Update = 2
}
export interface ITranslation {
    contents: {
        [key: string]: {};
    };
}
export declare const INSTALL_ERROR_MALICIOUS = "malicious";
export declare const INSTALL_ERROR_INCOMPATIBLE = "incompatible";
export declare const enum EnablementState {
    Disabled = 0,
    WorkspaceDisabled = 1,
    Enabled = 2,
    WorkspaceEnabled = 3
}
export interface IExtensionsConfigContent {
    recommendations: string[];
    unwantedRecommendations: string[];
}
export declare type RecommendationChangeNotification = {
    extensionId: string;
    isRecommended: boolean;
};
export declare type DynamicRecommendation = 'dynamic';
export declare type ExecutableRecommendation = 'executable';
export declare type CachedRecommendation = 'cached';
export declare type ApplicationRecommendation = 'application';
export declare type ExtensionRecommendationSource = IWorkspace | IWorkspaceFolder | URI | DynamicRecommendation | ExecutableRecommendation | CachedRecommendation | ApplicationRecommendation;
export interface IExtensionRecommendation {
    extensionId: string;
    sources: ExtensionRecommendationSource[];
}
export declare const enum ExtensionRecommendationReason {
    Workspace = 0,
    File = 1,
    Executable = 2,
    DynamicWorkspace = 3,
    Experimental = 4
}
export declare const ExtensionsLabel: string;
export declare const ExtensionsChannelId = "extensions";
export declare const PreferencesLabel: string;

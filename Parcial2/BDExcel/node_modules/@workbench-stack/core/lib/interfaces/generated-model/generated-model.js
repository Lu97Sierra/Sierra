"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateModelDocument = exports.DocumentSymbolDefinitionDocument = exports.RenameDefinitionDocument = exports.ReferenceProviderDefinitionDocument = exports.OpenLanguageDocumentDocument = exports.HoverProviderDefinitionDocument = exports.DocumentFormattingProviderDefinitionDocument = exports.DocumentHighLightProviderDefinitionDocument = exports.DefinitionDefinitionDocument = exports.CompletionProviderDefinitionDocument = exports.CodeLenseProviderDefinitionDocument = exports.GetWorkspaceFolderContextDocument = exports.AddServerNotificationDocument = exports.GetWorkspaceValue_WSDocument = exports.GetWorkspace_WSDocument = exports.GetEnvironment_WSDocument = exports.GetConfiguration_WSDocument = exports.UpdateWorkspaceContextUpdateFoldersDocument = exports.UpdateWorkspaceContextRemoveFoldersDocument = exports.UpdateWorkspaceContextAddFoldersDocument = exports.NotifyDocument = exports.NotifyWarnDocument = exports.NotifyPromptDocument = exports.NotifyInfoDocument = exports.NotifyErrorDocument = exports.GetWorkspaceDocument = exports.GetViewsDocument = exports.StatusbarItemDocument = exports.StatusbarDocument = exports.QuickInputModelDocument = exports.GetSelectedValueDocument = exports.showNotificationDocument = exports.NotificationsDocument = exports.KeybindingsDocument = exports.KeybindingContextMenuDocument = exports.GetKeybindingsDocument = exports.GoToLineQuickAccessDocument = exports.showDialogDocument = exports.DialogDocument = exports.ContextMenuDocument = exports.GetContextDocument = exports.FinalConfiguration_WSDocument = exports.UpdateFoldersDocument = exports.RemoveFoldersDocument = exports.ChangeWorkspaceDocument = exports.AddFoldersDocument = exports.UpdateStatusbarEntryDocument = exports.SetStatusMessageDocument = exports.RemoveStatusbarEntryDocument = exports.AddEntryDocument = exports.ShowPickInputDocument = exports.ShowInputDocument = exports.SetSelectedDocument = exports.HideInputModelDocument = exports.OpenEditorFileDocument = exports.HandlerDocument = exports.CloseNotificationDocument = exports.AddNotificationDocument = exports.StopEditWhenExpressionDocument = exports.SetSelectedKeybindingIndexDocument = exports.SearchKeybindingDocument = exports.ResolveKeyboardEventDocument = exports.ResetKeybindingDocument = exports.RemoveKeybindingDocument = exports.registerKeybindingDocument = exports.LookupKeybindingDocument = exports.HideKeybindingDialogDocument = exports.EditKeybindingDocument = exports.ChangeWhenExpressionDocument = exports.ChangeKeybindingDocument = exports.JsonEditingWriteDocument = exports.HighlightLineDocument = exports.GoToLineDocument = exports.OpenEditorDocument = exports.OpenEditorResourceInputDocument = exports.ShowDocument = exports.CloseDialogDocument = exports.ShowContextMenuDocument = exports.HideContextMenuDocument = exports.RunMenuActionDocument = exports.CopyDocument = exports.UpdateConfigurationValueDocument = exports.WorkspacesDocument = exports.GetMostCommonlyUsedSettingsDocument = exports.FullConfigurationDocument = exports.DefaultSettingsDocument = exports.DefaultPreferencesDocument = exports.SwitchSettingsDocument = exports.saveWorkspaceSettingsDocument = exports.saveUserSettingsDocument = exports.ResetSettingDocument = exports.OpenPreferenceSettingsDocument = exports.OpenGlobalKeybindingsSettingsDocument = exports.GetConfigurationTargetDocument = exports.ViewerSettingsDocument = exports.installedExtensionsDocument = exports.galleryDocument = exports.galleryExtensionDocument = exports.ExtensionsDocument = exports.ExtensionsByLimitDocument = exports.removeDocument = exports.providerDefinitionDocument = exports.installDocument = exports.WorkspaceFolderFragmentDoc = exports.NotificationFragmentDoc = exports.NotifyActionFragmentDoc = exports.NotificationMessageFragmentDoc = exports.INotificationMessageFragmentDoc = exports.GetConfigurationDataFragmentDoc = exports.statusbarItemFragmentDoc = exports.ResourceContextFragmentDoc = exports.selectedFragmentDoc = exports.pickItemFragmentDoc = exports.KeybindingsFragmentDoc = exports.KeybindingItemFragmentDoc = exports.FinalConfigurationFragmentDoc = exports.AllContextFragmentDoc = exports.ViewerSettingsFragmentDoc = exports.WorkspaceConfigurationFragmentDoc = exports.GitConfigurationFragmentDoc = exports.FilesConfigurationFragmentDoc = exports.LanguagesConfigurationFragmentDoc = exports.SearchConfigurationFragmentDoc = exports.TerminalConfigurationFragmentDoc = exports.SettingRangeFragmentDoc = exports.DefaultSettingFragmentDoc = exports.IWorkspaceContextServiceAction = exports.ITreeItemCollapsibleState = exports.ITextSearchStatsType = exports.ITextFileOperationResult = exports.ITextEditorSelectionRevealType = exports.TabSizingType = exports.TabCloseButtonType = exports.IStorageScope = exports.IStatusbarAlignment = exports.ISTATUSBAR_ITEM_ID = exports.SideBySideEditor = exports.ISettingValueType = exports.IscmResourceGroups = exports.IscmProviders = exports.ISaveReason = exports.IRunActionInWindowRequestFrom = exports.IReadyState = exports.IQueryType = exports.IProvidedRemoteConnectionStates = exports.OpenSideBySideDirection = exports.OpenPositioningType = exports.IOpenDialogOptionsProperties = exports.IOpenContext = exports.INotificationViewItemLabelKind = exports.NotificationSeverity = exports.INotificationChangeType = exports.IMoleculerServiceName = exports.MergeGroupMode = exports.IMenuId = exports.IMarkupKind = exports.LableFormatType = exports.IKeybindingSource = exports.IHotExitConfiguration = exports.GroupsOrder = exports.GroupsArrangement = exports.GroupOrientation = exports.GroupLocation = exports.GroupDirection = exports.IGraphqlCallType = exports.IFileType = exports.IFileStateChange = exports.IFileSearchStatsType = exports.IFileOperationResult = exports.IFileOperation = exports.IFileModelState = exports.IFileLoadReason = exports.IFileContentStatus = exports.IFileChangeType = exports.IExtensionType = exports.IExtensionKind = exports.IEnvironmentServiceAction = exports.EditorsOrder = exports.EditorOpenPositioning = exports.IEditorOpenContext = exports.IEditorActivation = exports.IEditorActionType = exports.IEDITOR_INPUT_RESOURCE_TYPE_ID = exports.IEDITOR_INPUT_ID = exports.IEDITOR_ID = exports.IDevToolsOptionsMode = exports.ConfigurationTarget = exports.IConfigurationServiceAction = exports.ConfigurationScope = exports.IcommentThread = exports.CloseDirection = exports.IAutoSaveConfigurationType = void 0;
const severity_1 = require("../../core/severity");
var NotificationSeverity = severity_1.Severity;
exports.NotificationSeverity = NotificationSeverity;
const enum_1 = require("../enum");
Object.defineProperty(exports, "SideBySideEditor", { enumerable: true, get: function () { return enum_1.SideBySideEditor; } });
const graphql_tag_1 = require("graphql-tag");
var IAutoSaveConfigurationType;
(function (IAutoSaveConfigurationType) {
    IAutoSaveConfigurationType["off"] = "off";
    IAutoSaveConfigurationType["afterDelay"] = "afterDelay";
    IAutoSaveConfigurationType["onFocusChange"] = "onFocusChange";
    IAutoSaveConfigurationType["onWindowChange"] = "onWindowChange";
})(IAutoSaveConfigurationType = exports.IAutoSaveConfigurationType || (exports.IAutoSaveConfigurationType = {}));
;
var IcommentThread;
(function (IcommentThread) {
    IcommentThread["editable"] = "editable";
})(IcommentThread = exports.IcommentThread || (exports.IcommentThread = {}));
;
var IConfigurationServiceAction;
(function (IConfigurationServiceAction) {
    IConfigurationServiceAction["getConfigurationData"] = "getConfigurationData";
    IConfigurationServiceAction["reloadConfiguration"] = "reloadConfiguration";
    IConfigurationServiceAction["onDidChangeConfiguration"] = "onDidChangeConfiguration";
    IConfigurationServiceAction["updateValue"] = "updateValue";
})(IConfigurationServiceAction = exports.IConfigurationServiceAction || (exports.IConfigurationServiceAction = {}));
;
var IDevToolsOptionsMode;
(function (IDevToolsOptionsMode) {
    IDevToolsOptionsMode["right"] = "right";
    IDevToolsOptionsMode["botton"] = "botton";
    IDevToolsOptionsMode["undocked"] = "undocked";
    IDevToolsOptionsMode["detach"] = "detach";
})(IDevToolsOptionsMode = exports.IDevToolsOptionsMode || (exports.IDevToolsOptionsMode = {}));
;
var IEDITOR_ID;
(function (IEDITOR_ID) {
    IEDITOR_ID["TEXT_RESOURCE_EDITOR"] = "TEXT_RESOURCE_EDITOR";
    IEDITOR_ID["TEXT_DIFF_EDITOR"] = "TEXT_DIFF_EDITOR";
    IEDITOR_ID["BINARY_DIFF_EDITOR"] = "BINARY_DIFF_EDITOR";
    IEDITOR_ID["SIDE_BY_SIDE_EDITOR"] = "SIDE_BY_SIDE_EDITOR";
})(IEDITOR_ID = exports.IEDITOR_ID || (exports.IEDITOR_ID = {}));
;
var IEDITOR_INPUT_ID;
(function (IEDITOR_INPUT_ID) {
    IEDITOR_INPUT_ID["DATA_URI_EDITOR_INPUT"] = "DATA_URI_EDITOR_INPUT";
    IEDITOR_INPUT_ID["DEFAULT_PREFERENCES_EDITOR_INPUT"] = "DEFAULT_PREFERENCES_EDITOR_INPUT";
    IEDITOR_INPUT_ID["DIFF_EDITOR_INPUT"] = "DIFF_EDITOR_INPUT";
    IEDITOR_INPUT_ID["FILE_EDITOR_INPUT"] = "FILE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["KEYBINDINGS_EDITOR_INPUT"] = "KEYBINDINGS_EDITOR_INPUT";
    IEDITOR_INPUT_ID["PREFERENCES_EDITOR_INPUT"] = "PREFERENCES_EDITOR_INPUT";
    IEDITOR_INPUT_ID["RESOURCE_EDITOR_INPUT"] = "RESOURCE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["SETTINGS2_EDITOR_INPUT"] = "SETTINGS2_EDITOR_INPUT";
    IEDITOR_INPUT_ID["SIDE_BY_SIDE_EDITOR_INPUT"] = "SIDE_BY_SIDE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["file"] = "file";
})(IEDITOR_INPUT_ID = exports.IEDITOR_INPUT_ID || (exports.IEDITOR_INPUT_ID = {}));
;
var IEDITOR_INPUT_RESOURCE_TYPE_ID;
(function (IEDITOR_INPUT_RESOURCE_TYPE_ID) {
    /** If the resource is `file` */
    IEDITOR_INPUT_RESOURCE_TYPE_ID["file"] = "file";
})(IEDITOR_INPUT_RESOURCE_TYPE_ID = exports.IEDITOR_INPUT_RESOURCE_TYPE_ID || (exports.IEDITOR_INPUT_RESOURCE_TYPE_ID = {}));
;
var IEditorActionType;
(function (IEditorActionType) {
    IEditorActionType["init"] = "init";
    IEditorActionType["add"] = "add";
    IEditorActionType["remove"] = "remove";
    IEditorActionType["removeAll"] = "removeAll";
    IEditorActionType["activateEditor"] = "activateEditor";
})(IEditorActionType = exports.IEditorActionType || (exports.IEditorActionType = {}));
;
var IEditorActivation;
(function (IEditorActivation) {
    /**
     *    Activate the editor after it opened. This will automatically restore
     * the editor if it is minimized.
     */
    IEditorActivation["ACTIVATE"] = "ACTIVATE";
    /**
     *    Only restore the editor if it is minimized but do not activate it.
     *
     * Note: will only work in combination with the `preserveFocus: true` option.
     * Otherwise, if focus moves into the editor, it will activate and restore
     * automatically.
     */
    IEditorActivation["RESTORE"] = "RESTORE";
    /**
     *    Preserve the current active editor.
     *
     * Note: will only work in combination with the `preserveFocus: true` option.
     * Otherwise, if focus moves into the editor, it will activate and restore
     * automatically.
     */
    IEditorActivation["PRESERVE"] = "PRESERVE";
})(IEditorActivation = exports.IEditorActivation || (exports.IEditorActivation = {}));
;
var IEditorOpenContext;
(function (IEditorOpenContext) {
    /**
     * Default: the editor is opening via a programmatic call
     * to the editor service API.
     */
    IEditorOpenContext["API"] = "API";
    /**
     * Indicates that a user action triggered the opening, e.g,
     * via mouse or keyboard use.
     */
    IEditorOpenContext["USER"] = "USER";
})(IEditorOpenContext = exports.IEditorOpenContext || (exports.IEditorOpenContext = {}));
;
var IEnvironmentServiceAction;
(function (IEnvironmentServiceAction) {
    IEnvironmentServiceAction["environment"] = "environment";
})(IEnvironmentServiceAction = exports.IEnvironmentServiceAction || (exports.IEnvironmentServiceAction = {}));
;
var IExtensionKind;
(function (IExtensionKind) {
    IExtensionKind["ui"] = "ui";
    IExtensionKind["workspace"] = "workspace";
})(IExtensionKind = exports.IExtensionKind || (exports.IExtensionKind = {}));
;
var IExtensionType;
(function (IExtensionType) {
    IExtensionType["System"] = "System";
    IExtensionType["User"] = "User";
})(IExtensionType = exports.IExtensionType || (exports.IExtensionType = {}));
;
/** Possible changes that can occur to a file. */
var IFileChangeType;
(function (IFileChangeType) {
    IFileChangeType["UPDATED"] = "UPDATED";
    IFileChangeType["ADDED"] = "ADDED";
    IFileChangeType["DELETED"] = "DELETED";
})(IFileChangeType = exports.IFileChangeType || (exports.IFileChangeType = {}));
;
var IFileContentStatus;
(function (IFileContentStatus) {
    IFileContentStatus["PENDING"] = "PENDING";
    IFileContentStatus["START"] = "START";
    IFileContentStatus["IN_PROGRESS"] = "IN_PROGRESS";
    IFileContentStatus["END"] = "END";
    IFileContentStatus["ERROR"] = "ERROR";
    IFileContentStatus["RESTORE"] = "RESTORE";
})(IFileContentStatus = exports.IFileContentStatus || (exports.IFileContentStatus = {}));
;
var IFileLoadReason;
(function (IFileLoadReason) {
    IFileLoadReason["EDITOR"] = "EDITOR";
    IFileLoadReason["REFERENCE"] = "REFERENCE";
    IFileLoadReason["OTHER"] = "OTHER";
})(IFileLoadReason = exports.IFileLoadReason || (exports.IFileLoadReason = {}));
;
/** same as ModelState as in vscode */
var IFileModelState;
(function (IFileModelState) {
    /**  A model is saved.  */
    IFileModelState["SAVED"] = "SAVED";
    /**  A model is dirty.  */
    IFileModelState["DIRTY"] = "DIRTY";
    /**  A model is transitioning from dirty to saved.  */
    IFileModelState["PENDING_SAVE"] = "PENDING_SAVE";
    /**
     * A model is in conflict mode when changes cannot be saved because the
     * underlying file has changed. Models in conflict mode are always dirty.
     */
    IFileModelState["CONFLICT"] = "CONFLICT";
    /**  A model is in orphan state when the underlying file has been deleted.  */
    IFileModelState["ORPHAN"] = "ORPHAN";
    /**
     * Any error that happens during a save that is not causing the CONFLICT state.
     * Models in error mode are always dirty.
     */
    IFileModelState["ERROR"] = "ERROR";
    /**  Loading  */
    IFileModelState["PENDING_LOAD"] = "PENDING_LOAD";
    /**  Unkown  */
    IFileModelState["UNKNOWN"] = "UNKNOWN";
})(IFileModelState = exports.IFileModelState || (exports.IFileModelState = {}));
;
var IFileOperation;
(function (IFileOperation) {
    IFileOperation["CREATE"] = "CREATE";
    IFileOperation["DELETE"] = "DELETE";
    IFileOperation["MOVE"] = "MOVE";
    IFileOperation["COPY"] = "COPY";
})(IFileOperation = exports.IFileOperation || (exports.IFileOperation = {}));
;
var IFileOperationResult;
(function (IFileOperationResult) {
    IFileOperationResult["FILE_IS_DIRECTORY"] = "FILE_IS_DIRECTORY";
    IFileOperationResult["FILE_NOT_FOUND"] = "FILE_NOT_FOUND";
    IFileOperationResult["FILE_NOT_MODIFIED_SINCE"] = "FILE_NOT_MODIFIED_SINCE";
    IFileOperationResult["FILE_MODIFIED_SINCE"] = "FILE_MODIFIED_SINCE";
    IFileOperationResult["FILE_MOVE_CONFLICT"] = "FILE_MOVE_CONFLICT";
    IFileOperationResult["FILE_READ_ONLY"] = "FILE_READ_ONLY";
    IFileOperationResult["FILE_PERMISSION_DENIED"] = "FILE_PERMISSION_DENIED";
    IFileOperationResult["FILE_TOO_LARGE"] = "FILE_TOO_LARGE";
    IFileOperationResult["FILE_INVALID_PATH"] = "FILE_INVALID_PATH";
    IFileOperationResult["FILE_EXCEED_MEMORY_LIMIT"] = "FILE_EXCEED_MEMORY_LIMIT";
    IFileOperationResult["FILE_OTHER_ERROR"] = "FILE_OTHER_ERROR";
})(IFileOperationResult = exports.IFileOperationResult || (exports.IFileOperationResult = {}));
;
var IFileSearchStatsType;
(function (IFileSearchStatsType) {
    IFileSearchStatsType["fileIndexProvider"] = "fileIndexProvider";
    IFileSearchStatsType["fileSearchProvider"] = "fileSearchProvider";
    IFileSearchStatsType["searchProcess"] = "searchProcess";
})(IFileSearchStatsType = exports.IFileSearchStatsType || (exports.IFileSearchStatsType = {}));
;
var IFileStateChange;
(function (IFileStateChange) {
    IFileStateChange["DIRTY"] = "DIRTY";
    IFileStateChange["SAVING"] = "SAVING";
    IFileStateChange["SAVE_ERROR"] = "SAVE_ERROR";
    IFileStateChange["SAVED"] = "SAVED";
    IFileStateChange["REVERTED"] = "REVERTED";
    IFileStateChange["ENCODING"] = "ENCODING";
    IFileStateChange["CONTENT_CHANGE"] = "CONTENT_CHANGE";
    IFileStateChange["ORPHANED_CHANGE"] = "ORPHANED_CHANGE";
})(IFileStateChange = exports.IFileStateChange || (exports.IFileStateChange = {}));
;
var IFileType;
(function (IFileType) {
    IFileType["Unknown"] = "Unknown";
    IFileType["File"] = "File";
    IFileType["Directory"] = "Directory";
    IFileType["SymbolicLink"] = "SymbolicLink";
})(IFileType = exports.IFileType || (exports.IFileType = {}));
;
var IGraphqlCallType;
(function (IGraphqlCallType) {
    IGraphqlCallType["mutation"] = "mutation";
    IGraphqlCallType["query"] = "query";
})(IGraphqlCallType = exports.IGraphqlCallType || (exports.IGraphqlCallType = {}));
;
var IHotExitConfiguration;
(function (IHotExitConfiguration) {
    IHotExitConfiguration["OFF"] = "OFF";
    IHotExitConfiguration["ON_EXIT"] = "ON_EXIT";
    IHotExitConfiguration["ON_EXIT_AND_WINDOW_CLOSE"] = "ON_EXIT_AND_WINDOW_CLOSE";
})(IHotExitConfiguration = exports.IHotExitConfiguration || (exports.IHotExitConfiguration = {}));
;
var IKeybindingSource;
(function (IKeybindingSource) {
    IKeybindingSource["Default"] = "Default";
    IKeybindingSource["User"] = "User";
})(IKeybindingSource = exports.IKeybindingSource || (exports.IKeybindingSource = {}));
;
var IMarkupKind;
(function (IMarkupKind) {
    IMarkupKind["plaintext"] = "plaintext";
    IMarkupKind["markdown"] = "markdown";
})(IMarkupKind = exports.IMarkupKind || (exports.IMarkupKind = {}));
;
var IMenuId;
(function (IMenuId) {
    IMenuId["CommandPalette"] = "CommandPalette";
    IMenuId["DebugBreakpointsContext"] = "DebugBreakpointsContext";
    IMenuId["DebugCallStackContext"] = "DebugCallStackContext";
    IMenuId["DebugConsoleContext"] = "DebugConsoleContext";
    IMenuId["DebugVariablesContext"] = "DebugVariablesContext";
    IMenuId["DebugWatchContext"] = "DebugWatchContext";
    IMenuId["DebugTooBar"] = "DebugTooBar";
    IMenuId["EditorContext"] = "EditorContext";
    IMenuId["EditorTitle"] = "EditorTitle";
    IMenuId["EditorTitleContext"] = "EditorTitleContext";
    IMenuId["EmptyEditorGroupContext"] = "EmptyEditorGroupContext";
    IMenuId["ExplorerContext"] = "ExplorerContext";
    IMenuId["MenubarAppearanceMenu"] = "MenubarAppearanceMenu";
    IMenuId["MenubarDebugMenu"] = "MenubarDebugMenu";
    IMenuId["MenubarEditMenu"] = "MenubarEditMenu";
    IMenuId["MenubarFileMenu"] = "MenubarFileMenu";
    IMenuId["MenubarGoMenu"] = "MenubarGoMenu";
    IMenuId["MenubarNewBreakpointMenu"] = "MenubarNewBreakpointMenu";
    IMenuId["MenubarPreferencesMenu"] = "MenubarPreferencesMenu";
    IMenuId["MenubarRecentMenu"] = "MenubarRecentMenu";
    IMenuId["MenubarSelectionMenu"] = "MenubarSelectionMenu";
    IMenuId["MenubarSwitchEditorMenu"] = "MenubarSwitchEditorMenu";
    IMenuId["MenubarSwitchGroupMenu"] = "MenubarSwitchGroupMenu";
    IMenuId["MenubarTerminalMenu"] = "MenubarTerminalMenu";
    IMenuId["MenubarViewMenu"] = "MenubarViewMenu";
    IMenuId["OpenEditorContext"] = "OpenEditorContext";
    IMenuId["ProblemsPanelContext"] = "ProblemsPanelContext";
    IMenuId["SCMChangeContext"] = "SCMChangeContext";
    IMenuId["SCMResourceContext"] = "SCMResourceContext";
    IMenuId["SCMResourceGroupContext"] = "SCMResourceGroupContext";
    IMenuId["SCMResourceControl"] = "SCMResourceControl";
    IMenuId["SCMTitle"] = "SCMTitle";
    IMenuId["SearchContext"] = "SearchContext";
    IMenuId["StatusBarWindowIndicatorMenu"] = "StatusBarWindowIndicatorMenu";
    IMenuId["TouchBarContext"] = "TouchBarContext";
    IMenuId["ViewItemContext"] = "ViewItemContext";
    IMenuId["ViewTitle"] = "ViewTitle";
    IMenuId["CommentThreadTitle"] = "CommentThreadTitle";
    IMenuId["CommentThreadActions"] = "CommentThreadActions";
    IMenuId["CommentTitle"] = "CommentTitle";
    IMenuId["CommentActions"] = "CommentActions";
})(IMenuId = exports.IMenuId || (exports.IMenuId = {}));
;
/**  All Moleculer Topic names are extended from this. */
var IMoleculerServiceName;
(function (IMoleculerServiceName) {
    IMoleculerServiceName["ConfigurationClientService"] = "ConfigurationClientService";
    IMoleculerServiceName["ConfigurationService"] = "ConfigurationService";
    IMoleculerServiceName["EnvironmentService"] = "EnvironmentService";
    IMoleculerServiceName["LifecycleService"] = "LifecycleService";
    IMoleculerServiceName["WorkbenchLifecycleEmitter"] = "WorkbenchLifecycleEmitter";
    IMoleculerServiceName["WorkbenchLifecycleListener"] = "WorkbenchLifecycleListener";
    IMoleculerServiceName["WorkspaceClientContextService"] = "WorkspaceClientContextService";
    IMoleculerServiceName["WorkspaceContextService"] = "WorkspaceContextService";
    IMoleculerServiceName["WorkspaceEventually"] = "WorkspaceEventually";
    /**  Following services will help to wait other services  */
    IMoleculerServiceName["WorkspaceReady"] = "WorkspaceReady";
    IMoleculerServiceName["WorkspaceRestore"] = "WorkspaceRestore";
    IMoleculerServiceName["WorkspaceStarted"] = "WorkspaceStarted";
    IMoleculerServiceName["dummy"] = "dummy";
})(IMoleculerServiceName = exports.IMoleculerServiceName || (exports.IMoleculerServiceName = {}));
;
var INotificationChangeType;
(function (INotificationChangeType) {
    INotificationChangeType["ADD"] = "ADD";
    INotificationChangeType["CHANGE"] = "CHANGE";
    INotificationChangeType["REMOVE"] = "REMOVE";
})(INotificationChangeType = exports.INotificationChangeType || (exports.INotificationChangeType = {}));
;
var INotificationViewItemLabelKind;
(function (INotificationViewItemLabelKind) {
    INotificationViewItemLabelKind["SEVERITY"] = "SEVERITY";
    INotificationViewItemLabelKind["MESSAGE"] = "MESSAGE";
    INotificationViewItemLabelKind["ACTIONS"] = "ACTIONS";
    INotificationViewItemLabelKind["PROGRESS"] = "PROGRESS";
})(INotificationViewItemLabelKind = exports.INotificationViewItemLabelKind || (exports.INotificationViewItemLabelKind = {}));
;
var IOpenContext;
(function (IOpenContext) {
    /** opening when running from the command line */
    IOpenContext["CLI"] = "CLI";
    /** macOS only: opening from the dock (also when opening files to a running instance from desktop) */
    IOpenContext["DOCK"] = "DOCK";
    /** opening from the main application window */
    IOpenContext["MENU"] = "MENU";
    /** opening from a file or folder dialog */
    IOpenContext["DIALOG"] = "DIALOG";
    /** opening from the OS's UI  */
    IOpenContext["DESKTOP"] = "DESKTOP";
    /** opening through the API */
    IOpenContext["API"] = "API";
})(IOpenContext = exports.IOpenContext || (exports.IOpenContext = {}));
;
var IOpenDialogOptionsProperties;
(function (IOpenDialogOptionsProperties) {
    IOpenDialogOptionsProperties["openFile"] = "openFile";
    IOpenDialogOptionsProperties["openDirectory"] = "openDirectory";
    IOpenDialogOptionsProperties["multiSelections"] = "multiSelections";
    IOpenDialogOptionsProperties["showHiddenFiles"] = "showHiddenFiles";
    IOpenDialogOptionsProperties["createDirectory"] = "createDirectory";
    IOpenDialogOptionsProperties["promptToCreate"] = "promptToCreate";
    IOpenDialogOptionsProperties["noResolveAliases"] = "noResolveAliases";
    IOpenDialogOptionsProperties["treatPackageAsDirectory"] = "treatPackageAsDirectory";
})(IOpenDialogOptionsProperties = exports.IOpenDialogOptionsProperties || (exports.IOpenDialogOptionsProperties = {}));
;
var IProvidedRemoteConnectionStates;
(function (IProvidedRemoteConnectionStates) {
    IProvidedRemoteConnectionStates["initializing"] = "initializing";
    IProvidedRemoteConnectionStates["disconnected"] = "disconnected";
    IProvidedRemoteConnectionStates["connected"] = "connected";
})(IProvidedRemoteConnectionStates = exports.IProvidedRemoteConnectionStates || (exports.IProvidedRemoteConnectionStates = {}));
;
var IQueryType;
(function (IQueryType) {
    IQueryType["File"] = "File";
    IQueryType["Text"] = "Text";
})(IQueryType = exports.IQueryType || (exports.IQueryType = {}));
;
var IReadyState;
(function (IReadyState) {
    /** This window has  not loaded any HTML yet */
    IReadyState["NONE"] = "NONE";
    /** This window is loading HTML */
    IReadyState["LOADING"] = "LOADING";
    /** This window is navigating to another HTML */
    IReadyState["NAVIGATING"] = "NAVIGATING";
    /** This window is done loading HTML */
    IReadyState["READY"] = "READY";
})(IReadyState = exports.IReadyState || (exports.IReadyState = {}));
;
var IRunActionInWindowRequestFrom;
(function (IRunActionInWindowRequestFrom) {
    IRunActionInWindowRequestFrom["menu"] = "menu";
    IRunActionInWindowRequestFrom["touchbar"] = "touchbar";
    IRunActionInWindowRequestFrom["mouse"] = "mouse";
})(IRunActionInWindowRequestFrom = exports.IRunActionInWindowRequestFrom || (exports.IRunActionInWindowRequestFrom = {}));
;
var ISaveReason;
(function (ISaveReason) {
    ISaveReason["EXPLICIT"] = "EXPLICIT";
    ISaveReason["AUTO"] = "AUTO";
    ISaveReason["FOCUS_CHANGE"] = "FOCUS_CHANGE";
    ISaveReason["WINDOW_CHANGE"] = "WINDOW_CHANGE";
})(ISaveReason = exports.ISaveReason || (exports.ISaveReason = {}));
;
var IscmProviders;
(function (IscmProviders) {
    IscmProviders["git"] = "git";
})(IscmProviders = exports.IscmProviders || (exports.IscmProviders = {}));
;
var IscmResourceGroups;
(function (IscmResourceGroups) {
    IscmResourceGroups["workingTree"] = "workingTree";
    IscmResourceGroups["merge"] = "merge";
    IscmResourceGroups["index"] = "index";
})(IscmResourceGroups = exports.IscmResourceGroups || (exports.IscmResourceGroups = {}));
;
var ISettingValueType;
(function (ISettingValueType) {
    ISettingValueType["Null"] = "Null";
    ISettingValueType["Enum"] = "Enum";
    ISettingValueType["String"] = "String";
    ISettingValueType["Integer"] = "Integer";
    ISettingValueType["Number"] = "Number";
    ISettingValueType["Boolean"] = "Boolean";
    ISettingValueType["Exclude"] = "Exclude";
    ISettingValueType["Complex"] = "Complex";
    ISettingValueType["NullableInteger"] = "NullableInteger";
    ISettingValueType["NullableNumber"] = "NullableNumber";
})(ISettingValueType = exports.ISettingValueType || (exports.ISettingValueType = {}));
;
var ISTATUSBAR_ITEM_ID;
(function (ISTATUSBAR_ITEM_ID) {
    ISTATUSBAR_ITEM_ID["TERMINAL"] = "TERMINAL";
    ISTATUSBAR_ITEM_ID["SELECTION_STATUS"] = "SELECTION_STATUS";
    ISTATUSBAR_ITEM_ID["INDENTATION_STATUS"] = "INDENTATION_STATUS";
    ISTATUSBAR_ITEM_ID["ENCODING_STATUS"] = "ENCODING_STATUS";
    ISTATUSBAR_ITEM_ID["EOL_STATUS"] = "EOL_STATUS";
    ISTATUSBAR_ITEM_ID["LANGUAGE_MODE_STATUS"] = "LANGUAGE_MODE_STATUS";
    ISTATUSBAR_ITEM_ID["SYNC_STATUS"] = "SYNC_STATUS";
    ISTATUSBAR_ITEM_ID["BRANCH_STATUS"] = "BRANCH_STATUS";
})(ISTATUSBAR_ITEM_ID = exports.ISTATUSBAR_ITEM_ID || (exports.ISTATUSBAR_ITEM_ID = {}));
;
var IStatusbarAlignment;
(function (IStatusbarAlignment) {
    IStatusbarAlignment["LEFT"] = "LEFT";
    IStatusbarAlignment["RIGHT"] = "RIGHT";
})(IStatusbarAlignment = exports.IStatusbarAlignment || (exports.IStatusbarAlignment = {}));
;
var IStorageScope;
(function (IStorageScope) {
    /** The stored data will be scoped to all workspaces of this domain. */
    IStorageScope["GLOBAL"] = "GLOBAL";
    /** The stored data will be scoped to the current workspace. */
    IStorageScope["WORKSPACE"] = "WORKSPACE";
})(IStorageScope = exports.IStorageScope || (exports.IStorageScope = {}));
;
var ITextEditorSelectionRevealType;
(function (ITextEditorSelectionRevealType) {
    /** Option to scroll vertically or horizontally as necessary and reveal a range centered vertically. */
    ITextEditorSelectionRevealType["Center"] = "Center";
    /**
     * Option to scroll vertically or horizontally as necessary and reveal a range
     * centered vertically only if it lies outside the viewport.
     */
    ITextEditorSelectionRevealType["CenterIfOutsideViewport"] = "CenterIfOutsideViewport";
    /**
     * Option to scroll vertically or horizontally as necessary and reveal a range
     * close to the top of the viewport, but not quite at the top.
     */
    ITextEditorSelectionRevealType["NearTop"] = "NearTop";
    /**
     * Option to scroll vertically or horizontally as necessary and reveal a range
     * close to the top of the viewport, but not quite at the top.
     * Only if it lies outside the viewport
     */
    ITextEditorSelectionRevealType["NearTopIfOutsideViewport"] = "NearTopIfOutsideViewport";
})(ITextEditorSelectionRevealType = exports.ITextEditorSelectionRevealType || (exports.ITextEditorSelectionRevealType = {}));
;
var ITextFileOperationResult;
(function (ITextFileOperationResult) {
    ITextFileOperationResult["FILE_IS_BINARY"] = "FILE_IS_BINARY";
})(ITextFileOperationResult = exports.ITextFileOperationResult || (exports.ITextFileOperationResult = {}));
;
var ITextSearchStatsType;
(function (ITextSearchStatsType) {
    ITextSearchStatsType["textSearchProvider"] = "textSearchProvider";
    ITextSearchStatsType["searchProcess"] = "searchProcess";
})(ITextSearchStatsType = exports.ITextSearchStatsType || (exports.ITextSearchStatsType = {}));
;
var ITreeItemCollapsibleState;
(function (ITreeItemCollapsibleState) {
    ITreeItemCollapsibleState["None"] = "None";
    ITreeItemCollapsibleState["Collapsed"] = "Collapsed";
    ITreeItemCollapsibleState["Expanded"] = "Expanded";
})(ITreeItemCollapsibleState = exports.ITreeItemCollapsibleState || (exports.ITreeItemCollapsibleState = {}));
;
var IWorkspaceContextServiceAction;
(function (IWorkspaceContextServiceAction) {
    IWorkspaceContextServiceAction["getWorkspace"] = "getWorkspace";
    IWorkspaceContextServiceAction["onDidChangeWorkbenchState"] = "onDidChangeWorkbenchState";
    IWorkspaceContextServiceAction["onDidChangeWorkspaceName"] = "onDidChangeWorkspaceName";
    IWorkspaceContextServiceAction["onDidChangeWorkspaceFolders"] = "onDidChangeWorkspaceFolders";
    IWorkspaceContextServiceAction["addFolders"] = "addFolders";
    IWorkspaceContextServiceAction["removeFolders"] = "removeFolders";
    IWorkspaceContextServiceAction["updateFolders"] = "updateFolders";
})(IWorkspaceContextServiceAction = exports.IWorkspaceContextServiceAction || (exports.IWorkspaceContextServiceAction = {}));
;
exports.DefaultSettingFragmentDoc = graphql_tag_1.default `
    fragment DefaultSetting on Setting {
  key
  value
  description
  descriptionIsMarkdown
  deprecationMessage
  type
  enum
  enumDescriptions
  enumDescriptionsAreMarkdown
  tags
}
    `;
exports.SettingRangeFragmentDoc = graphql_tag_1.default `
    fragment SettingRange on Range {
  start {
    line
    lineNumber
    column
    character
  }
  end {
    line
    lineNumber
    column
    character
  }
  startLineNumber
  startColumn
  endLineNumber
  endColumn
}
    `;
exports.TerminalConfigurationFragmentDoc = graphql_tag_1.default `
    fragment TerminalConfiguration on Terminal {
  integrated {
    setLocaleVariables
    shell {
      osx
      linux
      windows
      container
    }
    shellArgs {
      container
      windows
      osx
      linux
    }
  }
}
    `;
exports.SearchConfigurationFragmentDoc = graphql_tag_1.default `
    fragment SearchConfiguration on Search {
  location
  smartCase
  useRipgrep
  useIgnoreFiles
  followSymlinks
  globalFindClipboard
  quickOpen {
    includeSymbols
  }
  exclude
}
    `;
exports.LanguagesConfigurationFragmentDoc = graphql_tag_1.default `
    fragment LanguagesConfiguration on Languages {
  go
  css
  html
  json
  yaml
  typescript
  javascript
}
    `;
exports.FilesConfigurationFragmentDoc = graphql_tag_1.default `
    fragment FilesConfiguration on Files {
  eol
  hotExit
  encoding
  autoSave
  autoSaveDelay
  defaultLanguage
  autoGuessEncoding
  insertFinalNewline
  trimTrailingWhitespace
  useExperimentalFileWatcher
  watcherExclude
  exclude
}
    `;
exports.GitConfigurationFragmentDoc = graphql_tag_1.default `
    fragment GitConfiguration on Git {
  path
  enabled
  autofetch
  countBadge
  autorefresh
  confirmSync
  checkoutType
  inputValidation
  detectSubmodules
  enableSmartCommit
  ignoreLimitWarning
  ignoreLegacyWarning
  enableCommitSigning
  defaultCloneDirectory
  autoRepositoryDetection
  ignoreMissingGitWarning
  showInlineOpenFileAction
  promptToSaveFilesBeforeCommit
  decorations {
    enabled
  }
}
    `;
exports.WorkspaceConfigurationFragmentDoc = graphql_tag_1.default `
    fragment WorkspaceConfiguration on WorkspacePreferenceWorkbench {
  colorTheme
  enableExperiments
  fontAliasing
  iconTheme
  startupEditor
  view {
    alwaysShowHeaderActions
  }
  tips {
    enabled
    horizontalScrolling
    indent
    renderIndentGuides
  }
  statusBar {
    visible
  }
  settings {
    editor
    enableNaturalLanguageSearch
    openDefaultKeybindings
    settingsSearchTocBehavior
    useSplitJSON
  }
  quickOpen {
    closeOnFocusLost
    preserveInput
  }
  panel {
    defaultLocation
  }
  list {
    automaticKeyboardNavigation
    horizontalScrolling
    keyboardNavigation
    multiSelectModifier
    openMode
  }
  experimental {
    editorAssociations
  }
  editor {
    centeredLayoutAutoResize
    closeEmptyGroups
    closeOnFileDelete
    enablePreview
    enablePreviewFromQuickOpen
    focusRecentEditorAfterClose
    highlightModifiedTabs
    labelFormat
    openPositioning
    openSideBySideDirection
    restoreViewState
    revealIfOpen
    showIcons
    showTabs
    splitSizing
    tabCloseButton
    tabSizing
  }
  commandPalette {
    history
    preserveInput
  }
  activityBar {
    visible
  }
}
    `;
exports.ViewerSettingsFragmentDoc = graphql_tag_1.default `
    fragment ViewerSettings on SettingsCascade {
  final
  subjects {
    ... on UserSettings {
      id
      settingsURL
      latestSettings {
        contents
        createdAt
      }
      settingsCascade {
        finalConfiguration {
          terminal {
            ...TerminalConfiguration
          }
          search {
            ...SearchConfiguration
          }
          languages {
            ...LanguagesConfiguration
          }
          output {
            maxChannelHistory
          }
          files {
            ...FilesConfiguration
          }
          git {
            ...GitConfiguration
          }
          workspace {
            ...WorkspaceConfiguration
          }
        }
      }
    }
    ... on FolderSettings {
      id
      settingsURL
      latestSettings {
        contents
        createdAt
      }
      settingsCascade {
        finalConfiguration {
          terminal {
            ...TerminalConfiguration
          }
          search {
            ...SearchConfiguration
          }
          languages {
            ...LanguagesConfiguration
          }
          output {
            maxChannelHistory
          }
          files {
            ...FilesConfiguration
          }
          git {
            ...GitConfiguration
          }
          workspace {
            ...WorkspaceConfiguration
          }
        }
      }
    }
    ... on GlobalSettings {
      id
      settingsURL
      latestSettings {
        contents
        createdAt
      }
      settingsCascade {
        finalConfiguration {
          terminal {
            ...TerminalConfiguration
          }
          search {
            ...SearchConfiguration
          }
          languages {
            ...LanguagesConfiguration
          }
          output {
            maxChannelHistory
          }
          files {
            ...FilesConfiguration
          }
          git {
            ...GitConfiguration
          }
          workspace {
            ...WorkspaceConfiguration
          }
        }
      }
    }
  }
}
    ${exports.TerminalConfigurationFragmentDoc}
${exports.SearchConfigurationFragmentDoc}
${exports.LanguagesConfigurationFragmentDoc}
${exports.FilesConfigurationFragmentDoc}
${exports.GitConfigurationFragmentDoc}
${exports.WorkspaceConfigurationFragmentDoc}`;
exports.AllContextFragmentDoc = graphql_tag_1.default `
    fragment AllContext on Context {
  originalResourceScheme
  view
  viewItem
  gitOpenRepositoryCount
  isInDiffEditor
  isInDiffRightEditor
  resourceScheme
  resourceFilename
  resourceLangId
  resource
  resourceExtName
  resourceSet
  isFileSystemResource
  inputFocus
  suggestWidgetVisible
  suggestWidgetMultipleSuggestions
  suggestionMakesTextEdit
  acceptSuggestionOnEnter
  hasOtherSuggestions
  groupFocusedInOpenEditors
  dirtyEditor
  resourceSelectedForCompare
  fileCopied
  breadcrumbsPossible
  breadcrumbsVisible
  breadcrumbsActive
  canNavigateBack
  canNavigateForward
  canNavigateToLastEditLocation
  dirtyDiffVisible
  cancellableOperation
  parameterHintsVisible
  parameterHintsMultipleSignatures
  markdownPreviewFocus
  isMac
  isLinux
  isWindows
  remoteAuthority
  remoteConnectionState
  hasMacNativeTabs
  supportsWorkspaces
  isDevelopment
  workbenchState
  workspaceFolderCount
  remoteFileDialogVisible
  isFullscreen
  atEndOfWord
  scmRepository
  scmProvider
  scmResourceGroup
  inDiffEditorKey
  isDominatedByLongLines
  isWordWrapMinified
  commentThread
  commentThreadisEmpty
  commentIsEmpty
  commentEditorFocused
  interfaceOverviewVisible
  inReferenceSearchEditor
  referenceSearchVisible
  listFocus
  listSupportsMultiSelect
  listHasSelectionOrFocus
  listDoubleSelection
  listMultiSelection
  listSupportsKeyboardNavigation
  WorkbenchListAutomaticKeyboardNavigationKey
  accessibilityHelpWidgetVisible
  inQuickOpenKey
  supportedCodeAction
  hasSymbols
  hasSnippetCompletions
  messageVisible
  editorHasCallHierarchyProvider
  callHierarchyVisible
  searchViewletVisible
  searchViewletFocus
  inputBoxFocus
  searchInputBoxFocus
  replaceInputBoxFocus
  patternIncludesInputBoxFocus
  patternExcludesInputBoxFocus
  replaceActive
  hasSearchResult
  firstMatchFocus
  fileMatchOrMatchFocus
  fileMatchOrFolderMatchFocus
  fileMatchFocus
  folderMatchFocus
  matchFocus
  inRecentFilesPicker
  inWindowsPicker
  findWidgetVisible
  findInputFocussed
  replaceInputFocussed
  editorTextFocus
  editorFocus
  textInputFocus
  editorReadonly
  editorHasSelection
  editorHasMultipleSelections
  editorTabMoveFocus
  isInEmbeddedEditor
  canUndo
  canRedo
  editorLangId
  editorHasCompletionItemProvider
  editorHasCodeActionsProvider
  editorHasDefinitionProvider
  editorHasDeclarationProvider
  editorHasImplementationProvider
  editorHasTypeDefinitionProvider
  editorHasHoverProvider
  editorHadDocumentHighlightProvider
  editorHasDocumentSymbolProvider
  editorHasReferenceProvider
  editorHasRenameProvider
  editorHasSignatureHelpProvider
  editorHasDocumentFormattingProvider
  editorHasDocumentSelectionFormattingProvider
  editorHasMultipleDocumentSelectionFormattingProvider
  activeEditor
  editorIsOpen
  editorPinned
  groupActiveEditorDirty
  groupEditorsCount
  textCompareEditorVisible
  textCompareEditorActive
  activeEditorGroupEmpty
  multipleEditorGroups
  inZenMode
  inCenteredLayout
  splitEditorsVertically
  sideBarVisible
  sideBarFocus
  activeViewlet
  activePanel
  panelFocus
  panelPosition
  debugType
  debugConfigurationType
  debugState
  inDebugMode
  inDebugRepl
  breakpointWidgetVisible
  watchExpressionsFocused
  variablesFocused
  expressionSelected
  breakpointSelected
  callStackItemType
  loadedScriptsSupported
  loadedScriptsItemType
  focusedSessionIsAttach
  stepBackSupported
  restartFrameSupported
  inSettingsEditor
  inSettingsJSONEditor
  inSettingsSearch
  settingsTocRowFocus
  inKeybindings
  inKeybindingsSearch
  keybindingFocus
  explorerViewletVisible
  explorerResourceIsFolder
  explorerResourceReadonly
  explorerResourceIsRoot
  explorerResourceCut
  explorerResourceMoveableToTrash
  filesExplorerFocus
  openEditorsVisible
  openEditorsFocus
  explorerViewletFocus
  terminalIsOpen
  terminalFocus
  terminalTextSelected
  terminalFindWidgetVisible
  terminalFindWidgetInputFocused
  terminalFindWidgetFocused
  webviewFindWidgetVisible
  taskRunning
  referenceSearchTreeFocused
  interactivePlaygroundFocus
  outlineFiltered
  outlineFocused
  problemsViewFocus
  problemFocus
  problemsFilterFocus
  relatedInformationFocus
  inOutput
  activeLogOutput
  multiCursorModifier
  saveConflictResolutionContext
  markersNavigationVisible
  hasWordHighlights
  profileSessionState
  extensionHostProfileRecorded
  historyNavigationEnabled
  historyNavigationWidget
  nonEmptyWorkspace
  defaultExtensionViews
  searchMarketplaceExtensions
  searchInstalledExtensions
  searchOutdatedExtensions
  searchEnabledExtensions
  searchDisabledExtensions
  hasInstalledExtensions
  searchBuiltInExtensions
  recommendedExtensions
  defaultRecommendedExtensions
  workspaceRecommendations
  workspaceFolderRecommendations
  addToWorkspaceRecommendations
  addToWorkspaceFolderRecommendations
}
    `;
exports.FinalConfigurationFragmentDoc = graphql_tag_1.default `
    fragment FinalConfiguration on Configuration {
  terminal {
    ...TerminalConfiguration
  }
  search {
    ...SearchConfiguration
  }
  languages {
    ...LanguagesConfiguration
  }
  output {
    maxChannelHistory
  }
  files {
    ...FilesConfiguration
  }
  git {
    ...GitConfiguration
  }
  workspace {
    ...WorkspaceConfiguration
  }
}
    ${exports.TerminalConfigurationFragmentDoc}
${exports.SearchConfigurationFragmentDoc}
${exports.LanguagesConfigurationFragmentDoc}
${exports.FilesConfigurationFragmentDoc}
${exports.GitConfigurationFragmentDoc}
${exports.WorkspaceConfigurationFragmentDoc}`;
exports.KeybindingItemFragmentDoc = graphql_tag_1.default `
    fragment KeybindingItem on KeybindingItem {
  command
  key
  when
  source
}
    `;
exports.KeybindingsFragmentDoc = graphql_tag_1.default `
    fragment Keybindings on Keybindings {
  items {
    command
    key
    when
    source
  }
}
    `;
exports.pickItemFragmentDoc = graphql_tag_1.default `
    fragment pickItem on QuickPickItem {
  id
  label
  description
  detail
  keybinding {
    command
    key
    when
    source
  }
  italic
  highlights {
    label {
      start
      end
    }
    description {
      start
      end
    }
    detail {
      start
      end
    }
  }
  picked
  alwaysShow
}
    `;
exports.selectedFragmentDoc = graphql_tag_1.default `
    fragment selected on QuickInputModel {
  title
  inputValue
  selectedValue {
    ...pickItem
  }
}
    ${exports.pickItemFragmentDoc}`;
exports.ResourceContextFragmentDoc = graphql_tag_1.default `
    fragment ResourceContext on Context {
  resourceScheme
  resourceFilename
  resource
  resourceExtName
  resourceSet
  isFileSystemResource
}
    `;
exports.statusbarItemFragmentDoc = graphql_tag_1.default `
    fragment statusbarItem on StatusbarItem {
  ... on Terminal {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
  ... on SelectionStatus {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
  ... on Indentation {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
  ... on EncodingStatus {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
  ... on EndOfLineSequence {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
  ... on LanguageMode {
    name
    alignment
    entry {
      showTabsButtons
      showIcons
      showStatusbar
      text
      ariaLabel
      tooltip
      color
      backgroundColor
      command
      arguments
      showBeak
    }
    priority
  }
}
    `;
exports.GetConfigurationDataFragmentDoc = graphql_tag_1.default `
    fragment GetConfigurationData on ConfigurationData {
  defaults {
    contents
    keys
    overrides {
      contents
      identifiers
    }
  }
  user {
    contents
    keys
    overrides {
      contents
      identifiers
    }
  }
  workspace {
    contents
    keys
    overrides {
      contents
      identifiers
    }
  }
  folders {
    id
    keys
    contents
    overrides {
      overrideIdentifier
      resource
    }
  }
}
    `;
exports.INotificationMessageFragmentDoc = graphql_tag_1.default `
    fragment INotificationMessage on NotificationMessage {
  raw
  value
  links {
    name
    href
    offset
    length
  }
}
    `;
exports.NotificationMessageFragmentDoc = graphql_tag_1.default `
    fragment NotificationMessage on NotificationMessage {
  ...INotificationMessage
  original {
    ...INotificationMessage
  }
}
    ${exports.INotificationMessageFragmentDoc}`;
exports.NotifyActionFragmentDoc = graphql_tag_1.default `
    fragment NotifyAction on Action {
  id
  label
  tooltip
  class
  enabled
  checked
  radio
}
    `;
exports.NotificationFragmentDoc = graphql_tag_1.default `
    fragment Notification on Notification {
  index
  severity
  source
  actions {
    primary {
      ...NotifyAction
    }
    secondary {
      ...NotifyAction
    }
  }
  sticky
}
    ${exports.NotifyActionFragmentDoc}`;
exports.WorkspaceFolderFragmentDoc = graphql_tag_1.default `
    fragment WorkspaceFolder on WorkspaceFolderData {
  uri
  name
  index
}
    `;
exports.installDocument = graphql_tag_1.default `
    mutation install($vsix: String!) {
  install(vsix: $vsix) {
    id
    uuid
  }
}
    `;
exports.providerDefinitionDocument = graphql_tag_1.default `
    mutation providerDefinition($params: TextDocumentPositionParamsInput) {
  hoverProviderDefinition(params: $params) @client
}
    `;
exports.removeDocument = graphql_tag_1.default `
    mutation remove($id: String!) {
  removeExtension(id: $id)
}
    `;
exports.ExtensionsByLimitDocument = graphql_tag_1.default `
    query ExtensionsByLimit($first: Int!, $prioritizeExtensionIDs: [String!]!) {
  extensionRegistry {
    extensions(first: $first, prioritizeExtensionIDs: $prioritizeExtensionIDs) {
      nodes {
        id
        url
        extensionID
        viewerCanAdminister
        manifest {
          raw
          name
          activationEvents
        }
      }
    }
  }
}
    `;
exports.ExtensionsDocument = graphql_tag_1.default `
    query Extensions {
  extensions {
    nodes {
      id
      url
      activationEvents
      viewerCanAdminister
      releases {
        version
        bundleURL
        extensionID
      }
      extensionID
      manifest {
        bundleURL
        raw
        name
        main
        badges
        preview
        version
        keywords
        license
        homepage
        publisher
        categories
        description
        extensionID
        displayName
        dependencies
        extensionDependencies
        bundle
        assets {
          Type
          Content
        }
        scripts {
          cdebasebuild
          cdebasepublish
        }
        bundles {
          server
          browser
        }
        extension {
          type
        }
        engines {
          node
          vscode
        }
        author {
          name
        }
        galleryBanner {
          color
          theme
        }
        activationEvents
        contributes {
          menus {
            commandPalette {
              action
              when
            }
            explorer {
              context {
                action
                when
              }
            }
            editor {
              context {
                action
                when
              }
              title {
                own {
                  action
                  when
                }
                context {
                  action
                  when
                }
              }
            }
          }
          actions {
            id
            command
            title
            category
            actionItem {
              label
              description
            }
          }
        }
      }
    }
  }
}
    `;
exports.galleryExtensionDocument = graphql_tag_1.default `
    query galleryExtension($extensionID: String!) {
  galleryExtension(extensionID: $extensionID) {
    id
    name
    icon
    version
    description
    publisher
    installCount
    publisherDisplayName
    rating
    ratingCount
    displayName
    assets {
      download {
        uri
        fallbackUri
      }
    }
    resources {
      icon
      readme
      manifest
      changelog
    }
  }
}
    `;
exports.galleryDocument = graphql_tag_1.default `
    query gallery($query: GalleryQuery) {
  gallery(query: $query) {
    page
    firstPage {
      id
      name
      icon
      version
      description
      publisher
      installCount
      publisherDisplayName
      rating
      ratingCount
      displayName
      assets {
        download {
          uri
          fallbackUri
        }
      }
    }
  }
}
    `;
exports.installedExtensionsDocument = graphql_tag_1.default `
    query installedExtensions {
  installed {
    identifier {
      id
      uuid
    }
    galleryIdentifier {
      id
      uuid
    }
    extension {
      name
      id
      icon
      displayName
      installCount
      description
      version
      identifier {
        id
        uuid
      }
      publisherDisplayName
    }
  }
}
    `;
exports.ViewerSettingsDocument = graphql_tag_1.default `
    query ViewerSettings {
  viewerSettings {
    final
  }
}
    `;
exports.GetConfigurationTargetDocument = graphql_tag_1.default `
    mutation GetConfigurationTarget($resource: URI) {
  getConfigurationTarget(resource: $resource) @client
}
    `;
exports.OpenGlobalKeybindingsSettingsDocument = graphql_tag_1.default `
    mutation OpenGlobalKeybindingsSettings($textual: Boolean) {
  openGlobalKeybindingSettings(textual: $textual) @client
}
    `;
exports.OpenPreferenceSettingsDocument = graphql_tag_1.default `
    mutation OpenPreferenceSettings($jsonEditor: Boolean, $query: String) {
  openPreferenceSettings(jsonEditor: $jsonEditor, query: $query) @client
}
    `;
exports.ResetSettingDocument = graphql_tag_1.default `
    mutation ResetSetting($resource: URI, $settingKey: String) {
  resetSetting(resource: $resource, settingKey: $settingKey) @client
}
    `;
exports.saveUserSettingsDocument = graphql_tag_1.default `
    mutation saveUserSettings($content: String) {
  saveUserSettings(content: $content) {
    id
  }
}
    `;
exports.saveWorkspaceSettingsDocument = graphql_tag_1.default `
    mutation saveWorkspaceSettings {
  saveWorkspaceSettings {
    updated
  }
}
    `;
exports.SwitchSettingsDocument = graphql_tag_1.default `
    mutation SwitchSettings($target: Int, $editorId: Int, $resource: URI, $jsonEditor: Boolean) {
  switchSettings(target: $target, editorId: $editorId, resource: $resource, jsonEditor: $jsonEditor) @client
}
    `;
exports.DefaultPreferencesDocument = graphql_tag_1.default `
    query DefaultPreferences {
  defaultPreferences {
    preferences {
      type
      data {
        name
        type
        default
        description
        enum
        enumDescriptions
      }
    }
  }
}
    `;
exports.DefaultSettingsDocument = graphql_tag_1.default `
    query DefaultSettings($target: Int) {
  defaultViewerSettingsSubject(target: $target) {
    settingsCascade {
      finalConfiguration {
        defaultSetting {
          title
          id
          sections {
            settings {
              ...DefaultSetting
            }
          }
        }
      }
      final
    }
  }
}
    ${exports.DefaultSettingFragmentDoc}`;
exports.FullConfigurationDocument = graphql_tag_1.default `
    query FullConfiguration {
  viewerSettings {
    final
    subjects {
      ... on UserSettings {
        id
        settingsURL
        latestSettings {
          contents
          createdAt
        }
        settingsCascade {
          finalConfiguration {
            terminal {
              ...TerminalConfiguration
            }
            search {
              ...SearchConfiguration
            }
            languages {
              ...LanguagesConfiguration
            }
            output {
              maxChannelHistory
            }
            files {
              ...FilesConfiguration
            }
            git {
              ...GitConfiguration
            }
            workspace {
              ...WorkspaceConfiguration
            }
          }
        }
      }
      ... on FolderSettings {
        id
        settingsURL
        latestSettings {
          contents
          createdAt
        }
        settingsCascade {
          finalConfiguration {
            terminal {
              ...TerminalConfiguration
            }
            search {
              ...SearchConfiguration
            }
            languages {
              ...LanguagesConfiguration
            }
            output {
              maxChannelHistory
            }
            files {
              ...FilesConfiguration
            }
            git {
              ...GitConfiguration
            }
            workspace {
              ...WorkspaceConfiguration
            }
          }
        }
      }
      ... on GlobalSettings {
        id
        settingsURL
        latestSettings {
          contents
          createdAt
        }
        settingsCascade {
          finalConfiguration {
            terminal {
              ...TerminalConfiguration
            }
            search {
              ...SearchConfiguration
            }
            languages {
              ...LanguagesConfiguration
            }
            output {
              maxChannelHistory
            }
            files {
              ...FilesConfiguration
            }
            git {
              ...GitConfiguration
            }
            workspace {
              ...WorkspaceConfiguration
            }
          }
        }
      }
      ... on WorkspaceSettings {
        id
        settingsURL
        latestSettings {
          contents
          createdAt
        }
        settingsCascade {
          finalConfiguration {
            terminal {
              ...TerminalConfiguration
            }
            search {
              ...SearchConfiguration
            }
            languages {
              ...LanguagesConfiguration
            }
            output {
              maxChannelHistory
            }
            files {
              ...FilesConfiguration
            }
            git {
              ...GitConfiguration
            }
            workspace {
              ...WorkspaceConfiguration
            }
          }
        }
      }
    }
  }
}
    ${exports.TerminalConfigurationFragmentDoc}
${exports.SearchConfigurationFragmentDoc}
${exports.LanguagesConfigurationFragmentDoc}
${exports.FilesConfigurationFragmentDoc}
${exports.GitConfigurationFragmentDoc}
${exports.WorkspaceConfigurationFragmentDoc}`;
exports.GetMostCommonlyUsedSettingsDocument = graphql_tag_1.default `
    query GetMostCommonlyUsedSettings {
  getMostCommonlyUsedSettings @client
}
    `;
exports.WorkspacesDocument = graphql_tag_1.default `
    query Workspaces {
  workspaces {
    uri
  }
}
    `;
exports.UpdateConfigurationValueDocument = graphql_tag_1.default `
    mutation UpdateConfigurationValue($key: String!, $value: AnyObject!, $overrides: ConfigurationOverrides_Input!, $target: Int, $donotNotifyError: Boolean) {
  updateConfigurationValue(key: $key, value: $value, overrides: $overrides, target: $target, donotNotifyError: $donotNotifyError)
}
    `;
exports.CopyDocument = graphql_tag_1.default `
    mutation Copy($value: String) {
  copy(value: $value) @client
}
    `;
exports.RunMenuActionDocument = graphql_tag_1.default `
    mutation RunMenuAction($argument: ActionRun_input) {
  runMenuAction(argument: $argument) @client
}
    `;
exports.HideContextMenuDocument = graphql_tag_1.default `
    mutation HideContextMenu {
  hideContextMenu @client
}
    `;
exports.ShowContextMenuDocument = graphql_tag_1.default `
    mutation ShowContextMenu($delegate: ContextMenu_input) {
  showContextMenu(delegate: $delegate) @client
}
    `;
exports.CloseDialogDocument = graphql_tag_1.default `
    mutation CloseDialog {
  closeDialog @client
}
    `;
exports.ShowDocument = graphql_tag_1.default `
    mutation Show($dialog: Dialog_input) {
  show(dialog: $dialog) @client
}
    `;
exports.OpenEditorResourceInputDocument = graphql_tag_1.default `
    mutation OpenEditorResourceInput($editor: Resource_Input!, $group: Int) {
  openEditorWithResourceInput(editor: $editor, group: $group) @client
}
    `;
exports.OpenEditorDocument = graphql_tag_1.default `
    mutation OpenEditor($content: OpenEditor_Input!, $options: EditorOpenOptions_Input) {
  openEditor(content: $content, options: $options) @client
}
    `;
exports.GoToLineDocument = graphql_tag_1.default `
    mutation GoToLine($range: LineRange_input) {
  gotoLine(range: $range) @client
}
    `;
exports.HighlightLineDocument = graphql_tag_1.default `
    mutation HighlightLine($range: LineRange_input) {
  highlightLine(range: $range) @client
}
    `;
exports.JsonEditingWriteDocument = graphql_tag_1.default `
    mutation JsonEditingWrite($resource: URI, $value: IJSONValue_input, $save: Boolean) {
  jsonWrite(resource: $resource, value: $value, save: $save)
}
    `;
exports.ChangeKeybindingDocument = graphql_tag_1.default `
    mutation ChangeKeybinding($editItem: KeybindingItem_input, $selectedIndex: Int, $isOpenDialog: Boolean) {
  changeKeybinding(editItem: $editItem, selectedIndex: $selectedIndex, isOpenDialog: $isOpenDialog) @client
}
    `;
exports.ChangeWhenExpressionDocument = graphql_tag_1.default `
    mutation ChangeWhenExpression($editItem: KeybindingItem_input, $editWhenIndex: Int, $newWhen: String) {
  changeWhenExpression(editItem: $editItem, editWhenIndex: $editWhenIndex, newWhen: $newWhen) @client
}
    `;
exports.EditKeybindingDocument = graphql_tag_1.default `
    mutation EditKeybinding($keybindingItem: KeybindingItem_input, $key: String, $when: String) {
  editKeybinding(keybindingItem: $keybindingItem, key: $key, when: $when) @client
}
    `;
exports.HideKeybindingDialogDocument = graphql_tag_1.default `
    mutation HideKeybindingDialog {
  hideKeybindingDialog @client
}
    `;
exports.LookupKeybindingDocument = graphql_tag_1.default `
    mutation LookupKeybinding($commandId: String) {
  lookupKeybinding(commandId: $commandId) @client
}
    `;
exports.registerKeybindingDocument = graphql_tag_1.default `
    mutation registerKeybinding($keybinding: Keybinding_input) {
  registerKeybinding(keybinding: $keybinding) @client
}
    `;
exports.RemoveKeybindingDocument = graphql_tag_1.default `
    mutation RemoveKeybinding($keybindingItem: KeybindingItem_input) {
  removeKeybinding(keybindingItem: $keybindingItem) @client
}
    `;
exports.ResetKeybindingDocument = graphql_tag_1.default `
    mutation ResetKeybinding($keybindingItem: KeybindingItem_input) {
  resetKeybinding(keybindingItem: $keybindingItem) @client
}
    `;
exports.ResolveKeyboardEventDocument = graphql_tag_1.default `
    mutation ResolveKeyboardEvent($keyboardEvent: KeyboardEvent_input) {
  resolveKeyboardEvent(keyboardEvent: $keyboardEvent) @client {
    label
    key
  }
}
    `;
exports.SearchKeybindingDocument = graphql_tag_1.default `
    mutation SearchKeybinding($value: String) {
  searchKeybinding(value: $value) @client
}
    `;
exports.SetSelectedKeybindingIndexDocument = graphql_tag_1.default `
    mutation SetSelectedKeybindingIndex($index: Int) {
  setSelectedKeybindingIndex(index: $index) @client
}
    `;
exports.StopEditWhenExpressionDocument = graphql_tag_1.default `
    mutation StopEditWhenExpression {
  stopEditWhenExpression @client
}
    `;
exports.AddNotificationDocument = graphql_tag_1.default `
    mutation AddNotification($notification: Notification_input) {
  addNotification(notification: $notification) @client
}
    `;
exports.CloseNotificationDocument = graphql_tag_1.default `
    mutation CloseNotification($index: Int) {
  closeNotification(index: $index) @client
}
    `;
exports.HandlerDocument = graphql_tag_1.default `
    mutation Handler($arg: ActionRun_input) {
  handler(arg: $arg) @client
}
    `;
exports.OpenEditorFileDocument = graphql_tag_1.default `
    mutation OpenEditorFile($content: OpenEditor_Input!, $options: EditorOpenOptions_Input) {
  openFile(content: $content, options: $options) @client
}
    `;
exports.HideInputModelDocument = graphql_tag_1.default `
    mutation HideInputModel {
  hideInputModel @client
}
    `;
exports.SetSelectedDocument = graphql_tag_1.default `
    mutation SetSelected($selectedValue: [PickItem], $inputValue: String) {
  setSelected(selectedValue: $selectedValue, inputValue: $inputValue) @client
}
    `;
exports.ShowInputDocument = graphql_tag_1.default `
    mutation ShowInput($options: InputOptions) {
  showInput(options: $options) @client
}
    `;
exports.ShowPickInputDocument = graphql_tag_1.default `
    mutation ShowPickInput($items: [PickItem], $options: PickInputOptions) {
  showPickInput(items: $items, options: $options) @client
}
    `;
exports.AddEntryDocument = graphql_tag_1.default `
    mutation AddEntry($arg: AddEntry_input) {
  addEntry(arg: $arg) @client
}
    `;
exports.RemoveStatusbarEntryDocument = graphql_tag_1.default `
    mutation RemoveStatusbarEntry($id: ID!) {
  removeStatusbarEntry(id: $id) @client
}
    `;
exports.SetStatusMessageDocument = graphql_tag_1.default `
    mutation SetStatusMessage($arg: SetStatusMsg_input) {
  setStatusMessage(arg: $arg) @client
}
    `;
exports.UpdateStatusbarEntryDocument = graphql_tag_1.default `
    mutation UpdateStatusbarEntry($arg: UpdateEntry_input) {
  updateStatusbarEntry(arg: $arg) @client
}
    `;
exports.AddFoldersDocument = graphql_tag_1.default `
    mutation AddFolders($folders: [Folder_input], $index: Int) {
  addFolders(folders: $folders, index: $index) @client
}
    `;
exports.ChangeWorkspaceDocument = graphql_tag_1.default `
    mutation ChangeWorkspace($args: Args_input) {
  changeWorkspace(args: $args) @client
}
    `;
exports.RemoveFoldersDocument = graphql_tag_1.default `
    mutation RemoveFolders($folders: [URI]) {
  removeFolders(folders: $folders) @client
}
    `;
exports.UpdateFoldersDocument = graphql_tag_1.default `
    mutation UpdateFolders($foldersToAdd: [Folder_input], $foldersToRemove: [URI], $index: Int) {
  updateFolders(foldersToAdd: $foldersToAdd, foldersToRemove: $foldersToRemove, index: $index) @client
}
    `;
exports.FinalConfiguration_WSDocument = graphql_tag_1.default `
    query FinalConfiguration_WS {
  viewerSettings {
    finalConfiguration {
      ...FinalConfiguration
    }
  }
}
    ${exports.FinalConfigurationFragmentDoc}`;
exports.GetContextDocument = graphql_tag_1.default `
    query GetContext {
  getContextData @client {
    ...AllContext
  }
}
    ${exports.AllContextFragmentDoc}`;
exports.ContextMenuDocument = graphql_tag_1.default `
    query ContextMenu {
  contextMenu @client {
    id
    isShow
    anchor {
      x
      y
      height
      width
    }
    menuItems {
      id
      label
      enabled
      run {
        type
        document
        variables
      }
    }
  }
}
    `;
exports.DialogDocument = graphql_tag_1.default `
    query Dialog {
  dialog @client {
    dialogType
    detail {
      inputName
      inputType {
        type
        options
      }
      label
      placeholder
      defaultValue
      required
    }
    primaryButton {
      label
      run {
        type
        document
        variables
      }
    }
    secondaryButton
    checkbox {
      label
      checked
    }
  }
}
    `;
exports.showDialogDocument = graphql_tag_1.default `
    query showDialog($dialog: Dialog_input) {
  showDialog(dialog: $dialog) @client {
    confirmed
    checkboxChecked
  }
}
    `;
exports.GoToLineQuickAccessDocument = graphql_tag_1.default `
    query GoToLineQuickAccess {
  gotoLineQuickAccess @client {
    range {
      startLine
      startColumn
      endLine
      endColumn
    }
    highlight
    focus
  }
}
    `;
exports.GetKeybindingsDocument = graphql_tag_1.default `
    query GetKeybindings {
  getKeybindings @client {
    items {
      command
      key
      when
      source
    }
  }
}
    `;
exports.KeybindingContextMenuDocument = graphql_tag_1.default `
    query KeybindingContextMenu {
  keybindingContextMenu @client {
    editItem {
      command
      key
      when
      isDefault
    }
    selectedItemIndex
    editWhenIndex
    newWhen
    isOpenDialog
    search
  }
}
    `;
exports.KeybindingsDocument = graphql_tag_1.default `
    query Keybindings {
  keybindings @client {
    items {
      command
      key
      when
      source
    }
  }
}
    `;
exports.NotificationsDocument = graphql_tag_1.default `
    query Notifications {
  notifications @client {
    notifications {
      index
      severity
      message
      actions {
        primary {
          id
          label
          tooltip
          class
          enabled
          checked
          radio
          run {
            type
            document
            variables
          }
        }
        secondary {
          id
          label
          tooltip
          class
          enabled
          checked
          radio
          run {
            type
            document
            variables
          }
        }
      }
      sticky
    }
  }
}
    `;
exports.showNotificationDocument = graphql_tag_1.default `
    query showNotification($notification: Notification_input) {
  showNotification(notification: $notification) @client
}
    `;
exports.GetSelectedValueDocument = graphql_tag_1.default `
    query GetSelectedValue {
  quickInputModel @client {
    title
    selectedValue {
      ...pickItem
    }
    inputValue
  }
}
    ${exports.pickItemFragmentDoc}`;
exports.QuickInputModelDocument = graphql_tag_1.default `
    query QuickInputModel {
  quickInputModel @client {
    show
    input {
      title
      description
      enabled
      ignoreFocusOut
      value
      placeholder
      prompt
      validationMessage
    }
    quickPick {
      placeholder
      canSelectMany
      autoFocusOnList
      items {
        ...pickItem
      }
      activeItem {
        ...pickItem
      }
      selectedItems {
        ...pickItem
      }
    }
  }
}
    ${exports.pickItemFragmentDoc}`;
exports.StatusbarDocument = graphql_tag_1.default `
    query Statusbar {
  statusbar @client {
    items {
      ... on Terminal {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on SelectionStatus {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on Indentation {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on EncodingStatus {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on EndOfLineSequence {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on LanguageMode {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on SyncStatus {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
      ... on BranchStatus {
        id
        name
        alignment
        priority
        typeId
        entry {
          showTabsButtons
          showIcons
          showStatusbar
          text
          ariaLabel
          tooltip
          color
          backgroundColor
          command
          arguments
          showBeak
        }
      }
    }
  }
}
    `;
exports.StatusbarItemDocument = graphql_tag_1.default `
    query StatusbarItem($id: String) {
  statusbarItem(id: $id) @client {
    ... on Terminal {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on SelectionStatus {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on Indentation {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on EncodingStatus {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on EndOfLineSequence {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on LanguageMode {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on SyncStatus {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
    ... on BranchStatus {
      id
      name
      alignment
      priority
      typeId
      entry {
        showTabsButtons
        showIcons
        showStatusbar
        text
        ariaLabel
        tooltip
        color
        backgroundColor
        command
        arguments
        showBeak
      }
    }
  }
}
    `;
exports.GetViewsDocument = graphql_tag_1.default `
    query GetViews($containerId: String!) {
  getViews(containerId: $containerId) @client {
    id
    name
  }
}
    `;
exports.GetWorkspaceDocument = graphql_tag_1.default `
    query GetWorkspace {
  getWorkspace {
    id
    folders {
      uri
      name
      index
    }
    name
    configuration
  }
}
    `;
exports.NotifyErrorDocument = graphql_tag_1.default `
    mutation NotifyError($message: [NotificationMessage_input]) {
  notifyError(message: $message)
}
    `;
exports.NotifyInfoDocument = graphql_tag_1.default `
    mutation NotifyInfo($message: [NotificationMessage_input]) {
  notifyInfo(message: $message)
}
    `;
exports.NotifyPromptDocument = graphql_tag_1.default `
    mutation NotifyPrompt($severity: NotificationSeverity, $message: String, $choices: [PromptChoice_input], $options: PromptOptions_input) {
  notifyPrompt(severity: $severity, message: $message, choices: $choices, options: $options)
}
    `;
exports.NotifyWarnDocument = graphql_tag_1.default `
    mutation NotifyWarn($message: [NotificationMessage_input]) {
  notifyWarn(message: $message)
}
    `;
exports.NotifyDocument = graphql_tag_1.default `
    mutation Notify($notification: Notification_input) {
  notify(notification: $notification)
}
    `;
exports.UpdateWorkspaceContextAddFoldersDocument = graphql_tag_1.default `
    mutation UpdateWorkspaceContextAddFolders($foldersToAdd: [FoldersToAdd_Input], $index: Int) {
  updateWorkspaceContextAddFolders(foldersToAdd: $foldersToAdd, index: $index) {
    uri
    name
    index
  }
}
    `;
exports.UpdateWorkspaceContextRemoveFoldersDocument = graphql_tag_1.default `
    mutation UpdateWorkspaceContextRemoveFolders($foldersToRemove: [URI]) {
  updateWorkspaceContextRemoveFolders(foldersToRemove: $foldersToRemove) {
    uri
    name
    index
  }
}
    `;
exports.UpdateWorkspaceContextUpdateFoldersDocument = graphql_tag_1.default `
    mutation UpdateWorkspaceContextUpdateFolders($foldersToAdd: [FoldersToAdd_Input], $foldersToRemove: [URI], $index: Int) {
  updateWorkspaceContextUpdateFolders(foldersToAdd: $foldersToAdd, foldersToRemove: $foldersToRemove, index: $index) {
    uri
    name
    index
  }
}
    `;
exports.GetConfiguration_WSDocument = graphql_tag_1.default `
    query GetConfiguration_WS {
  getConfigurationData {
    ...GetConfigurationData
  }
}
    ${exports.GetConfigurationDataFragmentDoc}`;
exports.GetEnvironment_WSDocument = graphql_tag_1.default `
    query GetEnvironment_WS {
  getEnvironment {
    execPath
    cliPath
    appRoot
    userHome
    userDataPath
    appNameLong
    appQuality
    appSettingsHome
    appSettingsPath
    appKeybindingsPath
    settingsSearchBuildId
    settingsSearchUrl
    globalStorageHome
    workspaceStorageHome
    backupHome
    backupWorkspacesPath
    workspacesHome
    workspaceSettingsPath
    isExtensionDevelopment
    disableExtensions
    builtinExtensionsPath
    extensionsPath
    extensionDevelopmentLocationURI
    extensionTestsPath
    debugExtensionHost {
      port
      break
      debugId
    }
    logExtensionHostCommunication
    isBuilt
    wait
    status
    performance
    logsPath
    log
    verbose
    logLevel
    skipGettingStarted
    skipReleaseNotes
    skipAddToRecentlyOpened
    nodeCachedDataDir
    installSourcePath
    disableUpdates
    disableCrashReporter
    driverHandle
    driverVerbose
  }
}
    `;
exports.GetWorkspace_WSDocument = graphql_tag_1.default `
    query GetWorkspace_WS {
  getWorkspace {
    id
    folders {
      ...WorkspaceFolder
    }
    name
    configuration
  }
}
    ${exports.WorkspaceFolderFragmentDoc}`;
exports.GetWorkspaceValue_WSDocument = graphql_tag_1.default `
    query GetWorkspaceValue_WS($value: WorkspaceValue_Input) {
  getWorkspaceValue(value: $value)
}
    `;
exports.AddServerNotificationDocument = graphql_tag_1.default `
    mutation AddServerNotification($notification: Notification_input) {
  addNotification(notification: $notification)
}
    `;
exports.GetWorkspaceFolderContextDocument = graphql_tag_1.default `
    query GetWorkspaceFolderContext($arg: Arg_Input) {
  getWorkspaceFolderContext(arg: $arg) {
    id
    folders {
      ...WorkspaceFolder
    }
    configuration
  }
}
    ${exports.WorkspaceFolderFragmentDoc}`;
exports.CodeLenseProviderDefinitionDocument = graphql_tag_1.default `
    mutation CodeLenseProviderDefinition($params: TextDocumentPositionParamsInput) {
  codeLenseProviderDefinition(params: $params) @client
}
    `;
exports.CompletionProviderDefinitionDocument = graphql_tag_1.default `
    mutation CompletionProviderDefinition($params: TextDocumentPositionParamsInput) {
  completionProviderDefinition(params: $params) @client
}
    `;
exports.DefinitionDefinitionDocument = graphql_tag_1.default `
    mutation DefinitionDefinition($params: TextDocumentPositionParamsInput) {
  definitionDefinition(params: $params) @client
}
    `;
exports.DocumentHighLightProviderDefinitionDocument = graphql_tag_1.default `
    mutation DocumentHighLightProviderDefinition($params: TextDocumentPositionParamsInput) {
  documentHighLightProviderDefinition(params: $params) @client
}
    `;
exports.DocumentFormattingProviderDefinitionDocument = graphql_tag_1.default `
    mutation DocumentFormattingProviderDefinition($params: TextDocumentPositionParamsInput) {
  documentFormattingProviderDefinition(params: $params) @client
}
    `;
exports.HoverProviderDefinitionDocument = graphql_tag_1.default `
    mutation HoverProviderDefinition($params: TextDocumentPositionParamsInput) {
  hoverProviderDefinition(params: $params) @client
}
    `;
exports.OpenLanguageDocumentDocument = graphql_tag_1.default `
    mutation OpenLanguageDocument($document: OpenDocumentParamsInput) {
  openLanguageDocument(params: $document) @client
}
    `;
exports.ReferenceProviderDefinitionDocument = graphql_tag_1.default `
    mutation ReferenceProviderDefinition($params: TextDocumentPositionParamsInput) {
  referenceProviderDefinition(params: $params) @client
}
    `;
exports.RenameDefinitionDocument = graphql_tag_1.default `
    mutation RenameDefinition($params: TextDocumentPositionParamsInput) {
  renameDefinition(params: $params) @client
}
    `;
exports.DocumentSymbolDefinitionDocument = graphql_tag_1.default `
    mutation DocumentSymbolDefinition($params: TextDocumentPositionParamsInput) {
  documentSymbolDefinition(params: $params) @client
}
    `;
exports.UpdateModelDocument = graphql_tag_1.default `
    mutation UpdateModel($model: IModelInput) {
  updateModel(model: $model) @client
}
    `;
//# sourceMappingURL=generated-model.js.map
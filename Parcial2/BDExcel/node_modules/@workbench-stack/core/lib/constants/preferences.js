"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SETTINGS_EDITOR_RESET_SETTING = exports.SETTINGS_EDITOR_COPY_ID = exports.SETTINGS_EDITOR_COPY_SETTING = exports.KEYBINDINGS_EDITOR_COMMAND_DEFINE = exports.KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN = exports.KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR = exports.KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND = exports.KEYBINDINGS_EDITOR_COMMAND_COPY = exports.KEYBINDINGS_EDITOR_COMMAND_RESET = exports.KEYBINDINGS_EDITOR_COMMAND_REMOVE = exports.USE_SPLIT_JSON_SETTING = exports.DEFAULT_SETTINGS_EDITOR_SETTING = void 0;
// export const FOLDER_SETTINGS_PATH = '.cdecode/settings.json'; // already included workspace.ts
exports.DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';
exports.USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';
exports.KEYBINDINGS_EDITOR_COMMAND_REMOVE = 'keybindings.editor.removeKeybinding';
exports.KEYBINDINGS_EDITOR_COMMAND_RESET = 'keybindings.editor.resetKeybinding';
exports.KEYBINDINGS_EDITOR_COMMAND_COPY = 'keybindings.editor.copyKeybindingEntry';
exports.KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND = 'keybindings.editor.copyCommandKeybindingEntry';
exports.KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR = 'keybindings.editor.showConflicts';
exports.KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN = 'keybindings.editor.defineWhenExpression';
exports.KEYBINDINGS_EDITOR_COMMAND_DEFINE = 'keybindings.editor.defineKeybinding';
exports.SETTINGS_EDITOR_COPY_SETTING = 'settings.editor.copySettingJSON';
exports.SETTINGS_EDITOR_COPY_ID = 'settings.editor.copySettingID';
exports.SETTINGS_EDITOR_RESET_SETTING = 'settings.editor.resetSetting';
//# sourceMappingURL=preferences.js.map
import { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from './gdprTypings';
export declare const ITelemetryService: import("../../instantiation/common/instantiation").ServiceIdentifier<ITelemetryService>;
export interface ITelemetryInfo {
    sessionId: string;
    machineId: string;
    instanceId: string;
    msftInternal?: boolean;
}
export interface ITelemetryData {
    from?: string;
    target?: string;
    [key: string]: any;
}
export interface ITelemetryService {
    /**
     * Whether error telemetry will get sent. If false, `publicLogError` will no-op.
     */
    readonly sendErrorTelemetry: boolean;
    readonly _serviceBrand: undefined;
    /**
     * Sends a telemetry event that has been privacy approved.
     * Do not call this unless you have been given approval.
     */
    publicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<void>;
    publicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>, anonymizeFilePaths?: boolean): Promise<void>;
    publicLogError(errorEventName: string, data?: ITelemetryData): Promise<void>;
    publicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>): Promise<void>;
    setEnabled(value: boolean): void;
    getTelemetryInfo(): Promise<ITelemetryInfo>;
    setExperimentProperty(name: string, value: string): void;
    isOptedIn: boolean;
}
export declare const instanceStorageKey = "telemetry.instanceId";
export declare const currentSessionDateStorageKey = "telemetry.currentSessionDate";
export declare const firstSessionDateStorageKey = "telemetry.firstSessionDate";
export declare const lastSessionDateStorageKey = "telemetry.lastSessionDate";
export declare const machineIdKey = "telemetry.machineId";

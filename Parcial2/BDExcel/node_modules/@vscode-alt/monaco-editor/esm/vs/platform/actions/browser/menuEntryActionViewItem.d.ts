import { IAction } from '../../../base/common/actions';
import { IDisposable } from '../../../base/common/lifecycle';
import { IMenu, IMenuActionOptions, MenuItemAction, SubmenuItemAction } from '../common/actions';
import { IContextMenuService } from '../../contextview/browser/contextView';
import { IKeybindingService } from '../../keybinding/common/keybinding';
import { INotificationService } from '../../notification/common/notification';
import { ActionViewItem } from '../../../base/browser/ui/actionbar/actionViewItems';
import { DropdownMenuActionViewItem } from '../../../base/browser/ui/dropdown/dropdownActionViewItem';
export declare function createAndFillInContextMenuActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | {
    primary: IAction[];
    secondary: IAction[];
}, isPrimaryGroup?: (group: string) => boolean): IDisposable;
export declare function createAndFillInActionBarActions(menu: IMenu, options: IMenuActionOptions | undefined, target: IAction[] | {
    primary: IAction[];
    secondary: IAction[];
}, isPrimaryGroup?: (group: string) => boolean): IDisposable;
export declare class MenuEntryActionViewItem extends ActionViewItem {
    readonly _action: MenuItemAction;
    protected readonly _keybindingService: IKeybindingService;
    protected _notificationService: INotificationService;
    private _wantsAltCommand;
    private readonly _itemClassDispose;
    private readonly _altKey;
    constructor(_action: MenuItemAction, _keybindingService: IKeybindingService, _notificationService: INotificationService);
    protected get _commandAction(): IAction;
    onClick(event: MouseEvent): void;
    render(container: HTMLElement): void;
    updateLabel(): void;
    updateTooltip(): void;
    updateClass(): void;
    private _updateItemClass;
}
export declare class SubmenuEntryActionViewItem extends DropdownMenuActionViewItem {
    constructor(action: SubmenuItemAction, _notificationService: INotificationService, _contextMenuService: IContextMenuService);
}

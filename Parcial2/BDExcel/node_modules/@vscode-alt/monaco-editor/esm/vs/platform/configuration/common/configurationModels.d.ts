import { ResourceMap } from '../../../base/common/map';
import { URI } from '../../../base/common/uri';
import { ConfigurationScope } from './configurationRegistry';
import { IOverrides, IConfigurationModel, IConfigurationOverrides, IConfigurationData, IConfigurationValue, ConfigurationTarget, IConfigurationChangeEvent, IConfigurationChange } from './configuration';
import { Workspace } from '../../workspace/common/workspace';
import { Disposable } from '../../../base/common/lifecycle';
import { Emitter, Event } from '../../../base/common/event';
import { IFileService } from '../../files/common/files';
export declare class ConfigurationModel implements IConfigurationModel {
    private _contents;
    private _keys;
    private _overrides;
    private isFrozen;
    constructor(_contents?: any, _keys?: string[], _overrides?: IOverrides[]);
    get contents(): any;
    get overrides(): IOverrides[];
    get keys(): string[];
    isEmpty(): boolean;
    getValue<V>(section: string | undefined): V;
    getOverrideValue<V>(section: string | undefined, overrideIdentifier: string): V | undefined;
    getKeysForOverrideIdentifier(identifier: string): string[];
    override(identifier: string): ConfigurationModel;
    merge(...others: ConfigurationModel[]): ConfigurationModel;
    freeze(): ConfigurationModel;
    private mergeContents;
    private checkAndFreeze;
    private getContentsForOverrideIdentifer;
    toJSON(): IConfigurationModel;
    setValue(key: string, value: any): void;
    removeValue(key: string): void;
    private addKey;
    private removeKey;
}
export declare class DefaultConfigurationModel extends ConfigurationModel {
    constructor();
}
export declare class ConfigurationModelParser {
    protected readonly _name: string;
    private _scopes?;
    private _raw;
    private _configurationModel;
    private _parseErrors;
    constructor(_name: string, _scopes?: ConfigurationScope[] | undefined);
    get configurationModel(): ConfigurationModel;
    get errors(): any[];
    parseContent(content: string | null | undefined): void;
    parseRaw(raw: any): void;
    parse(): void;
    protected doParseContent(content: string): any;
    protected doParseRaw(raw: any): IConfigurationModel;
    private filterByScope;
    private getScope;
}
export declare class UserSettings extends Disposable {
    private readonly userSettingsResource;
    private readonly scopes;
    private readonly fileService;
    private readonly parser;
    protected readonly _onDidChange: Emitter<void>;
    readonly onDidChange: Event<void>;
    constructor(userSettingsResource: URI, scopes: ConfigurationScope[] | undefined, fileService: IFileService);
    loadConfiguration(): Promise<ConfigurationModel>;
    reprocess(): ConfigurationModel;
}
export declare class Configuration {
    private _defaultConfiguration;
    private _localUserConfiguration;
    private _remoteUserConfiguration;
    private _workspaceConfiguration;
    private _folderConfigurations;
    private _memoryConfiguration;
    private _memoryConfigurationByResource;
    private _freeze;
    private _workspaceConsolidatedConfiguration;
    private _foldersConsolidatedConfigurations;
    constructor(_defaultConfiguration: ConfigurationModel, _localUserConfiguration: ConfigurationModel, _remoteUserConfiguration?: ConfigurationModel, _workspaceConfiguration?: ConfigurationModel, _folderConfigurations?: ResourceMap<ConfigurationModel>, _memoryConfiguration?: ConfigurationModel, _memoryConfigurationByResource?: ResourceMap<ConfigurationModel>, _freeze?: boolean);
    getValue(section: string | undefined, overrides: IConfigurationOverrides, workspace: Workspace | undefined): any;
    updateValue(key: string, value: any, overrides?: IConfigurationOverrides): void;
    inspect<C>(key: string, overrides: IConfigurationOverrides, workspace: Workspace | undefined): IConfigurationValue<C>;
    keys(workspace: Workspace | undefined): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    updateDefaultConfiguration(defaultConfiguration: ConfigurationModel): void;
    updateLocalUserConfiguration(localUserConfiguration: ConfigurationModel): void;
    updateRemoteUserConfiguration(remoteUserConfiguration: ConfigurationModel): void;
    updateWorkspaceConfiguration(workspaceConfiguration: ConfigurationModel): void;
    updateFolderConfiguration(resource: URI, configuration: ConfigurationModel): void;
    deleteFolderConfiguration(resource: URI): void;
    compareAndUpdateDefaultConfiguration(defaults: ConfigurationModel, keys: string[]): IConfigurationChange;
    compareAndUpdateLocalUserConfiguration(user: ConfigurationModel): IConfigurationChange;
    compareAndUpdateRemoteUserConfiguration(user: ConfigurationModel): IConfigurationChange;
    compareAndUpdateWorkspaceConfiguration(workspaceConfiguration: ConfigurationModel): IConfigurationChange;
    compareAndUpdateFolderConfiguration(resource: URI, folderConfiguration: ConfigurationModel): IConfigurationChange;
    compareAndDeleteFolderConfiguration(folder: URI): IConfigurationChange;
    get defaults(): ConfigurationModel;
    private _userConfiguration;
    get userConfiguration(): ConfigurationModel;
    get localUserConfiguration(): ConfigurationModel;
    get remoteUserConfiguration(): ConfigurationModel;
    get workspaceConfiguration(): ConfigurationModel;
    protected get folderConfigurations(): ResourceMap<ConfigurationModel>;
    private getConsolidateConfigurationModel;
    private getConsolidatedConfigurationModelForResource;
    private getWorkspaceConsolidatedConfiguration;
    private getFolderConsolidatedConfiguration;
    private getFolderConfigurationModelForResource;
    toData(): IConfigurationData;
    allKeys(): string[];
    protected getAllKeysForOverrideIdentifier(overrideIdentifier: string): string[];
    static parse(data: IConfigurationData): Configuration;
    private static parseConfigurationModel;
}
export declare function mergeChanges(...changes: IConfigurationChange[]): IConfigurationChange;
export declare class ConfigurationChangeEvent implements IConfigurationChangeEvent {
    readonly change: IConfigurationChange;
    private readonly previous;
    private readonly currentConfiguraiton;
    private readonly currentWorkspace?;
    private readonly affectedKeysTree;
    readonly affectedKeys: string[];
    source: ConfigurationTarget;
    sourceConfig: any;
    constructor(change: IConfigurationChange, previous: {
        workspace?: Workspace;
        data: IConfigurationData;
    } | undefined, currentConfiguraiton: Configuration, currentWorkspace?: Workspace | undefined);
    private _previousConfiguration;
    get previousConfiguration(): Configuration | undefined;
    affectsConfiguration(section: string, overrides?: IConfigurationOverrides): boolean;
    private doesAffectedKeysTreeContains;
}
export declare class AllKeysConfigurationChangeEvent extends ConfigurationChangeEvent {
    source: ConfigurationTarget;
    sourceConfig: any;
    constructor(configuration: Configuration, workspace: Workspace, source: ConfigurationTarget, sourceConfig: any);
}

import { IWorkspaceFolder, IWorkspace } from '../../workspace/common/workspace';
import { URI, UriComponents } from '../../../base/common/uri';
import { ILogService } from '../../log/common/log';
import { Event } from '../../../base/common/event';
import { IEnvironmentService } from '../../environment/common/environment';
export declare const WORKSPACE_EXTENSION = "code-workspace";
export declare const WORKSPACE_FILTER: {
    name: string;
    extensions: string[];
}[];
export declare const UNTITLED_WORKSPACE_NAME = "workspace.json";
export declare const IWorkspacesService: import("../../instantiation/common/instantiation").ServiceIdentifier<IWorkspacesService>;
export interface IWorkspacesService {
    readonly _serviceBrand: undefined;
    enterWorkspace(path: URI): Promise<IEnterWorkspaceResult | null>;
    createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier>;
    deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;
    getWorkspaceIdentifier(workspacePath: URI): Promise<IWorkspaceIdentifier>;
    readonly onRecentlyOpenedChange: Event<void>;
    addRecentlyOpened(recents: IRecent[]): Promise<void>;
    removeRecentlyOpened(workspaces: URI[]): Promise<void>;
    clearRecentlyOpened(): Promise<void>;
    getRecentlyOpened(): Promise<IRecentlyOpened>;
    getDirtyWorkspaces(): Promise<Array<IWorkspaceIdentifier | URI>>;
}
export interface IRecentlyOpened {
    workspaces: Array<IRecentWorkspace | IRecentFolder>;
    files: IRecentFile[];
}
export declare type IRecent = IRecentWorkspace | IRecentFolder | IRecentFile;
export interface IRecentWorkspace {
    workspace: IWorkspaceIdentifier;
    label?: string;
}
export interface IRecentFolder {
    folderUri: ISingleFolderWorkspaceIdentifier;
    label?: string;
}
export interface IRecentFile {
    fileUri: URI;
    label?: string;
}
export declare function isRecentWorkspace(curr: IRecent): curr is IRecentWorkspace;
export declare function isRecentFolder(curr: IRecent): curr is IRecentFolder;
export declare function isRecentFile(curr: IRecent): curr is IRecentFile;
/**
 * A single folder workspace identifier is just the path to the folder.
 */
export declare type ISingleFolderWorkspaceIdentifier = URI;
export interface IWorkspaceIdentifier {
    id: string;
    configPath: URI;
}
export declare function reviveWorkspaceIdentifier(workspace: {
    id: string;
    configPath: UriComponents;
}): IWorkspaceIdentifier;
export declare function isStoredWorkspaceFolder(thing: unknown): thing is IStoredWorkspaceFolder;
export declare function isRawFileWorkspaceFolder(thing: any): thing is IRawFileWorkspaceFolder;
export declare function isRawUriWorkspaceFolder(thing: any): thing is IRawUriWorkspaceFolder;
export interface IRawFileWorkspaceFolder {
    path: string;
    name?: string;
}
export interface IRawUriWorkspaceFolder {
    uri: string;
    name?: string;
}
export declare type IStoredWorkspaceFolder = IRawFileWorkspaceFolder | IRawUriWorkspaceFolder;
export interface IResolvedWorkspace extends IWorkspaceIdentifier {
    folders: IWorkspaceFolder[];
    remoteAuthority?: string;
}
export interface IStoredWorkspace {
    folders: IStoredWorkspaceFolder[];
    remoteAuthority?: string;
}
export interface IWorkspaceFolderCreationData {
    uri: URI;
    name?: string;
}
export interface IUntitledWorkspaceInfo {
    workspace: IWorkspaceIdentifier;
    remoteAuthority?: string;
}
export interface IEnterWorkspaceResult {
    workspace: IWorkspaceIdentifier;
    backupPath?: string;
}
export declare function isSingleFolderWorkspaceIdentifier(obj: unknown): obj is ISingleFolderWorkspaceIdentifier;
export declare function isWorkspaceIdentifier(obj: unknown): obj is IWorkspaceIdentifier;
export declare function toWorkspaceIdentifier(workspace: IWorkspace): IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;
export declare function isUntitledWorkspace(path: URI, environmentService: IEnvironmentService): boolean;
export declare type IMultiFolderWorkspaceInitializationPayload = IWorkspaceIdentifier;
export interface ISingleFolderWorkspaceInitializationPayload {
    id: string;
    folder: ISingleFolderWorkspaceIdentifier;
}
export interface IEmptyWorkspaceInitializationPayload {
    id: string;
}
export declare type IWorkspaceInitializationPayload = IMultiFolderWorkspaceInitializationPayload | ISingleFolderWorkspaceInitializationPayload | IEmptyWorkspaceInitializationPayload;
export declare function isSingleFolderWorkspaceInitializationPayload(obj: any): obj is ISingleFolderWorkspaceInitializationPayload;
export declare function hasWorkspaceFileExtension(path: string | URI): boolean;
/**
 * Given a folder URI and the workspace config folder, computes the IStoredWorkspaceFolder using
* a relative or absolute path or a uri.
 * Undefined is returned if the folderURI and the targetConfigFolderURI don't have the same schema or authority
 *
 * @param folderURI a workspace folder
 * @param forceAbsolute if set, keep the path absolute
 * @param folderName a workspace name
 * @param targetConfigFolderURI the folder where the workspace is living in
 * @param useSlashForPath if set, use forward slashes for file paths on windows
 */
export declare function getStoredWorkspaceFolder(folderURI: URI, forceAbsolute: boolean, folderName: string | undefined, targetConfigFolderURI: URI, useSlashForPath?: boolean): IStoredWorkspaceFolder;
/**
 * Rewrites the content of a workspace file to be saved at a new location.
 * Throws an exception if file is not a valid workspace file
 */
export declare function rewriteWorkspaceFileForNewLocation(rawWorkspaceContents: string, configPathURI: URI, isFromUntitledWorkspace: boolean, targetConfigPathURI: URI): string;
export declare function useSlashForPath(storedFolders: IStoredWorkspaceFolder[]): boolean;
export declare type RecentlyOpenedStorageData = object;
export declare function restoreRecentlyOpened(data: RecentlyOpenedStorageData | undefined, logService: ILogService): IRecentlyOpened;
export declare function toStoreData(recents: IRecentlyOpened): RecentlyOpenedStorageData;

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { networkInterfaces } from 'os';
const invalidMacAddresses = new Set([
    '00:00:00:00:00:00',
    'ff:ff:ff:ff:ff:ff',
    'ac:de:48:00:11:22'
]);
function validateMacAddress(candidate) {
    const tempCandidate = candidate.replace(/\-/g, ':').toLowerCase();
    return !invalidMacAddresses.has(tempCandidate);
}
export function getMac() {
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        const timeout = setTimeout(() => reject('Unable to retrieve mac address (timeout after 10s)'), 10000);
        try {
            resolve(yield doGetMac());
        }
        catch (error) {
            reject(error);
        }
        finally {
            clearTimeout(timeout);
        }
    }));
}
function doGetMac() {
    return new Promise((resolve, reject) => {
        try {
            const ifaces = networkInterfaces();
            for (const [, infos] of Object.entries(ifaces)) {
                for (const info of infos) {
                    if (validateMacAddress(info.mac)) {
                        return resolve(info.mac);
                    }
                }
            }
            reject('Unable to retrieve mac address (unexpected format)');
        }
        catch (err) {
            reject(err);
        }
    });
}

/// <reference types="node" />
import * as cp from 'child_process';
import * as Platform from '../common/platform';
import { CommandOptions, ForkOptions, SuccessData, Source, TerminateResponse, TerminateResponseCode, Executable } from '../common/processes';
export { CommandOptions, ForkOptions, SuccessData, Source, TerminateResponse, TerminateResponseCode };
export declare type ValueCallback<T> = (value: T | Promise<T>) => void;
export declare type ErrorCallback = (error?: any) => void;
export declare type ProgressCallback<T> = (progress: T) => void;
export interface LineData {
    line: string;
    source: Source;
}
export declare function getWindowsShell(environment?: Platform.IProcessEnvironment): string;
export declare abstract class AbstractProcess<TProgressData> {
    private cmd;
    private args;
    private options;
    protected shell: boolean;
    private childProcess;
    protected childProcessPromise: Promise<cp.ChildProcess> | null;
    private pidResolve;
    protected terminateRequested: boolean;
    private static WellKnowCommands;
    constructor(executable: Executable);
    constructor(cmd: string, args: string[] | undefined, shell: boolean, options: CommandOptions | undefined);
    getSanitizedCommand(): string;
    start(pp: ProgressCallback<TProgressData>): Promise<SuccessData>;
    protected abstract handleExec(cc: ValueCallback<SuccessData>, pp: ProgressCallback<TProgressData>, error: Error | null, stdout: Buffer, stderr: Buffer): void;
    protected abstract handleSpawn(childProcess: cp.ChildProcess, cc: ValueCallback<SuccessData>, pp: ProgressCallback<TProgressData>, ee: ErrorCallback, sync: boolean): void;
    protected handleClose(data: any, cc: ValueCallback<SuccessData>, pp: ProgressCallback<TProgressData>, ee: ErrorCallback): void;
    private static readonly regexp;
    private ensureQuotes;
    get pid(): Promise<number>;
    terminate(): Promise<TerminateResponse>;
    private useExec;
}
export declare class LineProcess extends AbstractProcess<LineData> {
    private stdoutLineDecoder;
    private stderrLineDecoder;
    constructor(executable: Executable);
    constructor(cmd: string, args: string[], shell: boolean, options: CommandOptions);
    protected handleExec(cc: ValueCallback<SuccessData>, pp: ProgressCallback<LineData>, error: Error, stdout: Buffer, stderr: Buffer): void;
    protected handleSpawn(childProcess: cp.ChildProcess, cc: ValueCallback<SuccessData>, pp: ProgressCallback<LineData>, ee: ErrorCallback, sync: boolean): void;
    protected handleClose(data: any, cc: ValueCallback<SuccessData>, pp: ProgressCallback<LineData>, ee: ErrorCallback): void;
}
export interface IQueuedSender {
    send: (msg: any) => void;
}
export declare function createQueuedSender(childProcess: cp.ChildProcess): IQueuedSender;
export declare namespace win32 {
    function findExecutable(command: string, cwd?: string, paths?: string[]): Promise<string>;
}

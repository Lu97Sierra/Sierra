import './splitview.css';
import { Disposable } from '../../../common/lifecycle';
import { Event } from '../../../common/event';
import { Sash, Orientation } from '../sash/sash';
import { Color } from '../../../common/color';
export { Orientation } from '../sash/sash';
export interface ISplitViewStyles {
    separatorBorder: Color;
}
export interface ISplitViewOptions<TLayoutContext = undefined> {
    readonly orientation?: Orientation;
    readonly styles?: ISplitViewStyles;
    readonly orthogonalStartSash?: Sash;
    readonly orthogonalEndSash?: Sash;
    readonly inverseAltBehavior?: boolean;
    readonly proportionalLayout?: boolean;
    readonly descriptor?: ISplitViewDescriptor<TLayoutContext>;
}
/**
 * Only used when `proportionalLayout` is false.
 */
export declare const enum LayoutPriority {
    Normal = 0,
    Low = 1,
    High = 2
}
export interface IView<TLayoutContext = undefined> {
    readonly element: HTMLElement;
    readonly minimumSize: number;
    readonly maximumSize: number;
    readonly onDidChange: Event<number | undefined>;
    readonly priority?: LayoutPriority;
    readonly snap?: boolean;
    layout(size: number, offset: number, context: TLayoutContext | undefined): void;
    setVisible?(visible: boolean): void;
}
export declare type DistributeSizing = {
    type: 'distribute';
};
export declare type SplitSizing = {
    type: 'split';
    index: number;
};
export declare type InvisibleSizing = {
    type: 'invisible';
    cachedVisibleSize: number;
};
export declare type Sizing = DistributeSizing | SplitSizing | InvisibleSizing;
export declare namespace Sizing {
    const Distribute: DistributeSizing;
    function Split(index: number): SplitSizing;
    function Invisible(cachedVisibleSize: number): InvisibleSizing;
}
export interface ISplitViewDescriptor<TLayoutContext> {
    size: number;
    views: {
        visible?: boolean;
        size: number;
        view: IView<TLayoutContext>;
    }[];
}
export declare class SplitView<TLayoutContext = undefined> extends Disposable {
    readonly orientation: Orientation;
    readonly el: HTMLElement;
    private sashContainer;
    private viewContainer;
    private scrollable;
    private scrollableElement;
    private size;
    private layoutContext;
    private contentSize;
    private proportions;
    private viewItems;
    private sashItems;
    private sashDragState;
    private state;
    private inverseAltBehavior;
    private proportionalLayout;
    private _onDidSashChange;
    readonly onDidSashChange: Event<number>;
    private _onDidSashReset;
    readonly onDidSashReset: Event<number>;
    get length(): number;
    get minimumSize(): number;
    get maximumSize(): number;
    private _orthogonalStartSash;
    get orthogonalStartSash(): Sash | undefined;
    set orthogonalStartSash(sash: Sash | undefined);
    private _orthogonalEndSash;
    get orthogonalEndSash(): Sash | undefined;
    set orthogonalEndSash(sash: Sash | undefined);
    get sashes(): Sash[];
    private _startSnappingEnabled;
    get startSnappingEnabled(): boolean;
    set startSnappingEnabled(startSnappingEnabled: boolean);
    private _endSnappingEnabled;
    get endSnappingEnabled(): boolean;
    set endSnappingEnabled(endSnappingEnabled: boolean);
    constructor(container: HTMLElement, options?: ISplitViewOptions<TLayoutContext>);
    style(styles: ISplitViewStyles): void;
    addView(view: IView<TLayoutContext>, size: number | Sizing, index?: number, skipLayout?: boolean): void;
    removeView(index: number, sizing?: Sizing): IView<TLayoutContext>;
    moveView(from: number, to: number): void;
    swapViews(from: number, to: number): void;
    isViewVisible(index: number): boolean;
    setViewVisible(index: number, visible: boolean): void;
    getViewCachedVisibleSize(index: number): number | undefined;
    layout(size: number, layoutContext?: TLayoutContext): void;
    private saveProportions;
    private onSashStart;
    private onSashChange;
    private onSashEnd;
    private onViewChange;
    resizeView(index: number, size: number): void;
    distributeViewSizes(): void;
    getViewSize(index: number): number;
    private doAddView;
    private relayout;
    private resize;
    private distributeEmptySpace;
    private layoutViews;
    private updateScrollableElement;
    private updateSashEnablement;
    private getSashPosition;
    private findFirstSnapIndex;
    dispose(): void;
}

export declare class FastDomNode<T extends HTMLElement> {
    readonly domNode: T;
    private _maxWidth;
    private _width;
    private _height;
    private _top;
    private _left;
    private _bottom;
    private _right;
    private _fontFamily;
    private _fontWeight;
    private _fontSize;
    private _fontFeatureSettings;
    private _lineHeight;
    private _letterSpacing;
    private _className;
    private _display;
    private _position;
    private _visibility;
    private _backgroundColor;
    private _layerHint;
    private _contain;
    private _boxShadow;
    constructor(domNode: T);
    setMaxWidth(maxWidth: number): void;
    setWidth(width: number): void;
    setHeight(height: number): void;
    setTop(top: number): void;
    unsetTop(): void;
    setLeft(left: number): void;
    setBottom(bottom: number): void;
    setRight(right: number): void;
    setFontFamily(fontFamily: string): void;
    setFontWeight(fontWeight: string): void;
    setFontSize(fontSize: number): void;
    setFontFeatureSettings(fontFeatureSettings: string): void;
    setLineHeight(lineHeight: number): void;
    setLetterSpacing(letterSpacing: number): void;
    setClassName(className: string): void;
    toggleClassName(className: string, shouldHaveIt?: boolean): void;
    setDisplay(display: string): void;
    setPosition(position: string): void;
    setVisibility(visibility: string): void;
    setBackgroundColor(backgroundColor: string): void;
    setLayerHinting(layerHint: boolean): void;
    setBoxShadow(boxShadow: string): void;
    setContain(contain: 'none' | 'strict' | 'content' | 'size' | 'layout' | 'style' | 'paint'): void;
    setAttribute(name: string, value: string): void;
    removeAttribute(name: string): void;
    appendChild(child: FastDomNode<T>): void;
    removeChild(child: FastDomNode<T>): void;
}
export declare function createFastDomNode<T extends HTMLElement>(domNode: T): FastDomNode<T>;

import { IDisposable, Disposable } from './lifecycle';
import { Event, Emitter } from './event';
export interface ITelemetryData {
    readonly from?: string;
    readonly target?: string;
    [key: string]: any;
}
export declare type WorkbenchActionExecutedClassification = {
    id: {
        classification: 'SystemMetaData';
        purpose: 'FeatureInsight';
    };
    from: {
        classification: 'SystemMetaData';
        purpose: 'FeatureInsight';
    };
};
export declare type WorkbenchActionExecutedEvent = {
    id: string;
    from: string;
};
export interface IAction extends IDisposable {
    readonly id: string;
    label: string;
    tooltip: string;
    class: string | undefined;
    enabled: boolean;
    checked: boolean;
    run(event?: any): Promise<any>;
}
export interface IActionRunner extends IDisposable {
    run(action: IAction, context?: any): Promise<any>;
    readonly onDidRun: Event<IRunEvent>;
    readonly onBeforeRun: Event<IRunEvent>;
}
export interface IActionViewItem extends IDisposable {
    actionRunner: IActionRunner;
    setActionContext(context: any): void;
    render(element: any): void;
    isEnabled(): boolean;
    focus(fromRight?: boolean): void;
    blur(): void;
}
export interface IActionViewItemProvider {
    (action: IAction): IActionViewItem | undefined;
}
export interface IActionChangeEvent {
    readonly label?: string;
    readonly tooltip?: string;
    readonly class?: string;
    readonly enabled?: boolean;
    readonly checked?: boolean;
}
export declare class Action extends Disposable implements IAction {
    protected _onDidChange: Emitter<IActionChangeEvent>;
    readonly onDidChange: Event<IActionChangeEvent>;
    protected readonly _id: string;
    protected _label: string;
    protected _tooltip: string | undefined;
    protected _cssClass: string | undefined;
    protected _enabled: boolean;
    protected _checked: boolean;
    protected readonly _actionCallback?: (event?: any) => Promise<any>;
    constructor(id: string, label?: string, cssClass?: string, enabled?: boolean, actionCallback?: (event?: any) => Promise<any>);
    get id(): string;
    get label(): string;
    set label(value: string);
    private _setLabel;
    get tooltip(): string;
    set tooltip(value: string);
    protected _setTooltip(value: string): void;
    get class(): string | undefined;
    set class(value: string | undefined);
    protected _setClass(value: string | undefined): void;
    get enabled(): boolean;
    set enabled(value: boolean);
    protected _setEnabled(value: boolean): void;
    get checked(): boolean;
    set checked(value: boolean);
    protected _setChecked(value: boolean): void;
    run(event?: any, _data?: ITelemetryData): Promise<any>;
}
export interface IRunEvent {
    readonly action: IAction;
    readonly result?: any;
    readonly error?: any;
}
export declare class ActionRunner extends Disposable implements IActionRunner {
    private _onBeforeRun;
    readonly onBeforeRun: Event<IRunEvent>;
    private _onDidRun;
    readonly onDidRun: Event<IRunEvent>;
    run(action: IAction, context?: any): Promise<any>;
    protected runAction(action: IAction, context?: any): Promise<any>;
}
export declare class RadioGroup extends Disposable {
    readonly actions: Action[];
    constructor(actions: Action[]);
}
export declare class Separator extends Action {
    static readonly ID = "vs.actions.separator";
    constructor(label?: string);
}
export declare class ActionWithMenuAction extends Action {
    private _actions;
    get actions(): IAction[];
    constructor(id: string, _actions: IAction[], label?: string, cssClass?: string, enabled?: boolean, actionCallback?: (event?: any) => Promise<any>);
}
export declare class SubmenuAction extends Action {
    private _actions;
    get actions(): IAction[];
    constructor(id: string, label: string, _actions: IAction[], cssClass?: string);
}
export declare class EmptySubmenuAction extends Action {
    static readonly ID = "vs.actions.empty";
    constructor();
}

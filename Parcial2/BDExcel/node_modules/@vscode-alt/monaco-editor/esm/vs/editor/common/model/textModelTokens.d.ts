import { IRange } from '../core/range';
import { IState } from '../modes';
import { TextModel } from './textModel';
import { Disposable } from '../../../base/common/lifecycle';
export declare class TokenizationStateStore {
    private _beginState;
    private _valid;
    private _len;
    private _invalidLineStartIndex;
    constructor();
    private _reset;
    flush(initialState: IState | null): void;
    get invalidLineStartIndex(): number;
    private _invalidateLine;
    private _isValid;
    getBeginState(lineIndex: number): IState | null;
    private _ensureLine;
    private _deleteLines;
    private _insertLines;
    private _setValid;
    private _setBeginState;
    setEndState(linesLength: number, lineIndex: number, endState: IState): void;
    setFakeTokens(lineIndex: number): void;
    applyEdits(range: IRange, eolCount: number): void;
    private _acceptDeleteRange;
    private _acceptInsertText;
}
export declare class TextModelTokenization extends Disposable {
    private readonly _textModel;
    private readonly _tokenizationStateStore;
    private _isDisposed;
    private _tokenizationSupport;
    constructor(textModel: TextModel);
    dispose(): void;
    private _resetTokenizationState;
    private _beginBackgroundTokenization;
    private _revalidateTokensNow;
    tokenizeViewport(startLineNumber: number, endLineNumber: number): void;
    reset(): void;
    forceTokenization(lineNumber: number): void;
    isCheapToTokenize(lineNumber: number): boolean;
    private _hasLinesToTokenize;
    private _tokenizeOneInvalidLine;
    private _updateTokensUntilLine;
    private _tokenizeViewport;
}

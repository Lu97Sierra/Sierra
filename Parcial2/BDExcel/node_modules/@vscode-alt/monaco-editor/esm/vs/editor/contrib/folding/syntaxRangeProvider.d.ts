import { FoldingRangeProvider, FoldingRange } from '../../common/modes';
import { ITextModel } from '../../common/model';
import { RangeProvider } from './folding';
import { FoldingRegions } from './foldingRanges';
import { CancellationToken } from '../../../base/common/cancellation';
import { DisposableStore } from '../../../base/common/lifecycle';
export interface IFoldingRangeData extends FoldingRange {
    rank: number;
}
export declare const ID_SYNTAX_PROVIDER = "syntax";
export declare class SyntaxRangeProvider implements RangeProvider {
    private readonly editorModel;
    private providers;
    private limit;
    readonly id = "syntax";
    readonly disposables: DisposableStore | undefined;
    constructor(editorModel: ITextModel, providers: FoldingRangeProvider[], handleFoldingRangesChange: () => void, limit?: number);
    compute(cancellationToken: CancellationToken): Promise<FoldingRegions | null>;
    dispose(): void;
}
export declare class RangesCollector {
    private readonly _startIndexes;
    private readonly _endIndexes;
    private readonly _nestingLevels;
    private readonly _nestingLevelCounts;
    private readonly _types;
    private _length;
    private readonly _foldingRangesLimit;
    constructor(foldingRangesLimit: number);
    add(startLineNumber: number, endLineNumber: number, type: string | undefined, nestingLevel: number): void;
    toIndentRanges(): FoldingRegions;
}
export declare function sanitizeRanges(rangeData: IFoldingRangeData[], limit: number): FoldingRegions;

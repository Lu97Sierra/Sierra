import { TokenizationResult, TokenizationResult2 } from '../../../common/core/token';
import * as modes from '../../../common/modes';
import { IModeService } from '../../../common/services/modeService';
import * as monarchCommon from './monarchCommon';
import { IStandaloneThemeService } from '../standaloneThemeService';
export declare type ILoadStatus = {
    loaded: true;
} | {
    loaded: false;
    promise: Promise<void>;
};
export declare class MonarchTokenizer implements modes.ITokenizationSupport {
    private readonly _modeService;
    private readonly _standaloneThemeService;
    private readonly _modeId;
    private readonly _lexer;
    private readonly _embeddedModes;
    embeddedLoaded: Promise<void>;
    private readonly _tokenizationRegistryListener;
    constructor(modeService: IModeService, standaloneThemeService: IStandaloneThemeService, modeId: string, lexer: monarchCommon.ILexer);
    dispose(): void;
    getLoadStatus(): ILoadStatus;
    getInitialState(): modes.IState;
    tokenize(line: string, lineState: modes.IState, offsetDelta: number): TokenizationResult;
    tokenize2(line: string, lineState: modes.IState, offsetDelta: number): TokenizationResult2;
    private _tokenize;
    private _findLeavingNestedModeOffset;
    private _nestedTokenize;
    private _safeRuleName;
    private _myTokenize;
    private _getNestedEmbeddedModeData;
    private _locateMode;
}
export declare function createTokenizationSupport(modeService: IModeService, standaloneThemeService: IStandaloneThemeService, modeId: string, lexer: monarchCommon.ILexer): modes.ITokenizationSupport;

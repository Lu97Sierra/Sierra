import { IMarkdownString } from '../../../base/common/htmlContent';
import { MarkdownRenderOptions, MarkedOptions } from '../../../base/browser/markdownRenderer';
import { IOpenerService } from '../../../platform/opener/common/opener';
import { IModeService } from '../../common/services/modeService';
import { ICodeEditor } from '../editorBrowser';
import { IDisposable, DisposableStore } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
export interface IMarkdownRenderResult extends IDisposable {
    element: HTMLElement;
}
export interface IMarkdownRendererOptions {
    editor?: ICodeEditor;
    baseUrl?: URI;
    codeBlockFontFamily?: string;
}
/**
 * Markdown renderer that can render codeblocks with the editor mechanics. This
 * renderer should always be preferred.
 */
export declare class MarkdownRenderer {
    private readonly _options;
    private readonly _modeService;
    private readonly _openerService;
    private static _ttpTokenizer;
    private readonly _onDidRenderAsync;
    readonly onDidRenderAsync: import("../../../base/common/event").Event<void>;
    constructor(_options: IMarkdownRendererOptions, _modeService: IModeService, _openerService: IOpenerService);
    dispose(): void;
    render(markdown: IMarkdownString | undefined, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): IMarkdownRenderResult;
    protected _getRenderOptions(disposeables: DisposableStore): MarkdownRenderOptions;
}

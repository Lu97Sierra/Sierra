import { CancellationToken } from '../../../base/common/cancellation';
import { IDisposable } from '../../../base/common/lifecycle';
import { Range } from '../../common/core/range';
import { Selection } from '../../common/core/selection';
import { ITextModel } from '../../common/model';
import * as modes from '../../common/modes';
import { CodeActionTrigger } from './types';
import { IProgress } from '../../../platform/progress/common/progress';
export declare const codeActionCommandId = "editor.action.codeAction";
export declare const refactorCommandId = "editor.action.refactor";
export declare const sourceActionCommandId = "editor.action.sourceAction";
export declare const organizeImportsCommandId = "editor.action.organizeImports";
export declare const fixAllCommandId = "editor.action.fixAll";
export declare class CodeActionItem {
    readonly action: modes.CodeAction;
    readonly provider: modes.CodeActionProvider | undefined;
    constructor(action: modes.CodeAction, provider: modes.CodeActionProvider | undefined);
    resolve(token: CancellationToken): Promise<this>;
}
export interface CodeActionSet extends IDisposable {
    readonly validActions: readonly CodeActionItem[];
    readonly allActions: readonly CodeActionItem[];
    readonly hasAutoFix: boolean;
    readonly documentation: readonly modes.Command[];
}
export declare function getCodeActions(model: ITextModel, rangeOrSelection: Range | Selection, trigger: CodeActionTrigger, progress: IProgress<modes.CodeActionProvider>, token: CancellationToken): Promise<CodeActionSet>;

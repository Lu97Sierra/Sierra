import { CancellationToken } from '../../../base/common/cancellation';
import { ICodeEditor, IActiveCodeEditor } from '../../browser/editorBrowser';
import { EditorAction, IActionOptions, ServicesAccessor } from '../../browser/editorExtensions';
import * as corePosition from '../../common/core/position';
import { ITextModel, IWordAtPosition } from '../../common/model';
import { ReferencesModel } from './referencesModel';
import { GoToLocationValues } from '../../common/config/editorOptions';
export interface SymbolNavigationActionConfig {
    openToSide: boolean;
    openInPeek: boolean;
    muteMessage: boolean;
}
declare abstract class SymbolNavigationAction extends EditorAction {
    private readonly _configuration;
    constructor(configuration: SymbolNavigationActionConfig, opts: IActionOptions);
    run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void>;
    protected abstract _getLocationModel(model: ITextModel, position: corePosition.Position, token: CancellationToken): Promise<ReferencesModel | undefined>;
    protected abstract _getNoResultFoundMessage(info: IWordAtPosition | null): string;
    protected abstract _getAlternativeCommand(editor: IActiveCodeEditor): string;
    protected abstract _getGoToPreference(editor: IActiveCodeEditor): GoToLocationValues;
    private _onResult;
    private _openReference;
    private _openInPeek;
}
export declare class DefinitionAction extends SymbolNavigationAction {
    protected _getLocationModel(model: ITextModel, position: corePosition.Position, token: CancellationToken): Promise<ReferencesModel>;
    protected _getNoResultFoundMessage(info: IWordAtPosition | null): string;
    protected _getAlternativeCommand(editor: IActiveCodeEditor): string;
    protected _getGoToPreference(editor: IActiveCodeEditor): GoToLocationValues;
}
export {};

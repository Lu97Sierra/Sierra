import { ITextModel, IModelDecorationOptions, IModelDeltaDecoration, IModelDecorationsChangeAccessor } from '../../common/model';
import { Event } from '../../../base/common/event';
import { FoldingRegions, ILineRange, FoldingRegion } from './foldingRanges';
export interface IDecorationProvider {
    getDecorationOption(isCollapsed: boolean, isHidden: boolean): IModelDecorationOptions;
    deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];
    changeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null;
}
export interface FoldingModelChangeEvent {
    model: FoldingModel;
    collapseStateChanged?: FoldingRegion[];
}
export declare type CollapseMemento = ILineRange[];
export declare class FoldingModel {
    private readonly _textModel;
    private readonly _decorationProvider;
    private _regions;
    private _editorDecorationIds;
    private _isInitialized;
    private readonly _updateEventEmitter;
    readonly onDidChange: Event<FoldingModelChangeEvent>;
    get regions(): FoldingRegions;
    get textModel(): ITextModel;
    get isInitialized(): boolean;
    get decorationProvider(): IDecorationProvider;
    constructor(textModel: ITextModel, decorationProvider: IDecorationProvider);
    toggleCollapseState(toggledRegions: FoldingRegion[]): void;
    update(newRegions: FoldingRegions, blockedLineNumers?: number[]): void;
    /**
     * Collapse state memento, for persistence only
     */
    getMemento(): CollapseMemento | undefined;
    /**
     * Apply persisted state, for persistence only
     */
    applyMemento(state: CollapseMemento): void;
    dispose(): void;
    getAllRegionsAtLine(lineNumber: number, filter?: (r: FoldingRegion, level: number) => boolean): FoldingRegion[];
    getRegionAtLine(lineNumber: number): FoldingRegion | null;
    getRegionsInside(region: FoldingRegion | null, filter?: RegionFilter | RegionFilterWithLevel): FoldingRegion[];
}
declare type RegionFilter = (r: FoldingRegion) => boolean;
declare type RegionFilterWithLevel = (r: FoldingRegion, level: number) => boolean;
/**
 * Collapse or expand the regions at the given locations
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */
export declare function toggleCollapseState(foldingModel: FoldingModel, levels: number, lineNumbers: number[]): void;
/**
 * Collapse or expand the regions at the given locations including all children.
 * @param doCollapse Wheter to collase or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand, or if not set, all regions in the model.
 */
export declare function setCollapseStateLevelsDown(foldingModel: FoldingModel, doCollapse: boolean, levels?: number, lineNumbers?: number[]): void;
/**
 * Collapse or expand the regions at the given locations including all parents.
 * @param doCollapse Wheter to collase or expand
 * @param levels The number of levels. Use 1 to only impact the regions at the location, use Number.MAX_VALUE for all levels.
 * @param lineNumbers the location of the regions to collapse or expand.
 */
export declare function setCollapseStateLevelsUp(foldingModel: FoldingModel, doCollapse: boolean, levels: number, lineNumbers: number[]): void;
/**
 * Collapse or expand a region at the given locations. If the inner most region is already collapsed/expanded, uses the first parent instead.
 * @param doCollapse Wheter to collase or expand
 * @param lineNumbers the location of the regions to collapse or expand.
 */
export declare function setCollapseStateUp(foldingModel: FoldingModel, doCollapse: boolean, lineNumbers: number[]): void;
/**
 * Folds or unfolds all regions that have a given level, except if they contain one of the blocked lines.
 * @param foldLevel level. Level == 1 is the top level
 * @param doCollapse Wheter to collase or expand
*/
export declare function setCollapseStateAtLevel(foldingModel: FoldingModel, foldLevel: number, doCollapse: boolean, blockedLineNumbers: number[]): void;
/**
 * Folds all regions for which the lines start with a given regex
 * @param foldingModel the folding model
 */
export declare function setCollapseStateForMatchingLines(foldingModel: FoldingModel, regExp: RegExp, doCollapse: boolean): void;
/**
 * Folds all regions of the given type
 * @param foldingModel the folding model
 */
export declare function setCollapseStateForType(foldingModel: FoldingModel, type: string, doCollapse: boolean): void;
export {};

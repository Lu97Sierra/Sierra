import { ICodeEditor } from '../../browser/editorBrowser';
import { Range } from '../../common/core/range';
import { IEditorContribution } from '../../common/editorCommon';
import { IModeService } from '../../common/services/modeService';
import { HoverStartMode } from './hoverOperation';
import { ModesContentHoverWidget } from './modesContentHover';
import { ModesGlyphHoverWidget } from './modesGlyphHover';
import { IOpenerService } from '../../../platform/opener/common/opener';
import { IThemeService } from '../../../platform/theme/common/themeService';
import { IMarkerDecorationsService } from '../../common/services/markersDecorationService';
import { IKeybindingService } from '../../../platform/keybinding/common/keybinding';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
export declare class ModesHoverController implements IEditorContribution {
    private readonly _editor;
    private readonly _openerService;
    private readonly _modeService;
    private readonly _markerDecorationsService;
    private readonly _keybindingService;
    private readonly _themeService;
    static readonly ID = "editor.contrib.hover";
    private readonly _toUnhook;
    private readonly _didChangeConfigurationHandler;
    private readonly _contentWidget;
    private readonly _glyphWidget;
    get contentWidget(): ModesContentHoverWidget;
    get glyphWidget(): ModesGlyphHoverWidget;
    private _isMouseDown;
    private _hoverClicked;
    private _isHoverEnabled;
    private _isHoverSticky;
    private _hoverVisibleKey;
    static get(editor: ICodeEditor): ModesHoverController;
    constructor(_editor: ICodeEditor, _openerService: IOpenerService, _modeService: IModeService, _markerDecorationsService: IMarkerDecorationsService, _keybindingService: IKeybindingService, _themeService: IThemeService, _contextKeyService: IContextKeyService);
    private _hookEvents;
    private _unhookEvents;
    private _onModelDecorationsChanged;
    private _onEditorScrollChanged;
    private _onEditorMouseDown;
    private _onEditorMouseUp;
    private _onEditorMouseMove;
    private _onKeyDown;
    private _hideWidgets;
    private _createHoverWidgets;
    showContentHover(range: Range, mode: HoverStartMode, focus: boolean): void;
    dispose(): void;
}

import { ICodeEditor } from '../../browser/editorBrowser';
import { IEditorContribution } from '../../common/editorCommon';
import { CodeLensWidget } from './codelensWidget';
import { ICommandService } from '../../../platform/commands/common/commands';
import { INotificationService } from '../../../platform/notification/common/notification';
import { ICodeLensCache } from './codeLensCache';
export declare class CodeLensContribution implements IEditorContribution {
    private readonly _editor;
    private readonly _commandService;
    private readonly _notificationService;
    private readonly _codeLensCache;
    static readonly ID: string;
    private readonly _disposables;
    private readonly _localToDispose;
    private readonly _styleElement;
    private readonly _styleClassName;
    private readonly _lenses;
    private readonly _getCodeLensModelDelays;
    private _getCodeLensModelPromise;
    private _oldCodeLensModels;
    private _currentCodeLensModel;
    private readonly _resolveCodeLensesDelays;
    private readonly _resolveCodeLensesScheduler;
    private _resolveCodeLensesPromise;
    constructor(_editor: ICodeEditor, _commandService: ICommandService, _notificationService: INotificationService, _codeLensCache: ICodeLensCache);
    dispose(): void;
    private _getLayoutInfo;
    private _updateLensStyle;
    private _localDispose;
    private _onModelChange;
    private _disposeAllLenses;
    private _renderCodeLensSymbols;
    private _resolveCodeLensesInViewportSoon;
    private _resolveCodeLensesInViewport;
    getLenses(): readonly CodeLensWidget[];
}

import './media/gotoErrorWidget.css';
import { IMarker, IRelatedInformation } from '../../../platform/markers/common/markers';
import { ICodeEditor } from '../../browser/editorBrowser';
import { IThemeService } from '../../../platform/theme/common/themeService';
import { Event } from '../../../base/common/event';
import { PeekViewWidget } from '../peekView/peekView';
import { IActionBarOptions } from '../../../base/browser/ui/actionbar/actionbar';
import { IOpenerService } from '../../../platform/opener/common/opener';
import { MenuId, IMenuService } from '../../../platform/actions/common/actions';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../platform/instantiation/common/instantiation';
export declare class MarkerNavigationWidget extends PeekViewWidget {
    private readonly _themeService;
    private readonly _openerService;
    private readonly _menuService;
    private readonly _contextKeyService;
    static readonly TitleMenu: MenuId;
    private _parentContainer;
    private _container;
    private _icon;
    private _message;
    private readonly _callOnDispose;
    private _severity;
    private _backgroundColor?;
    private readonly _onDidSelectRelatedInformation;
    private _heightInPixel;
    readonly onDidSelectRelatedInformation: Event<IRelatedInformation>;
    constructor(editor: ICodeEditor, _themeService: IThemeService, _openerService: IOpenerService, _menuService: IMenuService, instantiationService: IInstantiationService, _contextKeyService: IContextKeyService);
    private _applyTheme;
    protected _applyStyles(): void;
    dispose(): void;
    focus(): void;
    protected _fillHead(container: HTMLElement): void;
    protected _fillTitleIcon(container: HTMLElement): void;
    protected _getActionBarOptions(): IActionBarOptions;
    protected _fillBody(container: HTMLElement): void;
    show(): void;
    showAtMarker(marker: IMarker, markerIdx: number, markerCount: number): void;
    updateMarker(marker: IMarker): void;
    showStale(): void;
    protected _doLayoutBody(heightInPixel: number, widthInPixel: number): void;
    _onWidth(widthInPixel: number): void;
    protected _relayout(): void;
    private computeRequiredHeight;
}
export declare const editorMarkerNavigationError: string;
export declare const editorMarkerNavigationWarning: string;
export declare const editorMarkerNavigationInfo: string;
export declare const editorMarkerNavigationBackground: string;

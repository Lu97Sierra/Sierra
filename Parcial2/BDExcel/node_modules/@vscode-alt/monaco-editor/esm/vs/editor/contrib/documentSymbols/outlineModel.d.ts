import { CancellationToken } from '../../../base/common/cancellation';
import { IPosition } from '../../common/core/position';
import { ITextModel } from '../../common/model';
import { DocumentSymbol } from '../../common/modes';
import { MarkerSeverity } from '../../../platform/markers/common/markers';
import { URI } from '../../../base/common/uri';
export declare abstract class TreeElement {
    abstract id: string;
    abstract children: Map<string, TreeElement>;
    abstract parent: TreeElement | undefined;
    abstract adopt(newParent: TreeElement): TreeElement;
    remove(): void;
    static findId(candidate: DocumentSymbol | string, container: TreeElement): string;
    static getElementById(id: string, element: TreeElement): TreeElement | undefined;
    static size(element: TreeElement): number;
    static empty(element: TreeElement): boolean;
}
export interface IOutlineMarker {
    startLineNumber: number;
    startColumn: number;
    endLineNumber: number;
    endColumn: number;
    severity: MarkerSeverity;
}
export declare class OutlineElement extends TreeElement {
    readonly id: string;
    parent: TreeElement | undefined;
    readonly symbol: DocumentSymbol;
    children: Map<string, OutlineElement>;
    marker: {
        count: number;
        topSev: MarkerSeverity;
    } | undefined;
    constructor(id: string, parent: TreeElement | undefined, symbol: DocumentSymbol);
    adopt(parent: TreeElement): OutlineElement;
}
export declare class OutlineGroup extends TreeElement {
    readonly id: string;
    parent: TreeElement | undefined;
    readonly label: string;
    readonly order: number;
    children: Map<string, OutlineElement>;
    constructor(id: string, parent: TreeElement | undefined, label: string, order: number);
    adopt(parent: TreeElement): OutlineGroup;
    getItemEnclosingPosition(position: IPosition): OutlineElement | undefined;
    private _getItemEnclosingPosition;
    updateMarker(marker: IOutlineMarker[]): void;
    private _updateMarker;
}
export declare class OutlineModel extends TreeElement {
    readonly uri: URI;
    private static readonly _requestDurations;
    private static readonly _requests;
    private static readonly _keys;
    static create(textModel: ITextModel, token: CancellationToken): Promise<OutlineModel>;
    static getRequestDelay(textModel: ITextModel | null): number;
    private static _create;
    private static _makeOutlineElement;
    static get(element: TreeElement | undefined): OutlineModel | undefined;
    readonly id = "root";
    readonly parent: undefined;
    protected _groups: Map<string, OutlineGroup>;
    children: Map<string, OutlineElement | OutlineGroup>;
    protected constructor(uri: URI);
    adopt(): OutlineModel;
    private _compact;
    merge(other: OutlineModel): boolean;
    getItemEnclosingPosition(position: IPosition, context?: OutlineElement): OutlineElement | undefined;
    getItemById(id: string): TreeElement | undefined;
    updateMarker(marker: IOutlineMarker[]): void;
}

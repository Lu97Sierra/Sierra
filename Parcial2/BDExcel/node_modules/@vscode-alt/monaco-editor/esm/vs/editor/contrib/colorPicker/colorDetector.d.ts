import { Disposable } from '../../../base/common/lifecycle';
import { ICodeEditor } from '../../browser/editorBrowser';
import { ICodeEditorService } from '../../browser/services/codeEditorService';
import { Position } from '../../common/core/position';
import { IEditorContribution } from '../../common/editorCommon';
import { IColorData } from './color';
import { IConfigurationService } from '../../../platform/configuration/common/configuration';
export declare class ColorDetector extends Disposable implements IEditorContribution {
    private readonly _editor;
    private readonly _codeEditorService;
    private readonly _configurationService;
    static readonly ID: string;
    static readonly RECOMPUTE_TIME = 1000;
    private readonly _localToDispose;
    private _computePromise;
    private _timeoutTimer;
    private _decorationsIds;
    private _colorDatas;
    private _colorDecoratorIds;
    private readonly _decorationsTypes;
    private _isEnabled;
    constructor(_editor: ICodeEditor, _codeEditorService: ICodeEditorService, _configurationService: IConfigurationService);
    isEnabled(): boolean;
    static get(editor: ICodeEditor): ColorDetector;
    dispose(): void;
    private onModelChanged;
    private beginCompute;
    private stop;
    private updateDecorations;
    private updateColorDecorators;
    private removeAllDecorations;
    getColorData(position: Position): IColorData | null;
}

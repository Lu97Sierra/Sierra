import { Widget } from '../../../base/browser/ui/widget';
import { IContentWidget, ICodeEditor, IContentWidgetPosition, IOverlayWidget, IOverlayWidgetPosition } from '../../browser/editorBrowser';
import { Position } from '../../common/core/position';
import { Range } from '../../common/core/range';
import { HoverWidget } from '../../../base/browser/ui/hover/hoverWidget';
import { IDisposable } from '../../../base/common/lifecycle';
import { IKeybindingService } from '../../../platform/keybinding/common/keybinding';
import { IContextKey } from '../../../platform/contextkey/common/contextkey';
export declare class ContentHoverWidget extends Widget implements IContentWidget {
    private readonly _hoverVisibleKey;
    private readonly _keybindingService;
    protected readonly _hover: HoverWidget;
    private readonly _id;
    protected _editor: ICodeEditor;
    private _isVisible;
    protected _showAtPosition: Position | null;
    protected _showAtRange: Range | null;
    private _stoleFocus;
    allowEditorOverflow: boolean;
    protected get isVisible(): boolean;
    protected set isVisible(value: boolean);
    constructor(id: string, editor: ICodeEditor, _hoverVisibleKey: IContextKey<boolean>, _keybindingService: IKeybindingService);
    getId(): string;
    getDomNode(): HTMLElement;
    showAt(position: Position, range: Range | null, focus: boolean): void;
    hide(): void;
    getPosition(): IContentWidgetPosition | null;
    dispose(): void;
    private updateFont;
    protected updateContents(node: Node): void;
    protected _renderAction(parent: HTMLElement, actionOptions: {
        label: string;
        iconClass?: string;
        run: (target: HTMLElement) => void;
        commandId: string;
    }): IDisposable;
    private layout;
}
export declare class GlyphHoverWidget extends Widget implements IOverlayWidget {
    private readonly _id;
    protected _editor: ICodeEditor;
    private _isVisible;
    private readonly _domNode;
    protected _showAtLineNumber: number;
    constructor(id: string, editor: ICodeEditor);
    protected get isVisible(): boolean;
    protected set isVisible(value: boolean);
    getId(): string;
    getDomNode(): HTMLElement;
    showAt(lineNumber: number): void;
    hide(): void;
    getPosition(): IOverlayWidgetPosition | null;
    dispose(): void;
    private updateFont;
    protected updateContents(node: Node): void;
}

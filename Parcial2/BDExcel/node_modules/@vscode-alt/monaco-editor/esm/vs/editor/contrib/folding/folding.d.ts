import './folding.css';
import { Disposable } from '../../../base/common/lifecycle';
import { IEditorContribution } from '../../common/editorCommon';
import { ICodeEditor } from '../../browser/editorBrowser';
import { FoldingModel, CollapseMemento } from './foldingModel';
import { FoldingRegions } from './foldingRanges';
import { IPosition } from '../../common/core/position';
import { CancellationToken } from '../../../base/common/cancellation';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
export interface RangeProvider {
    readonly id: string;
    compute(cancelationToken: CancellationToken): Promise<FoldingRegions | null>;
    dispose(): void;
}
interface FoldingStateMemento {
    collapsedRegions?: CollapseMemento;
    lineCount?: number;
    provider?: string;
}
export declare class FoldingController extends Disposable implements IEditorContribution {
    private readonly contextKeyService;
    static ID: string;
    static readonly MAX_FOLDING_REGIONS = 5000;
    static get(editor: ICodeEditor): FoldingController;
    private readonly editor;
    private _isEnabled;
    private _useFoldingProviders;
    private _unfoldOnClickAfterEndOfLine;
    private _restoringViewState;
    private readonly foldingDecorationProvider;
    private foldingModel;
    private hiddenRangeModel;
    private rangeProvider;
    private foldingRegionPromise;
    private foldingStateMemento;
    private foldingModelPromise;
    private updateScheduler;
    private foldingEnabled;
    private cursorChangedScheduler;
    private readonly localToDispose;
    private mouseDownInfo;
    constructor(editor: ICodeEditor, contextKeyService: IContextKeyService);
    /**
     * Store view state.
     */
    saveViewState(): FoldingStateMemento | undefined;
    /**
     * Restore view state.
     */
    restoreViewState(state: FoldingStateMemento): void;
    private onModelChanged;
    private onFoldingStrategyChanged;
    private getRangeProvider;
    getFoldingModel(): Promise<FoldingModel | null> | null;
    private onModelContentChanged;
    private onHiddenRangesChanges;
    private onCursorPositionChanged;
    private revealCursor;
    private onEditorMouseDown;
    private onEditorMouseUp;
    reveal(position: IPosition): void;
}
export declare const foldBackgroundBackground: string;
export declare const editorFoldForeground: string;
export {};

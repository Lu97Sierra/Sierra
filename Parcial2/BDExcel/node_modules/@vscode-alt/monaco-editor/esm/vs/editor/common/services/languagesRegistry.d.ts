import { Event } from '../../../base/common/event';
import { Disposable } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
import { LanguageId, LanguageIdentifier } from '../modes';
import { ILanguageExtensionPoint } from './modeService';
export interface IResolvedLanguage {
    identifier: LanguageIdentifier;
    name: string | null;
    mimetypes: string[];
    aliases: string[];
    extensions: string[];
    filenames: string[];
    configurationFiles: URI[];
}
export declare class LanguagesRegistry extends Disposable {
    private readonly _onDidChange;
    readonly onDidChange: Event<void>;
    private readonly _warnOnOverwrite;
    private _nextLanguageId2;
    private readonly _languageIdToLanguage;
    private readonly _languageToLanguageId;
    private _languages;
    private _mimeTypesMap;
    private _nameMap;
    private _lowercaseNameMap;
    constructor(useModesRegistry?: boolean, warnOnOverwrite?: boolean);
    private _initializeFromRegistry;
    _registerLanguages(desc: ILanguageExtensionPoint[]): void;
    private _getLanguageId;
    private _registerLanguage;
    private _mergeLanguage;
    isRegisteredMode(mimetypeOrModeId: string): boolean;
    getRegisteredModes(): string[];
    getRegisteredLanguageNames(): string[];
    getLanguageName(modeId: string): string | null;
    getModeIdForLanguageNameLowercase(languageNameLower: string): string | null;
    getConfigurationFiles(modeId: string): URI[];
    getMimeForMode(modeId: string): string | null;
    extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): string[];
    getLanguageIdentifier(_modeId: string | LanguageId): LanguageIdentifier | null;
    getModeIdsFromLanguageName(languageName: string): string[];
    getModeIdsFromFilepathOrFirstLine(resource: URI | null, firstLine?: string): string[];
    getExtensions(languageName: string): string[];
    getFilenames(languageName: string): string[];
}

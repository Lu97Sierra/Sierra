import { Disposable } from '../../../base/common/lifecycle';
import './parameterHints.css';
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../browser/editorBrowser';
import { IModeService } from '../../common/services/modeService';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
import { IOpenerService } from '../../../platform/opener/common/opener';
import { TriggerContext } from './parameterHintsModel';
export declare class ParameterHintsWidget extends Disposable implements IContentWidget {
    private readonly editor;
    private static readonly ID;
    private readonly markdownRenderer;
    private readonly renderDisposeables;
    private readonly model;
    private readonly keyVisible;
    private readonly keyMultipleSignatures;
    private domNodes?;
    private visible;
    private announcedLabel;
    allowEditorOverflow: boolean;
    constructor(editor: ICodeEditor, contextKeyService: IContextKeyService, openerService: IOpenerService, modeService: IModeService);
    private createParamaterHintDOMNodes;
    private show;
    private hide;
    getPosition(): IContentWidgetPosition | null;
    private render;
    private hasDocs;
    private renderParameters;
    private getParameterLabel;
    private getParameterLabelOffsets;
    next(): void;
    previous(): void;
    cancel(): void;
    getDomNode(): HTMLElement;
    getId(): string;
    trigger(context: TriggerContext): void;
    private updateMaxHeight;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileChangesEvent = void 0;
/* tslint:disable */
const interfaces_1 = require("../interfaces");
const platform_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/platform");
const types_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const resources_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
class FileChangesEvent {
    constructor(changes) {
        this._changes = changes;
    }
    get changes() {
        return this._changes;
    }
    /**
     * Returns true if this change event contains the provided file with the given change type (if provided). In case of
     * type DELETED, this method will also return true if a folder got deleted that is the parent of the
     * provided file path.
     */
    contains(resource, type) {
        if (!resource) {
            return false;
        }
        const checkForChangeType = !types_1.isUndefinedOrNull(type);
        return this._changes.some(change => {
            if (checkForChangeType && change.type !== type) {
                return false;
            }
            // For deleted also return true when deleted folder is parent of target path
            if (change.type === interfaces_1.FileChangeType.DELETED) {
                return resources_1.isEqualOrParent(resource, change.resource, !platform_1.isLinux /* ignorecase */);
            }
            return resources_1.isEqual(resource, change.resource, !platform_1.isLinux /* ignorecase */);
        });
    }
    /**
     * Returns the changes that describe added files.
     */
    getAdded() {
        return this.getOfType(interfaces_1.FileChangeType.ADDED);
    }
    /**
     * Returns if this event contains added files.
     */
    gotAdded() {
        return this.hasType(interfaces_1.FileChangeType.ADDED);
    }
    /**
     * Returns the changes that describe deleted files.
     */
    getDeleted() {
        return this.getOfType(interfaces_1.FileChangeType.DELETED);
    }
    /**
     * Returns if this event contains deleted files.
     */
    gotDeleted() {
        return this.hasType(interfaces_1.FileChangeType.DELETED);
    }
    /**
     * Returns the changes that describe updated files.
     */
    getUpdated() {
        return this.getOfType(interfaces_1.FileChangeType.UPDATED);
    }
    /**
     * Returns if this event contains updated files.
     */
    gotUpdated() {
        return this.hasType(interfaces_1.FileChangeType.UPDATED);
    }
    getOfType(type) {
        return this._changes.filter(change => change.type === type);
    }
    hasType(type) {
        return this._changes.some(change => {
            return change.type === type;
        });
    }
}
exports.FileChangesEvent = FileChangesEvent;
//# sourceMappingURL=file-changes-event.js.map
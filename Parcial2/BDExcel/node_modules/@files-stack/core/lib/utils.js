"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileExt = exports.checkArrayContains = exports.isDescendant = exports.getRelativePath = exports.getParentResource = exports.getFileName = exports.getPath = exports.isChild = void 0;
const ramda_1 = require("ramda");
const paths = require("@vscode-alt/monaco-editor/esm/vs/base/common/path");
exports.isChild = (source, target) => (target.indexOf(source) !== -1);
exports.getPath = (resource) => {
    if (!resource) {
        return '';
    }
    return resource.path;
};
exports.getFileName = (resource) => {
    return paths.basename(resource.fsPath);
};
exports.getParentResource = (resource) => {
    let patterns = resource.split('/');
    if (patterns.length > 1) {
        patterns = ramda_1.remove(patterns.length - 1, 1, patterns);
    }
    return ramda_1.join('/', patterns);
};
exports.getRelativePath = (root, resource) => {
    return paths.relative(root.path, resource.path);
};
exports.isDescendant = (older, younger) => (!!older.children &&
    typeof older.children !== 'function' &&
    older.children.some(child => child === younger || exports.isDescendant(child, younger)));
exports.checkArrayContains = (arr1, arr2) => {
    if (!arr1 || !arr2 || arr1.length < arr2.length) {
        return false;
    }
    return arr2.every((a2, i) => arr1[i] === a2);
};
exports.getFileExt = name => {
    return name.split('.').pop();
};
//# sourceMappingURL=utils.js.map
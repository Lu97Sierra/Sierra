"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var graphql_1 = require("graphql");
var iterall_1 = require("iterall");
var stripCircular = function (circularData, seen) {
    var notCircularData = Array.isArray(circularData) ? [] : {};
    seen = seen || [];
    seen.push(circularData);
    Object.getOwnPropertyNames(circularData).forEach(function (key) {
        if (!circularData[key] || (typeof circularData[key] !== 'object' && !Array.isArray(circularData[key]))) {
            notCircularData[key] = circularData[key];
        }
        else if (seen.indexOf(circularData[key]) < 0) {
            notCircularData[key] = stripCircular(circularData[key], seen.slice(0));
        }
        else {
            notCircularData[key] = '[Circular]';
        }
    });
    return notCircularData;
};
function defaultFormatter(req) {
    return !req.variables || Object.keys(req.variables).length === 0
        ? req.operationName
        : req.operationName + "(" + JSON.stringify(req.variables) + ")";
}
exports.defaultFormatter = defaultFormatter;
exports.defaultLogger = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return console.log.apply(null, args);
};
var getDefaultLogOptions = function (options) {
    var result = options;
    if (!result.formatter) {
        result.formatter = defaultFormatter;
    }
    if (!result.logger) {
        result.logger = exports.defaultLogger;
    }
    return result;
};
var LoggedPubSub = (function () {
    function LoggedPubSub(pubsub, options) {
        this.pubsub = pubsub;
        this.options = getDefaultLogOptions(options);
    }
    LoggedPubSub.prototype.publish = function (triggerName, payload) {
        this.options.logger('pubsub publish', triggerName, payload);
        return this.pubsub.publish(triggerName, payload);
    };
    LoggedPubSub.prototype.subscribe = function (triggerName, onMessage, options) {
        return __awaiter(this, void 0, void 0, function () {
            var result, logHandler;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        logHandler = function () {
                            var msgArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                msgArgs[_i] = arguments[_i];
                            }
                            _this.options.logger('pubsub msg', triggerName + "(" + JSON.stringify(msgArgs) + ")");
                            onMessage(msgArgs);
                        };
                        return [4, this.pubsub.subscribe(triggerName, logHandler, options)];
                    case 1:
                        result = _a.sent();
                        return [3, 3];
                    case 2:
                        this.options.logger('pubsub subscribe', triggerName, '=>', result);
                        return [7];
                    case 3: return [2, result];
                }
            });
        });
    };
    LoggedPubSub.prototype.unsubscribe = function (subId) {
        this.options.logger('pubsub unsubscribe', subId);
        this.pubsub.unsubscribe(subId);
    };
    LoggedPubSub.prototype.asyncIterator = function (triggers) {
        return new PubSubAsyncIterator(this.pubsub, triggers, this.options);
    };
    return LoggedPubSub;
}());
exports.LoggedPubSub = LoggedPubSub;
var PubSubAsyncIterator = (function () {
    function PubSubAsyncIterator(pubsub, triggers, options) {
        this.asyncIter = pubsub.asyncIterator(triggers);
        this.triggers = typeof triggers === 'string' ? [triggers] : triggers;
        this.options = getDefaultLogOptions(options);
    }
    PubSubAsyncIterator.prototype.next = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        return [4, this.asyncIter.next(value)];
                    case 1:
                        result = _a.sent();
                        return [3, 3];
                    case 2:
                        this.options.logger(JSON.stringify(result), '<= ' + JSON.stringify(this.triggers) + '->next');
                        return [7];
                    case 3: return [2, result];
                }
            });
        });
    };
    PubSubAsyncIterator.prototype.return = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        return [4, this.asyncIter.return(value)];
                    case 1:
                        result = _a.sent();
                        return [3, 3];
                    case 2:
                        this.options.logger(JSON.stringify(result), '<= ' + JSON.stringify(this.triggers) + '->return');
                        return [7];
                    case 3: return [2, result];
                }
            });
        });
    };
    PubSubAsyncIterator.prototype.throw = function (e) {
        var result;
        try {
            result = this.asyncIter.throw(e);
        }
        finally {
            this.options.logger(JSON.stringify(this.triggers) + ("->throw('" + JSON.stringify(e) + "') =>"), JSON.stringify(result));
        }
        return result;
    };
    PubSubAsyncIterator.prototype[iterall_1.$$asyncIterator] = function () {
        return this;
    };
    return PubSubAsyncIterator;
}());
exports.wrapPubSub = function (pubsub, options) {
    return new LoggedPubSub(pubsub, options);
};
var LoggingLink = (function (_super) {
    __extends(LoggingLink, _super);
    function LoggingLink(options) {
        var _this = _super.call(this) || this;
        _this.options = getDefaultLogOptions(options);
        return _this;
    }
    LoggingLink.prototype.request = function (operation, forward) {
        var _this = this;
        var operationAST = graphql_1.getOperationAST(operation.query, operation.operationName);
        var isSubscription = !!operationAST && operationAST.operation === 'subscription';
        if (!isSubscription) {
            this.options.logger("loading <= " + this.options.formatter(operation));
        }
        return new apollo_link_1.Observable(function (observer) {
            if (isSubscription) {
                _this.options.logger("subscribe <= " + _this.options.formatter(operation));
            }
            var sub = forward(operation).subscribe({
                next: function (result) {
                    _this.options.logger(JSON.stringify(result) + " <= " + _this.options.formatter(operation));
                    observer.next(result);
                },
                error: function (error) {
                    _this.options.logger(JSON.stringify(error) + " <=e " + _this.options.formatter(operation));
                    observer.error(error);
                },
                complete: observer.complete.bind(observer)
            });
            return function () {
                if (isSubscription) {
                    _this.options.logger("unsubscribe <= " + _this.options.formatter(operation));
                }
                sub.unsubscribe();
            };
        });
    };
    return LoggingLink;
}(apollo_link_1.ApolloLink));
exports.LoggingLink = LoggingLink;
function formatResponse(logOptions, response) {
    var options = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        options[_i - 2] = arguments[_i];
    }
    var logOpts = getDefaultLogOptions(logOptions);
    logOpts.logger(JSON.stringify(response) + " <= " + logOpts.formatter(options[0]));
    return response;
}
exports.formatResponse = formatResponse;
exports.default = (function (options) { return ({
    link: new LoggingLink(options),
    formatResponse: formatResponse.bind(options),
    wrapPubSub: function (pubsub) { return exports.wrapPubSub(pubsub, options); }
}); });
//# sourceMappingURL=index.js.map
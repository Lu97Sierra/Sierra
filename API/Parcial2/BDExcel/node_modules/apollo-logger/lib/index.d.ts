import { ApolloLink, Observable, Operation } from 'apollo-link';
import { PubSubEngine } from 'graphql-subscriptions';
export interface LogOptions {
    logger?: (...args: any[]) => void;
    formatter?: (req: any) => string;
}
export declare function defaultFormatter(req: any): string;
export declare const defaultLogger: (...args: any[]) => void;
export declare class LoggedPubSub implements PubSubEngine {
    private pubsub;
    private options;
    constructor(pubsub: PubSubEngine, options?: LogOptions);
    publish(triggerName: string, payload: any): Promise<void>;
    subscribe(triggerName: string, onMessage: (...args: any[]) => void, options: any): Promise<number>;
    unsubscribe(subId: number): void;
    asyncIterator<T>(triggers: string | string[]): AsyncIterator<T>;
}
export declare const wrapPubSub: (pubsub: PubSubEngine, options: LogOptions) => PubSubEngine;
export declare class LoggingLink extends ApolloLink {
    private options;
    constructor(options?: LogOptions);
    request(operation: any, forward: any): Observable<{}>;
}
export interface FormatterInput {
    operation: Operation;
    result?: any;
    error?: any;
}
export declare function formatResponse(logOptions: LogOptions, response: any, ...options: any): any;
declare const _default: (options?: LogOptions) => {
    link: LoggingLink;
    formatResponse: any;
    wrapPubSub: (pubsub: PubSubEngine) => PubSubEngine;
};
export default _default;

import * as dom from '../../../base/browser/dom';
import { Event } from '../../../base/common/event';
import { Keybinding, ResolvedKeybinding } from '../../../base/common/keyCodes';
import { IDisposable, IReference } from '../../../base/common/lifecycle';
import Severity from '../../../base/common/severity';
import { URI } from '../../../base/common/uri';
import { IBulkEditOptions, IBulkEditResult, IBulkEditService, ResourceEdit } from '../../browser/services/bulkEditService';
import { IPosition } from '../../common/core/position';
import { IEditor } from '../../common/editorCommon';
import { ITextModel, ITextSnapshot } from '../../common/model';
import { IModelService } from '../../common/services/modelService';
import { IResolvedTextEditorModel, ITextModelContentProvider, ITextModelService } from '../../common/services/resolverService';
import { ITextResourceConfigurationService, ITextResourcePropertiesService, ITextResourceConfigurationChangeEvent } from '../../common/services/textResourceConfigurationService';
import { ICommandEvent, ICommandHandler, ICommandService } from '../../../platform/commands/common/commands';
import { IConfigurationChangeEvent, IConfigurationData, IConfigurationOverrides, IConfigurationService, IConfigurationValue, ConfigurationTarget } from '../../../platform/configuration/common/configuration';
import { IContextKeyService, ContextKeyExpression } from '../../../platform/contextkey/common/contextkey';
import { IConfirmation, IConfirmationResult, IDialogOptions, IDialogService, IInputResult, IShowResult } from '../../../platform/dialogs/common/dialogs';
import { IInstantiationService } from '../../../platform/instantiation/common/instantiation';
import { AbstractKeybindingService } from '../../../platform/keybinding/common/abstractKeybindingService';
import { IKeyboardEvent, KeybindingsSchemaContribution } from '../../../platform/keybinding/common/keybinding';
import { KeybindingResolver } from '../../../platform/keybinding/common/keybindingResolver';
import { ILabelService, ResourceLabelFormatter, IFormatterChangeEvent } from '../../../platform/label/common/label';
import { INotification, INotificationHandle, INotificationService, IPromptChoice, IPromptOptions, IStatusMessageOptions, NotificationsFilter } from '../../../platform/notification/common/notification';
import { IProgressRunner, IEditorProgressService } from '../../../platform/progress/common/progress';
import { ITelemetryInfo, ITelemetryService } from '../../../platform/telemetry/common/telemetry';
import { IWorkspace, IWorkspaceContextService, IWorkspaceFolder, IWorkspaceFoldersChangeEvent, WorkbenchState } from '../../../platform/workspace/common/workspace';
import { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from '../../../platform/workspaces/common/workspaces';
import { ILayoutService } from '../../../platform/layout/browser/layoutService';
import { ClassifiedEvent, StrictPropertyCheck, GDPRClassification } from '../../../platform/telemetry/common/gdprTypings';
import { ICodeEditorService } from '../../browser/services/codeEditorService';
import { ILogService } from '../../../platform/log/common/log';
export declare class SimpleModel implements IResolvedTextEditorModel {
    private readonly model;
    private readonly _onDispose;
    constructor(model: ITextModel);
    get onDispose(): Event<void>;
    load(): Promise<SimpleModel>;
    get textEditorModel(): ITextModel;
    createSnapshot(): ITextSnapshot;
    isReadonly(): boolean;
    private disposed;
    dispose(): void;
    isDisposed(): boolean;
    isResolved(): boolean;
    getMode(): string | undefined;
}
export interface IOpenEditorDelegate {
    (url: string): boolean;
}
export declare class SimpleEditorModelResolverService implements ITextModelService {
    private readonly modelService;
    _serviceBrand: undefined;
    private editor?;
    constructor(modelService: IModelService);
    setEditor(editor: IEditor): void;
    createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>>;
    registerTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable;
    canHandleResource(resource: URI): boolean;
    private findModel;
}
export declare class SimpleEditorProgressService implements IEditorProgressService {
    readonly _serviceBrand: undefined;
    private static NULL_PROGRESS_RUNNER;
    show(infinite: true, delay?: number): IProgressRunner;
    show(total: number, delay?: number): IProgressRunner;
    showWhile(promise: Promise<any>, delay?: number): Promise<void>;
}
export declare class SimpleDialogService implements IDialogService {
    _serviceBrand: undefined;
    confirm(confirmation: IConfirmation): Promise<IConfirmationResult>;
    private doConfirm;
    show(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<IShowResult>;
    input(): Promise<IInputResult>;
    about(): Promise<void>;
}
export declare class SimpleNotificationService implements INotificationService {
    _serviceBrand: undefined;
    private static readonly NO_OP;
    info(message: string): INotificationHandle;
    warn(message: string): INotificationHandle;
    error(error: string | Error): INotificationHandle;
    notify(notification: INotification): INotificationHandle;
    prompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle;
    status(message: string | Error, options?: IStatusMessageOptions): IDisposable;
    setFilter(filter: NotificationsFilter): void;
}
export declare class StandaloneCommandService implements ICommandService {
    readonly _serviceBrand: undefined;
    private readonly _instantiationService;
    private readonly _onWillExecuteCommand;
    private readonly _onDidExecuteCommand;
    readonly onWillExecuteCommand: Event<ICommandEvent>;
    readonly onDidExecuteCommand: Event<ICommandEvent>;
    constructor(instantiationService: IInstantiationService);
    executeCommand<T>(id: string, ...args: any[]): Promise<T>;
}
export declare class StandaloneKeybindingService extends AbstractKeybindingService {
    private _cachedResolver;
    private readonly _dynamicKeybindings;
    constructor(contextKeyService: IContextKeyService, commandService: ICommandService, telemetryService: ITelemetryService, notificationService: INotificationService, logService: ILogService, domNode: HTMLElement);
    addDynamicKeybinding(commandId: string, _keybinding: number, handler: ICommandHandler, when: ContextKeyExpression | undefined): IDisposable;
    private updateResolver;
    protected _getResolver(): KeybindingResolver;
    protected _documentHasFocus(): boolean;
    private _toNormalizedKeybindingItems;
    resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];
    resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;
    resolveUserBinding(userBinding: string): ResolvedKeybinding[];
    _dumpDebugInfo(): string;
    _dumpDebugInfoJSON(): string;
    registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;
}
export declare class SimpleConfigurationService implements IConfigurationService {
    readonly _serviceBrand: undefined;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    private readonly _configuration;
    constructor();
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    updateValues(values: [string, any][]): Promise<void>;
    updateValue(key: string, value: any, arg3?: any, arg4?: any): Promise<void>;
    inspect<C>(key: string, options?: IConfigurationOverrides): IConfigurationValue<C>;
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    reloadConfiguration(): Promise<void>;
    getConfigurationData(): IConfigurationData | null;
}
export declare class SimpleResourceConfigurationService implements ITextResourceConfigurationService {
    private readonly configurationService;
    readonly _serviceBrand: undefined;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<ITextResourceConfigurationChangeEvent>;
    constructor(configurationService: SimpleConfigurationService);
    getValue<T>(resource: URI, section?: string): T;
    getValue<T>(resource: URI, position?: IPosition, section?: string): T;
    updateValue(resource: URI, key: string, value: any, configurationTarget?: ConfigurationTarget): Promise<void>;
}
export declare class SimpleResourcePropertiesService implements ITextResourcePropertiesService {
    private readonly configurationService;
    readonly _serviceBrand: undefined;
    constructor(configurationService: IConfigurationService);
    getEOL(resource: URI, language?: string): string;
}
export declare class StandaloneTelemetryService implements ITelemetryService {
    readonly _serviceBrand: undefined;
    isOptedIn: boolean;
    sendErrorTelemetry: boolean;
    setEnabled(value: boolean): void;
    setExperimentProperty(name: string, value: string): void;
    publicLog(eventName: string, data?: any): Promise<void>;
    publicLog2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>): Promise<void>;
    publicLogError(eventName: string, data?: any): Promise<void>;
    publicLogError2<E extends ClassifiedEvent<T> = never, T extends GDPRClassification<T> = never>(eventName: string, data?: StrictPropertyCheck<T, E>): Promise<void>;
    getTelemetryInfo(): Promise<ITelemetryInfo>;
}
export declare class SimpleWorkspaceContextService implements IWorkspaceContextService {
    _serviceBrand: undefined;
    private static readonly SCHEME;
    private readonly _onDidChangeWorkspaceName;
    readonly onDidChangeWorkspaceName: Event<void>;
    private readonly _onDidChangeWorkspaceFolders;
    readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;
    private readonly _onDidChangeWorkbenchState;
    readonly onDidChangeWorkbenchState: Event<WorkbenchState>;
    private readonly workspace;
    constructor();
    getCompleteWorkspace(): Promise<IWorkspace>;
    getWorkspace(): IWorkspace;
    getWorkbenchState(): WorkbenchState;
    getWorkspaceFolder(resource: URI): IWorkspaceFolder | null;
    isInsideWorkspace(resource: URI): boolean;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
}
export declare function applyConfigurationValues(configurationService: IConfigurationService, source: any, isDiffEditor: boolean): void;
export declare class SimpleBulkEditService implements IBulkEditService {
    private readonly _modelService;
    readonly _serviceBrand: undefined;
    constructor(_modelService: IModelService);
    hasPreviewHandler(): false;
    setPreviewHandler(): IDisposable;
    apply(edits: ResourceEdit[], _options?: IBulkEditOptions): Promise<IBulkEditResult>;
}
export declare class SimpleUriLabelService implements ILabelService {
    readonly _serviceBrand: undefined;
    readonly onDidChangeFormatters: Event<IFormatterChangeEvent>;
    getUriLabel(resource: URI, options?: {
        relative?: boolean;
        forceNoTildify?: boolean;
    }): string;
    getUriBasenameLabel(resource: URI): string;
    getWorkspaceLabel(workspace: IWorkspaceIdentifier | URI | IWorkspace, options?: {
        verbose: boolean;
    }): string;
    getSeparator(scheme: string, authority?: string): '/' | '\\';
    registerFormatter(formatter: ResourceLabelFormatter): IDisposable;
    getHostLabel(): string;
}
export declare class SimpleLayoutService implements ILayoutService {
    private _codeEditorService;
    private _container;
    readonly _serviceBrand: undefined;
    onLayout: Event<any>;
    private _dimension?;
    get dimension(): dom.IDimension;
    get container(): HTMLElement;
    focus(): void;
    constructor(_codeEditorService: ICodeEditorService, _container: HTMLElement);
}

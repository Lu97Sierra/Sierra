import { HighlightedLabel } from '../../../base/browser/ui/highlightedlabel/highlightedLabel';
import { IIdentityProvider, IKeyboardNavigationLabelProvider, IListVirtualDelegate } from '../../../base/browser/ui/list/list';
import { IDataSource, ITreeNode, ITreeRenderer, ITreeSorter, ITreeFilter } from '../../../base/browser/ui/tree/tree';
import { FuzzyScore } from '../../../base/common/filters';
import './media/outlineTree.css';
import './media/symbol-icons.css';
import { SymbolKind } from '../../common/modes';
import { OutlineElement, OutlineGroup, OutlineModel } from './outlineModel';
import { IconLabel } from '../../../base/browser/ui/iconLabel/iconLabel';
import { IConfigurationService } from '../../../platform/configuration/common/configuration';
import { IThemeService } from '../../../platform/theme/common/themeService';
import { ITextResourceConfigurationService } from '../../common/services/textResourceConfigurationService';
import { IListAccessibilityProvider } from '../../../base/browser/ui/list/listWidget';
export declare type OutlineItem = OutlineGroup | OutlineElement;
export declare class OutlineNavigationLabelProvider implements IKeyboardNavigationLabelProvider<OutlineItem> {
    getKeyboardNavigationLabel(element: OutlineItem): {
        toString(): string;
    };
}
export declare class OutlineAccessibilityProvider implements IListAccessibilityProvider<OutlineItem> {
    private readonly ariaLabel;
    constructor(ariaLabel: string);
    getWidgetAriaLabel(): string;
    getAriaLabel(element: OutlineItem): string | null;
}
export declare class OutlineIdentityProvider implements IIdentityProvider<OutlineItem> {
    getId(element: OutlineItem): {
        toString(): string;
    };
}
export declare class OutlineGroupTemplate {
    readonly labelContainer: HTMLElement;
    readonly label: HighlightedLabel;
    static readonly id = "OutlineGroupTemplate";
    constructor(labelContainer: HTMLElement, label: HighlightedLabel);
}
export declare class OutlineElementTemplate {
    readonly container: HTMLElement;
    readonly iconLabel: IconLabel;
    readonly iconClass: HTMLElement;
    readonly decoration: HTMLElement;
    static readonly id = "OutlineElementTemplate";
    constructor(container: HTMLElement, iconLabel: IconLabel, iconClass: HTMLElement, decoration: HTMLElement);
}
export declare class OutlineVirtualDelegate implements IListVirtualDelegate<OutlineItem> {
    getHeight(_element: OutlineItem): number;
    getTemplateId(element: OutlineItem): string;
}
export declare class OutlineGroupRenderer implements ITreeRenderer<OutlineGroup, FuzzyScore, OutlineGroupTemplate> {
    readonly templateId: string;
    renderTemplate(container: HTMLElement): OutlineGroupTemplate;
    renderElement(node: ITreeNode<OutlineGroup, FuzzyScore>, index: number, template: OutlineGroupTemplate): void;
    disposeTemplate(_template: OutlineGroupTemplate): void;
}
export declare class OutlineElementRenderer implements ITreeRenderer<OutlineElement, FuzzyScore, OutlineElementTemplate> {
    private readonly _configurationService;
    private readonly _themeService;
    readonly templateId: string;
    constructor(_configurationService: IConfigurationService, _themeService: IThemeService);
    renderTemplate(container: HTMLElement): OutlineElementTemplate;
    renderElement(node: ITreeNode<OutlineElement, FuzzyScore>, index: number, template: OutlineElementTemplate): void;
    private _renderMarkerInfo;
    private static _symbolKindNames;
    disposeTemplate(_template: OutlineElementTemplate): void;
}
export declare const enum OutlineSortOrder {
    ByPosition = 0,
    ByName = 1,
    ByKind = 2
}
export declare class OutlineFilter implements ITreeFilter<OutlineItem> {
    private readonly _prefix;
    private readonly _textResourceConfigService;
    static readonly configNameToKind: Readonly<{
        showFiles: SymbolKind;
        showModules: SymbolKind;
        showNamespaces: SymbolKind;
        showPackages: SymbolKind;
        showClasses: SymbolKind;
        showMethods: SymbolKind;
        showProperties: SymbolKind;
        showFields: SymbolKind;
        showConstructors: SymbolKind;
        showEnums: SymbolKind;
        showInterfaces: SymbolKind;
        showFunctions: SymbolKind;
        showVariables: SymbolKind;
        showConstants: SymbolKind;
        showStrings: SymbolKind;
        showNumbers: SymbolKind;
        showBooleans: SymbolKind;
        showArrays: SymbolKind;
        showObjects: SymbolKind;
        showKeys: SymbolKind;
        showNull: SymbolKind;
        showEnumMembers: SymbolKind;
        showStructs: SymbolKind;
        showEvents: SymbolKind;
        showOperators: SymbolKind;
        showTypeParameters: SymbolKind;
    }>;
    static readonly kindToConfigName: Readonly<{
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        21: string;
        22: string;
        23: string;
        24: string;
        25: string;
    }>;
    constructor(_prefix: string, _textResourceConfigService: ITextResourceConfigurationService);
    filter(element: OutlineItem): boolean;
}
export declare class OutlineItemComparator implements ITreeSorter<OutlineItem> {
    type: OutlineSortOrder;
    private readonly _collator;
    constructor(type?: OutlineSortOrder);
    compare(a: OutlineItem, b: OutlineItem): number;
}
export declare class OutlineDataSource implements IDataSource<OutlineModel, OutlineItem> {
    getChildren(element: undefined | OutlineModel | OutlineGroup | OutlineElement): Iterable<any>;
}
export declare const SYMBOL_ICON_ARRAY_FOREGROUND: string;
export declare const SYMBOL_ICON_BOOLEAN_FOREGROUND: string;
export declare const SYMBOL_ICON_CLASS_FOREGROUND: string;
export declare const SYMBOL_ICON_COLOR_FOREGROUND: string;
export declare const SYMBOL_ICON_CONSTANT_FOREGROUND: string;
export declare const SYMBOL_ICON_CONSTRUCTOR_FOREGROUND: string;
export declare const SYMBOL_ICON_ENUMERATOR_FOREGROUND: string;
export declare const SYMBOL_ICON_ENUMERATOR_MEMBER_FOREGROUND: string;
export declare const SYMBOL_ICON_EVENT_FOREGROUND: string;
export declare const SYMBOL_ICON_FIELD_FOREGROUND: string;
export declare const SYMBOL_ICON_FILE_FOREGROUND: string;
export declare const SYMBOL_ICON_FOLDER_FOREGROUND: string;
export declare const SYMBOL_ICON_FUNCTION_FOREGROUND: string;
export declare const SYMBOL_ICON_INTERFACE_FOREGROUND: string;
export declare const SYMBOL_ICON_KEY_FOREGROUND: string;
export declare const SYMBOL_ICON_KEYWORD_FOREGROUND: string;
export declare const SYMBOL_ICON_METHOD_FOREGROUND: string;
export declare const SYMBOL_ICON_MODULE_FOREGROUND: string;
export declare const SYMBOL_ICON_NAMESPACE_FOREGROUND: string;
export declare const SYMBOL_ICON_NULL_FOREGROUND: string;
export declare const SYMBOL_ICON_NUMBER_FOREGROUND: string;
export declare const SYMBOL_ICON_OBJECT_FOREGROUND: string;
export declare const SYMBOL_ICON_OPERATOR_FOREGROUND: string;
export declare const SYMBOL_ICON_PACKAGE_FOREGROUND: string;
export declare const SYMBOL_ICON_PROPERTY_FOREGROUND: string;
export declare const SYMBOL_ICON_REFERENCE_FOREGROUND: string;
export declare const SYMBOL_ICON_SNIPPET_FOREGROUND: string;
export declare const SYMBOL_ICON_STRING_FOREGROUND: string;
export declare const SYMBOL_ICON_STRUCT_FOREGROUND: string;
export declare const SYMBOL_ICON_TEXT_FOREGROUND: string;
export declare const SYMBOL_ICON_TYPEPARAMETER_FOREGROUND: string;
export declare const SYMBOL_ICON_UNIT_FOREGROUND: string;
export declare const SYMBOL_ICON_VARIABLE_FOREGROUND: string;

import { ICodeEditor } from '../editorBrowser';
import { TextEdit, WorkspaceEdit, WorkspaceEditMetadata, WorkspaceFileEditOptions } from '../../common/modes';
import { IProgress, IProgressStep } from '../../../platform/progress/common/progress';
import { IDisposable } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
import { UndoRedoSource } from '../../../platform/undoRedo/common/undoRedo';
import { CancellationToken } from '../../../base/common/cancellation';
export declare const IBulkEditService: import("../../../platform/instantiation/common/instantiation").ServiceIdentifier<IBulkEditService>;
export declare class ResourceEdit {
    readonly metadata?: WorkspaceEditMetadata | undefined;
    protected constructor(metadata?: WorkspaceEditMetadata | undefined);
    static convert(edit: WorkspaceEdit): ResourceEdit[];
}
export declare class ResourceTextEdit extends ResourceEdit {
    readonly resource: URI;
    readonly textEdit: TextEdit;
    readonly versionId?: number | undefined;
    readonly metadata?: WorkspaceEditMetadata | undefined;
    constructor(resource: URI, textEdit: TextEdit, versionId?: number | undefined, metadata?: WorkspaceEditMetadata | undefined);
}
export declare class ResourceFileEdit extends ResourceEdit {
    readonly oldResource: URI | undefined;
    readonly newResource: URI | undefined;
    readonly options?: WorkspaceFileEditOptions | undefined;
    readonly metadata?: WorkspaceEditMetadata | undefined;
    constructor(oldResource: URI | undefined, newResource: URI | undefined, options?: WorkspaceFileEditOptions | undefined, metadata?: WorkspaceEditMetadata | undefined);
}
export interface IBulkEditOptions {
    editor?: ICodeEditor;
    progress?: IProgress<IProgressStep>;
    token?: CancellationToken;
    showPreview?: boolean;
    suppressPreview?: boolean;
    label?: string;
    quotableLabel?: string;
    undoRedoSource?: UndoRedoSource;
    undoRedoGroupId?: number;
}
export interface IBulkEditResult {
    ariaSummary: string;
}
export declare type IBulkEditPreviewHandler = (edits: ResourceEdit[], options?: IBulkEditOptions) => Promise<ResourceEdit[]>;
export interface IBulkEditService {
    readonly _serviceBrand: undefined;
    hasPreviewHandler(): boolean;
    setPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable;
    apply(edit: ResourceEdit[], options?: IBulkEditOptions): Promise<IBulkEditResult>;
}

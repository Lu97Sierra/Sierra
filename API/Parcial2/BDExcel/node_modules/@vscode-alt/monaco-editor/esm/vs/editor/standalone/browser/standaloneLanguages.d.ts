import { CancellationToken } from '../../../base/common/cancellation';
import { IDisposable } from '../../../base/common/lifecycle';
import { Range } from '../../common/core/range';
import { TokenizationResult, TokenizationResult2 } from '../../common/core/token';
import * as model from '../../common/model';
import * as modes from '../../common/modes';
import { LanguageConfiguration } from '../../common/modes/languageConfiguration';
import { ILanguageExtensionPoint } from '../../common/services/modeService';
import { IMonarchLanguage } from '../common/monarch/monarchTypes';
import { IStandaloneThemeService } from '../common/standaloneThemeService';
import { IMarkerData } from '../../../platform/markers/common/markers';
/**
 * Register information about a new language.
 */
export declare function register(language: ILanguageExtensionPoint): void;
/**
 * Get the information of all the registered languages.
 */
export declare function getLanguages(): ILanguageExtensionPoint[];
export declare function getEncodedLanguageId(languageId: string): number;
/**
 * An event emitted when a language is first time needed (e.g. a model has it set).
 * @event
 */
export declare function onLanguage(languageId: string, callback: () => void): IDisposable;
/**
 * Set the editing configuration for a language.
 */
export declare function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable;
/**
 * @internal
 */
export declare class EncodedTokenizationSupport2Adapter implements modes.ITokenizationSupport {
    private readonly _languageIdentifier;
    private readonly _actual;
    constructor(languageIdentifier: modes.LanguageIdentifier, actual: EncodedTokensProvider);
    getInitialState(): modes.IState;
    tokenize(line: string, state: modes.IState, offsetDelta: number): TokenizationResult;
    tokenize2(line: string, state: modes.IState): TokenizationResult2;
}
/**
 * @internal
 */
export declare class TokenizationSupport2Adapter implements modes.ITokenizationSupport {
    private readonly _standaloneThemeService;
    private readonly _languageIdentifier;
    private readonly _actual;
    constructor(standaloneThemeService: IStandaloneThemeService, languageIdentifier: modes.LanguageIdentifier, actual: TokensProvider);
    getInitialState(): modes.IState;
    private static _toClassicTokens;
    static adaptTokenize(language: string, actual: {
        tokenize(line: string, state: modes.IState): ILineTokens;
    }, line: string, state: modes.IState, offsetDelta: number): TokenizationResult;
    tokenize(line: string, state: modes.IState, offsetDelta: number): TokenizationResult;
    private _toBinaryTokens;
    tokenize2(line: string, state: modes.IState, offsetDelta: number): TokenizationResult2;
}
/**
 * A token.
 */
export interface IToken {
    startIndex: number;
    scopes: string;
}
/**
 * The result of a line tokenization.
 */
export interface ILineTokens {
    /**
     * The list of tokens on the line.
     */
    tokens: IToken[];
    /**
     * The tokenization end state.
     * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.
     */
    endState: modes.IState;
}
/**
 * The result of a line tokenization.
 */
export interface IEncodedLineTokens {
    /**
     * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:
     *  - at offset 2*i => startIndex
     *  - at offset 2*i + 1 => metadata
     * Meta data is in binary format:
     * - -------------------------------------------
     *     3322 2222 2222 1111 1111 1100 0000 0000
     *     1098 7654 3210 9876 5432 1098 7654 3210
     * - -------------------------------------------
     *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL
     * - -------------------------------------------
     *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.
     *  - T = StandardTokenType (3 bits): Other = 0, Comment = 1, String = 2, RegEx = 4.
     *  - F = FontStyle (3 bits): None = 0, Italic = 1, Bold = 2, Underline = 4.
     *  - f = foreground ColorId (9 bits)
     *  - b = background ColorId (9 bits)
     *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:
     * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,
     * id = 1 is for the default foreground color, id = 2 for the default background.
     */
    tokens: Uint32Array;
    /**
     * The tokenization end state.
     * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.
     */
    endState: modes.IState;
}
/**
 * A "manual" provider of tokens.
 */
export interface TokensProvider {
    /**
     * The initial state of a language. Will be the state passed in to tokenize the first line.
     */
    getInitialState(): modes.IState;
    /**
     * Tokenize a line given the state at the beginning of the line.
     */
    tokenize(line: string, state: modes.IState): ILineTokens;
}
/**
 * A "manual" provider of tokens, returning tokens in a binary form.
 */
export interface EncodedTokensProvider {
    /**
     * The initial state of a language. Will be the state passed in to tokenize the first line.
     */
    getInitialState(): modes.IState;
    /**
     * Tokenize a line given the state at the beginning of the line.
     */
    tokenizeEncoded(line: string, state: modes.IState): IEncodedLineTokens;
    /**
     * Tokenize a line given the state at the beginning of the line.
     */
    tokenize?(line: string, state: modes.IState): ILineTokens;
}
/**
 * Set the tokens provider for a language (manual implementation).
 */
export declare function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable;
/**
 * Set the tokens provider for a language (monarch implementation).
 */
export declare function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable;
/**
 * Register a reference provider (used by e.g. reference search).
 */
export declare function registerReferenceProvider(languageId: string, provider: modes.ReferenceProvider): IDisposable;
/**
 * Register a rename provider (used by e.g. rename symbol).
 */
export declare function registerRenameProvider(languageId: string, provider: modes.RenameProvider): IDisposable;
/**
 * Register a signature help provider (used by e.g. parameter hints).
 */
export declare function registerSignatureHelpProvider(languageId: string, provider: modes.SignatureHelpProvider): IDisposable;
/**
 * Register a hover provider (used by e.g. editor hover).
 */
export declare function registerHoverProvider(languageId: string, provider: modes.HoverProvider): IDisposable;
/**
 * Register a document symbol provider (used by e.g. outline).
 */
export declare function registerDocumentSymbolProvider(languageId: string, provider: modes.DocumentSymbolProvider): IDisposable;
/**
 * Register a document highlight provider (used by e.g. highlight occurrences).
 */
export declare function registerDocumentHighlightProvider(languageId: string, provider: modes.DocumentHighlightProvider): IDisposable;
/**
 * Register an linked editing range provider.
 */
export declare function registerLinkedEditingRangeProvider(languageId: string, provider: modes.LinkedEditingRangeProvider): IDisposable;
/**
 * Register a definition provider (used by e.g. go to definition).
 */
export declare function registerDefinitionProvider(languageId: string, provider: modes.DefinitionProvider): IDisposable;
/**
 * Register a implementation provider (used by e.g. go to implementation).
 */
export declare function registerImplementationProvider(languageId: string, provider: modes.ImplementationProvider): IDisposable;
/**
 * Register a type definition provider (used by e.g. go to type definition).
 */
export declare function registerTypeDefinitionProvider(languageId: string, provider: modes.TypeDefinitionProvider): IDisposable;
/**
 * Register a code lens provider (used by e.g. inline code lenses).
 */
export declare function registerCodeLensProvider(languageId: string, provider: modes.CodeLensProvider): IDisposable;
/**
 * Register a code action provider (used by e.g. quick fix).
 */
export declare function registerCodeActionProvider(languageId: string, provider: CodeActionProvider): IDisposable;
/**
 * Register a formatter that can handle only entire models.
 */
export declare function registerDocumentFormattingEditProvider(languageId: string, provider: modes.DocumentFormattingEditProvider): IDisposable;
/**
 * Register a formatter that can handle a range inside a model.
 */
export declare function registerDocumentRangeFormattingEditProvider(languageId: string, provider: modes.DocumentRangeFormattingEditProvider): IDisposable;
/**
 * Register a formatter than can do formatting as the user types.
 */
export declare function registerOnTypeFormattingEditProvider(languageId: string, provider: modes.OnTypeFormattingEditProvider): IDisposable;
/**
 * Register a link provider that can find links in text.
 */
export declare function registerLinkProvider(languageId: string, provider: modes.LinkProvider): IDisposable;
/**
 * Register a completion item provider (use by e.g. suggestions).
 */
export declare function registerCompletionItemProvider(languageId: string, provider: modes.CompletionItemProvider): IDisposable;
/**
 * Register a document color provider (used by Color Picker, Color Decorator).
 */
export declare function registerColorProvider(languageId: string, provider: modes.DocumentColorProvider): IDisposable;
/**
 * Register a folding range provider
 */
export declare function registerFoldingRangeProvider(languageId: string, provider: modes.FoldingRangeProvider): IDisposable;
/**
 * Register a declaration provider
 */
export declare function registerDeclarationProvider(languageId: string, provider: modes.DeclarationProvider): IDisposable;
/**
 * Register a selection range provider
 */
export declare function registerSelectionRangeProvider(languageId: string, provider: modes.SelectionRangeProvider): IDisposable;
/**
 * Register a document semantic tokens provider
 */
export declare function registerDocumentSemanticTokensProvider(languageId: string, provider: modes.DocumentSemanticTokensProvider): IDisposable;
/**
 * Register a document range semantic tokens provider
 */
export declare function registerDocumentRangeSemanticTokensProvider(languageId: string, provider: modes.DocumentRangeSemanticTokensProvider): IDisposable;
/**
 * Contains additional diagnostic information about the context in which
 * a [code action](#CodeActionProvider.provideCodeActions) is run.
 */
export interface CodeActionContext {
    /**
     * An array of diagnostics.
     */
    readonly markers: IMarkerData[];
    /**
     * Requested kind of actions to return.
     */
    readonly only?: string;
}
/**
 * The code action interface defines the contract between extensions and
 * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.
 */
export interface CodeActionProvider {
    /**
     * Provide commands for the given document and range.
     */
    provideCodeActions(model: model.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): modes.ProviderResult<modes.CodeActionList>;
}
/**
 * @internal
 */
export declare function createMonacoLanguagesAPI(): typeof monaco.languages;

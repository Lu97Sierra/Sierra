import './media/diffEditor.css';
import { Event } from '../../../base/common/event';
import { Disposable } from '../../../base/common/lifecycle';
import * as editorBrowser from '../editorBrowser';
import { ICodeEditorService } from '../services/codeEditorService';
import { CodeEditorWidget } from './codeEditorWidget';
import { IDiffEditorOptions, IEditorOptions } from '../../common/config/editorOptions';
import { IPosition, Position } from '../../common/core/position';
import { IRange, Range } from '../../common/core/range';
import { ISelection, Selection } from '../../common/core/selection';
import * as editorCommon from '../../common/editorCommon';
import { IModelDecorationsChangeAccessor } from '../../common/model';
import { IDiffComputationResult, IEditorWorkerService } from '../../common/services/editorWorkerService';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../platform/instantiation/common/instantiation';
import { INotificationService } from '../../../platform/notification/common/notification';
import { IThemeService } from '../../../platform/theme/common/themeService';
import { IContextMenuService } from '../../../platform/contextview/browser/contextView';
import { IClipboardService } from '../../../platform/clipboard/common/clipboardService';
import { IEditorProgressService } from '../../../platform/progress/common/progress';
export declare class DiffEditorWidget extends Disposable implements editorBrowser.IDiffEditor {
    private readonly _editorProgressService;
    private static readonly ONE_OVERVIEW_WIDTH;
    static readonly ENTIRE_DIFF_OVERVIEW_WIDTH = 30;
    private static readonly UPDATE_DIFF_DECORATIONS_DELAY;
    private readonly _onDidDispose;
    readonly onDidDispose: Event<void>;
    private readonly _onDidUpdateDiff;
    readonly onDidUpdateDiff: Event<void>;
    private readonly _onDidContentSizeChange;
    readonly onDidContentSizeChange: Event<editorCommon.IContentSizeChangedEvent>;
    private readonly _id;
    private _state;
    private _updatingDiffProgress;
    private readonly _domElement;
    protected readonly _containerDomElement: HTMLElement;
    private readonly _overviewDomElement;
    private readonly _overviewViewportDomElement;
    private readonly _elementSizeObserver;
    private readonly _originalEditor;
    private readonly _originalDomNode;
    private readonly _originalEditorState;
    private _originalOverviewRuler;
    private readonly _modifiedEditor;
    private readonly _modifiedDomNode;
    private readonly _modifiedEditorState;
    private _modifiedOverviewRuler;
    private _currentlyChangingViewZones;
    private _beginUpdateDecorationsTimeout;
    private _diffComputationToken;
    private _diffComputationResult;
    private _isVisible;
    private _isHandlingScrollEvent;
    private _ignoreTrimWhitespace;
    private _originalIsEditable;
    private _diffCodeLens;
    private _diffWordWrap;
    private _renderSideBySide;
    private _maxComputationTime;
    private _renderIndicators;
    private _enableSplitViewResizing;
    private _strategy;
    private readonly _updateDecorationsRunner;
    private readonly _editorWorkerService;
    protected _contextKeyService: IContextKeyService;
    private readonly _codeEditorService;
    private readonly _themeService;
    private readonly _notificationService;
    private readonly _reviewPane;
    constructor(domElement: HTMLElement, options: editorBrowser.IDiffEditorConstructionOptions, clipboardService: IClipboardService, editorWorkerService: IEditorWorkerService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, themeService: IThemeService, notificationService: INotificationService, contextMenuService: IContextMenuService, _editorProgressService: IEditorProgressService);
    get ignoreTrimWhitespace(): boolean;
    get renderSideBySide(): boolean;
    get maxComputationTime(): number;
    get renderIndicators(): boolean;
    getContentHeight(): number;
    private _setState;
    hasWidgetFocus(): boolean;
    diffReviewNext(): void;
    diffReviewPrev(): void;
    private static _getClassName;
    private _recreateOverviewRulers;
    private _createLeftHandSideEditor;
    private _createRightHandSideEditor;
    protected _createInnerEditor(instantiationService: IInstantiationService, container: HTMLElement, options: IEditorOptions): CodeEditorWidget;
    dispose(): void;
    getId(): string;
    getEditorType(): string;
    getLineChanges(): editorCommon.ILineChange[] | null;
    getDiffComputationResult(): IDiffComputationResult | null;
    getOriginalEditor(): editorBrowser.ICodeEditor;
    getModifiedEditor(): editorBrowser.ICodeEditor;
    updateOptions(newOptions: IDiffEditorOptions): void;
    getModel(): editorCommon.IDiffEditorModel;
    setModel(model: editorCommon.IDiffEditorModel): void;
    getDomNode(): HTMLElement;
    getVisibleColumnFromPosition(position: IPosition): number;
    getStatusbarColumn(position: IPosition): number;
    getPosition(): Position | null;
    setPosition(position: IPosition): void;
    revealLine(lineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLineInCenter(lineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLineInCenterIfOutsideViewport(lineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLineNearTop(lineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealPosition(position: IPosition, scrollType?: editorCommon.ScrollType): void;
    revealPositionInCenter(position: IPosition, scrollType?: editorCommon.ScrollType): void;
    revealPositionInCenterIfOutsideViewport(position: IPosition, scrollType?: editorCommon.ScrollType): void;
    revealPositionNearTop(position: IPosition, scrollType?: editorCommon.ScrollType): void;
    getSelection(): Selection | null;
    getSelections(): Selection[] | null;
    setSelection(range: IRange): void;
    setSelection(editorRange: Range): void;
    setSelection(selection: ISelection): void;
    setSelection(editorSelection: Selection): void;
    setSelections(ranges: readonly ISelection[]): void;
    revealLines(startLineNumber: number, endLineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLinesInCenter(startLineNumber: number, endLineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLinesInCenterIfOutsideViewport(startLineNumber: number, endLineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealLinesNearTop(startLineNumber: number, endLineNumber: number, scrollType?: editorCommon.ScrollType): void;
    revealRange(range: IRange, scrollType?: editorCommon.ScrollType, revealVerticalInCenter?: boolean, revealHorizontal?: boolean): void;
    revealRangeInCenter(range: IRange, scrollType?: editorCommon.ScrollType): void;
    revealRangeInCenterIfOutsideViewport(range: IRange, scrollType?: editorCommon.ScrollType): void;
    revealRangeNearTop(range: IRange, scrollType?: editorCommon.ScrollType): void;
    revealRangeNearTopIfOutsideViewport(range: IRange, scrollType?: editorCommon.ScrollType): void;
    revealRangeAtTop(range: IRange, scrollType?: editorCommon.ScrollType): void;
    getSupportedActions(): editorCommon.IEditorAction[];
    saveViewState(): editorCommon.IDiffEditorViewState;
    restoreViewState(s: editorCommon.IDiffEditorViewState): void;
    layout(dimension?: editorCommon.IDimension): void;
    focus(): void;
    hasTextFocus(): boolean;
    onVisible(): void;
    onHide(): void;
    trigger(source: string | null | undefined, handlerId: string, payload: any): void;
    changeDecorations(callback: (changeAccessor: IModelDecorationsChangeAccessor) => any): any;
    private _onDidContainerSizeChanged;
    private _getReviewHeight;
    private _layoutOverviewRulers;
    private _onViewZonesChanged;
    private _beginUpdateDecorationsSoon;
    private _lastOriginalWarning;
    private _lastModifiedWarning;
    private static _equals;
    private _beginUpdateDecorations;
    private _cleanViewZonesAndDecorations;
    private _updateDecorations;
    private _adjustOptionsForSubEditor;
    private _adjustOptionsForLeftHandSide;
    private _adjustOptionsForRightHandSide;
    doLayout(): void;
    private _doLayout;
    private _layoutOverviewViewport;
    private _computeOverviewViewport;
    private _createDataSource;
    private _setStrategy;
    private _getLineChangeAtOrBeforeLineNumber;
    private _getEquivalentLineForOriginalLineNumber;
    private _getEquivalentLineForModifiedLineNumber;
    getDiffLineInformationForOriginal(lineNumber: number): editorBrowser.IDiffLineInformation | null;
    getDiffLineInformationForModified(lineNumber: number): editorBrowser.IDiffLineInformation | null;
}

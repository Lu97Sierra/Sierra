import { Event } from '../../../base/common/event';
import { IDisposable, Disposable } from '../../../base/common/lifecycle';
import { IPosition, Position } from '../core/position';
import { ISelection, Selection } from '../core/selection';
import { IRange, Range } from '../core/range';
import { IConfiguration, IViewState, ScrollType, ICursorState, ICommand, INewScrollPosition } from '../editorCommon';
import { EndOfLinePreference, IActiveIndentGuideInfo, ITextModel, TextModelResolvedOptions, IIdentifiedSingleEditOperation, ICursorStateComputer } from '../model';
import * as viewEvents from '../view/viewEvents';
import { ViewLayout } from '../viewLayout/viewLayout';
import { ILineBreaksComputerFactory } from './splitLinesCollection';
import { ICoordinatesConverter, ILineBreaksComputer, IOverviewRulerDecorations, IViewModel, MinimapLinesRenderingData, ViewLineData, ViewLineRenderingData, ViewModelDecoration } from './viewModel';
import { EditorTheme } from '../view/viewContext';
import { PartialCursorState, CursorState, IColumnSelectData, EditOperationType, CursorConfiguration } from '../controller/cursorCommon';
import { CursorChangeReason } from '../controller/cursorEvents';
import { IWhitespaceChangeAccessor } from '../viewLayout/linesLayout';
import { OutgoingViewModelEvent } from './viewModelEventDispatcher';
import { ViewEventHandler } from './viewEventHandler';
export declare class ViewModel extends Disposable implements IViewModel {
    private readonly _editorId;
    private readonly _configuration;
    readonly model: ITextModel;
    private readonly _eventDispatcher;
    readonly onEvent: Event<OutgoingViewModelEvent>;
    cursorConfig: CursorConfiguration;
    private readonly _tokenizeViewportSoon;
    private readonly _updateConfigurationViewLineCount;
    private _hasFocus;
    private _viewportStartLine;
    private _viewportStartLineTrackedRange;
    private _viewportStartLineDelta;
    private readonly _lines;
    readonly coordinatesConverter: ICoordinatesConverter;
    readonly viewLayout: ViewLayout;
    private readonly _cursor;
    private readonly _decorations;
    constructor(editorId: number, configuration: IConfiguration, model: ITextModel, domLineBreaksComputerFactory: ILineBreaksComputerFactory, monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory, scheduleAtNextAnimationFrame: (callback: () => void) => IDisposable);
    dispose(): void;
    createLineBreaksComputer(): ILineBreaksComputer;
    addViewEventHandler(eventHandler: ViewEventHandler): void;
    removeViewEventHandler(eventHandler: ViewEventHandler): void;
    private _updateConfigurationViewLineCountNow;
    tokenizeViewport(): void;
    setHasFocus(hasFocus: boolean): void;
    onCompositionStart(): void;
    onCompositionEnd(): void;
    onDidColorThemeChange(): void;
    private _onConfigurationChanged;
    private _registerModelEvents;
    setHiddenAreas(ranges: Range[]): void;
    getVisibleRangesPlusViewportAboveBelow(): Range[];
    getVisibleRanges(): Range[];
    private _toModelVisibleRanges;
    getCompletelyVisibleViewRange(): Range;
    getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;
    saveState(): IViewState;
    reduceRestoreState(state: IViewState): {
        scrollLeft: number;
        scrollTop: number;
    };
    private _reduceRestoreStateCompatibility;
    private getTabSize;
    getTextModelOptions(): TextModelResolvedOptions;
    getLineCount(): number;
    /**
     * Gives a hint that a lot of requests are about to come in for these line numbers.
     */
    setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;
    getActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;
    getLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];
    getLineContent(lineNumber: number): string;
    getLineLength(lineNumber: number): number;
    getLineMinColumn(lineNumber: number): number;
    getLineMaxColumn(lineNumber: number): number;
    getLineFirstNonWhitespaceColumn(lineNumber: number): number;
    getLineLastNonWhitespaceColumn(lineNumber: number): number;
    getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];
    getViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;
    getViewLineData(lineNumber: number): ViewLineData;
    getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;
    getAllOverviewRulerDecorations(theme: EditorTheme): IOverviewRulerDecorations;
    invalidateOverviewRulerColorCache(): void;
    invalidateMinimapColorCache(): void;
    getValueInRange(range: Range, eol: EndOfLinePreference): string;
    getModelLineMaxColumn(modelLineNumber: number): number;
    validateModelPosition(position: IPosition): Position;
    validateModelRange(range: IRange): Range;
    deduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;
    getEOL(): string;
    getPlainTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[];
    getRichTextToCopy(modelRanges: Range[], emptySelectionClipboard: boolean): {
        html: string;
        mode: string;
    } | null;
    private _getHTMLToCopy;
    private _getColorMap;
    pushStackElement(): void;
    getPrimaryCursorState(): CursorState;
    getLastAddedCursorIndex(): number;
    getCursorStates(): CursorState[];
    setCursorStates(source: string | null | undefined, reason: CursorChangeReason, states: PartialCursorState[] | null): void;
    getCursorColumnSelectData(): IColumnSelectData;
    setCursorColumnSelectData(columnSelectData: IColumnSelectData): void;
    getPrevEditOperationType(): EditOperationType;
    setPrevEditOperationType(type: EditOperationType): void;
    getSelection(): Selection;
    getSelections(): Selection[];
    getPosition(): Position;
    setSelections(source: string | null | undefined, selections: readonly ISelection[]): void;
    saveCursorState(): ICursorState[];
    restoreCursorState(states: ICursorState[]): void;
    private _executeCursorEdit;
    executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): void;
    startComposition(): void;
    endComposition(source?: string | null | undefined): void;
    type(text: string, source?: string | null | undefined): void;
    replacePreviousChar(text: string, replaceCharCnt: number, source?: string | null | undefined): void;
    paste(text: string, pasteOnNewLine: boolean, multicursorText?: string[] | null | undefined, source?: string | null | undefined): void;
    cut(source?: string | null | undefined): void;
    executeCommand(command: ICommand, source?: string | null | undefined): void;
    executeCommands(commands: ICommand[], source?: string | null | undefined): void;
    revealPrimaryCursor(source: string | null | undefined, revealHorizontal: boolean): void;
    revealTopMostCursor(source: string | null | undefined): void;
    revealBottomMostCursor(source: string | null | undefined): void;
    revealRange(source: string | null | undefined, revealHorizontal: boolean, viewRange: Range, verticalType: viewEvents.VerticalRevealType, scrollType: ScrollType): void;
    getVerticalOffsetForLineNumber(viewLineNumber: number): number;
    getScrollTop(): number;
    setScrollTop(newScrollTop: number, scrollType: ScrollType): void;
    setScrollPosition(position: INewScrollPosition, type: ScrollType): void;
    deltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;
    changeWhitespace(callback: (accessor: IWhitespaceChangeAccessor) => void): void;
    setMaxLineWidth(maxLineWidth: number): void;
    private _withViewEventsCollector;
}

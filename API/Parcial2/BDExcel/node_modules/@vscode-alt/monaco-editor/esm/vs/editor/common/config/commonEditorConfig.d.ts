import { Event } from '../../../base/common/event';
import { Disposable } from '../../../base/common/lifecycle';
import { IEditorOptions, ValidatedEditorOptions, IComputedEditorOptions, ConfigurationChangedEvent, EditorOption, FindComputedEditorOptionValueById } from './editorOptions';
import { BareFontInfo, FontInfo } from './fontInfo';
import { IConfiguration, IDimension } from '../editorCommon';
import { IConfigurationNode } from '../../../platform/configuration/common/configurationRegistry';
import { AccessibilitySupport } from '../../../platform/accessibility/common/accessibility';
/**
 * Control what pressing Tab does.
 * If it is false, pressing Tab or Shift-Tab will be handled by the editor.
 * If it is true, pressing Tab or Shift-Tab will move the browser focus.
 * Defaults to false.
 */
export interface ITabFocus {
    onDidChangeTabFocus: Event<boolean>;
    getTabFocusMode(): boolean;
    setTabFocusMode(tabFocusMode: boolean): void;
}
export declare const TabFocus: ITabFocus;
export interface IEnvConfiguration {
    extraEditorClassName: string;
    outerWidth: number;
    outerHeight: number;
    emptySelectionClipboard: boolean;
    pixelRatio: number;
    zoomLevel: number;
    accessibilitySupport: AccessibilitySupport;
}
export declare class ComputedEditorOptions implements IComputedEditorOptions {
    private readonly _values;
    _read<T>(id: EditorOption): T;
    get<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;
    _write<T>(id: EditorOption, value: T): void;
}
export declare abstract class CommonEditorConfiguration extends Disposable implements IConfiguration {
    private _onDidChange;
    readonly onDidChange: Event<ConfigurationChangedEvent>;
    private _onDidChangeFast;
    readonly onDidChangeFast: Event<ConfigurationChangedEvent>;
    readonly isSimpleWidget: boolean;
    private _computeOptionsMemory;
    options: ComputedEditorOptions;
    private _isDominatedByLongLines;
    private _viewLineCount;
    private _lineNumbersDigitCount;
    private _rawOptions;
    private _readOptions;
    protected _validatedOptions: ValidatedEditorOptions;
    constructor(isSimpleWidget: boolean, _options: IEditorOptions);
    observeReferenceElement(dimension?: IDimension): void;
    dispose(): void;
    protected _recomputeOptions(): void;
    getRawOptions(): IEditorOptions;
    private _computeInternalOptions;
    private static _subsetEquals;
    updateOptions(_newOptions: IEditorOptions): void;
    setIsDominatedByLongLines(isDominatedByLongLines: boolean): void;
    setMaxLineNumber(maxLineNumber: number): void;
    setViewLineCount(viewLineCount: number): void;
    private static _digitCount;
    protected abstract _getEnvConfiguration(): IEnvConfiguration;
    protected abstract readConfiguration(styling: BareFontInfo): FontInfo;
}
export declare const editorConfigurationBaseNode: Readonly<IConfigurationNode>;
export declare function isEditorConfigurationKey(key: string): boolean;
export declare function isDiffEditorConfigurationKey(key: string): boolean;

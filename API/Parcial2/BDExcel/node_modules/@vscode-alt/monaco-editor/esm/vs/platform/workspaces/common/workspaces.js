/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { createDecorator } from '../../instantiation/common/instantiation.js';
import { localize } from '../../../nls.js';
import { URI } from '../../../base/common/uri.js';
import { isWindows, isLinux, isMacintosh } from '../../../base/common/platform.js';
import { extname, isAbsolute } from '../../../base/common/path.js';
import { dirname, resolvePath, isEqualAuthority, relativePath, extname as resourceExtname, extUriBiasedIgnorePathCase } from '../../../base/common/resources.js';
import * as jsonEdit from '../../../base/common/jsonEdit.js';
import * as json from '../../../base/common/json.js';
import { Schemas } from '../../../base/common/network.js';
import { normalizeDriveLetter } from '../../../base/common/labels.js';
import { toSlashes } from '../../../base/common/extpath.js';
import { getRemoteAuthority } from '../../remote/common/remoteHosts.js';
export const WORKSPACE_EXTENSION = 'code-workspace';
export const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', "Code Workspace"), extensions: [WORKSPACE_EXTENSION] }];
export const UNTITLED_WORKSPACE_NAME = 'workspace.json';
export const IWorkspacesService = createDecorator('workspacesService');
export function isRecentWorkspace(curr) {
    return curr.hasOwnProperty('workspace');
}
export function isRecentFolder(curr) {
    return curr.hasOwnProperty('folderUri');
}
export function isRecentFile(curr) {
    return curr.hasOwnProperty('fileUri');
}
export function reviveWorkspaceIdentifier(workspace) {
    return { id: workspace.id, configPath: URI.revive(workspace.configPath) };
}
export function isStoredWorkspaceFolder(thing) {
    return isRawFileWorkspaceFolder(thing) || isRawUriWorkspaceFolder(thing);
}
export function isRawFileWorkspaceFolder(thing) {
    return thing
        && typeof thing === 'object'
        && typeof thing.path === 'string'
        && (!thing.name || typeof thing.name === 'string');
}
export function isRawUriWorkspaceFolder(thing) {
    return thing
        && typeof thing === 'object'
        && typeof thing.uri === 'string'
        && (!thing.name || typeof thing.name === 'string');
}
export function isSingleFolderWorkspaceIdentifier(obj) {
    return obj instanceof URI;
}
export function isWorkspaceIdentifier(obj) {
    const workspaceIdentifier = obj;
    return workspaceIdentifier && typeof workspaceIdentifier.id === 'string' && workspaceIdentifier.configPath instanceof URI;
}
export function toWorkspaceIdentifier(workspace) {
    if (workspace.configuration) {
        return {
            configPath: workspace.configuration,
            id: workspace.id
        };
    }
    if (workspace.folders.length === 1) {
        return workspace.folders[0].uri;
    }
    // Empty workspace
    return undefined;
}
export function isUntitledWorkspace(path, environmentService) {
    return extUriBiasedIgnorePathCase.isEqualOrParent(path, environmentService.untitledWorkspacesHome);
}
export function isSingleFolderWorkspaceInitializationPayload(obj) {
    return isSingleFolderWorkspaceIdentifier(obj.folder);
}
const WORKSPACE_SUFFIX = '.' + WORKSPACE_EXTENSION;
export function hasWorkspaceFileExtension(path) {
    const ext = (typeof path === 'string') ? extname(path) : resourceExtname(path);
    return ext === WORKSPACE_SUFFIX;
}
const SLASH = '/';
/**
 * Given a folder URI and the workspace config folder, computes the IStoredWorkspaceFolder using
* a relative or absolute path or a uri.
 * Undefined is returned if the folderURI and the targetConfigFolderURI don't have the same schema or authority
 *
 * @param folderURI a workspace folder
 * @param forceAbsolute if set, keep the path absolute
 * @param folderName a workspace name
 * @param targetConfigFolderURI the folder where the workspace is living in
 * @param useSlashForPath if set, use forward slashes for file paths on windows
 */
export function getStoredWorkspaceFolder(folderURI, forceAbsolute, folderName, targetConfigFolderURI, useSlashForPath = !isWindows) {
    if (folderURI.scheme !== targetConfigFolderURI.scheme) {
        return { name: folderName, uri: folderURI.toString(true) };
    }
    let folderPath = !forceAbsolute ? relativePath(targetConfigFolderURI, folderURI) : undefined;
    if (folderPath !== undefined) {
        if (folderPath.length === 0) {
            folderPath = '.';
        }
        else if (isWindows && folderURI.scheme === Schemas.file && !useSlashForPath) {
            // Windows gets special treatment:
            // - use backslahes unless slash is used by other existing folders
            folderPath = folderPath.replace(/\//g, '\\');
        }
    }
    else {
        // use absolute path
        if (folderURI.scheme === Schemas.file) {
            folderPath = folderURI.fsPath;
            if (isWindows) {
                // Windows gets special treatment:
                // - normalize all paths to get nice casing of drive letters
                // - use backslahes unless slash is used by other existing folders
                folderPath = normalizeDriveLetter(folderPath);
                if (useSlashForPath) {
                    folderPath = toSlashes(folderPath);
                }
            }
        }
        else {
            if (!isEqualAuthority(folderURI.authority, targetConfigFolderURI.authority)) {
                return { name: folderName, uri: folderURI.toString(true) };
            }
            folderPath = folderURI.path;
        }
    }
    return { name: folderName, path: folderPath };
}
/**
 * Rewrites the content of a workspace file to be saved at a new location.
 * Throws an exception if file is not a valid workspace file
 */
export function rewriteWorkspaceFileForNewLocation(rawWorkspaceContents, configPathURI, isFromUntitledWorkspace, targetConfigPathURI) {
    let storedWorkspace = doParseStoredWorkspace(configPathURI, rawWorkspaceContents);
    const sourceConfigFolder = dirname(configPathURI);
    const targetConfigFolder = dirname(targetConfigPathURI);
    const rewrittenFolders = [];
    const slashForPath = useSlashForPath(storedWorkspace.folders);
    for (const folder of storedWorkspace.folders) {
        const folderURI = isRawFileWorkspaceFolder(folder) ? resolvePath(sourceConfigFolder, folder.path) : URI.parse(folder.uri);
        let absolute;
        if (isFromUntitledWorkspace) {
            // if it was an untitled workspace, try to make paths relative
            absolute = false;
        }
        else {
            // for existing workspaces, preserve whether a path was absolute or relative
            absolute = !isRawFileWorkspaceFolder(folder) || isAbsolute(folder.path);
        }
        rewrittenFolders.push(getStoredWorkspaceFolder(folderURI, absolute, folder.name, targetConfigFolder, slashForPath));
    }
    // Preserve as much of the existing workspace as possible by using jsonEdit
    // and only changing the folders portion.
    const formattingOptions = { insertSpaces: false, tabSize: 4, eol: (isLinux || isMacintosh) ? '\n' : '\r\n' };
    const edits = jsonEdit.setProperty(rawWorkspaceContents, ['folders'], rewrittenFolders, formattingOptions);
    let newContent = jsonEdit.applyEdits(rawWorkspaceContents, edits);
    if (storedWorkspace.remoteAuthority === getRemoteAuthority(targetConfigPathURI)) {
        // unsaved remote workspaces have the remoteAuthority set. Remove it when no longer nexessary.
        newContent = jsonEdit.applyEdits(newContent, jsonEdit.removeProperty(newContent, ['remoteAuthority'], formattingOptions));
    }
    return newContent;
}
function doParseStoredWorkspace(path, contents) {
    // Parse workspace file
    let storedWorkspace = json.parse(contents); // use fault tolerant parser
    // Filter out folders which do not have a path or uri set
    if (storedWorkspace && Array.isArray(storedWorkspace.folders)) {
        storedWorkspace.folders = storedWorkspace.folders.filter(folder => isStoredWorkspaceFolder(folder));
    }
    else {
        throw new Error(`${path} looks like an invalid workspace file.`);
    }
    return storedWorkspace;
}
export function useSlashForPath(storedFolders) {
    if (isWindows) {
        return storedFolders.some(folder => isRawFileWorkspaceFolder(folder) && folder.path.indexOf(SLASH) >= 0);
    }
    return true;
}
export function restoreRecentlyOpened(data, logService) {
    const result = { workspaces: [], files: [] };
    if (data) {
        const restoreGracefully = function (entries, func) {
            for (let i = 0; i < entries.length; i++) {
                try {
                    func(entries[i], i);
                }
                catch (e) {
                    logService.warn(`Error restoring recent entry ${JSON.stringify(entries[i])}: ${e.toString()}. Skip entry.`);
                }
            }
        };
        const storedRecents = data;
        if (Array.isArray(storedRecents.workspaces3)) {
            restoreGracefully(storedRecents.workspaces3, (workspace, i) => {
                const label = (Array.isArray(storedRecents.workspaceLabels) && storedRecents.workspaceLabels[i]) || undefined;
                if (typeof workspace === 'object' && typeof workspace.id === 'string' && typeof workspace.configURIPath === 'string') {
                    result.workspaces.push({ label, workspace: { id: workspace.id, configPath: URI.parse(workspace.configURIPath) } });
                }
                else if (typeof workspace === 'string') {
                    result.workspaces.push({ label, folderUri: URI.parse(workspace) });
                }
            });
        }
        if (Array.isArray(storedRecents.files2)) {
            restoreGracefully(storedRecents.files2, (file, i) => {
                const label = (Array.isArray(storedRecents.fileLabels) && storedRecents.fileLabels[i]) || undefined;
                if (typeof file === 'string') {
                    result.files.push({ label, fileUri: URI.parse(file) });
                }
            });
        }
    }
    return result;
}
export function toStoreData(recents) {
    const serialized = { workspaces3: [], files2: [] };
    let hasLabel = false;
    const workspaceLabels = [];
    for (const recent of recents.workspaces) {
        if (isRecentFolder(recent)) {
            serialized.workspaces3.push(recent.folderUri.toString());
        }
        else {
            serialized.workspaces3.push({ id: recent.workspace.id, configURIPath: recent.workspace.configPath.toString() });
        }
        workspaceLabels.push(recent.label || null);
        hasLabel = hasLabel || !!recent.label;
    }
    if (hasLabel) {
        serialized.workspaceLabels = workspaceLabels;
    }
    hasLabel = false;
    const fileLabels = [];
    for (const recent of recents.files) {
        serialized.files2.push(recent.fileUri.toString());
        fileLabels.push(recent.label || null);
        hasLabel = hasLabel || !!recent.label;
    }
    if (hasLabel) {
        serialized.fileLabels = fileLabels;
    }
    return serialized;
}
//#endregion

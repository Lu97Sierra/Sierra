import { WrappingIndent } from '../config/editorOptions';
import { LineTokens } from '../core/lineTokens';
import { Position } from '../core/position';
import { IRange, Range } from '../core/range';
import { EndOfLinePreference, IActiveIndentGuideInfo, IModelDecoration, ITextModel } from '../model';
import * as viewEvents from '../view/viewEvents';
import { ICoordinatesConverter, ILineBreaksComputer, IOverviewRulerDecorations, LineBreakData, ViewLineData } from './viewModel';
import { IDisposable } from '../../../base/common/lifecycle';
import { FontInfo } from '../config/fontInfo';
import { EditorTheme } from '../view/viewContext';
export interface ILineBreaksComputerFactory {
    createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent): ILineBreaksComputer;
}
export interface ISimpleModel {
    getLineTokens(lineNumber: number): LineTokens;
    getLineContent(lineNumber: number): string;
    getLineLength(lineNumber: number): number;
    getLineMinColumn(lineNumber: number): number;
    getLineMaxColumn(lineNumber: number): number;
    getValueInRange(range: IRange, eol?: EndOfLinePreference): string;
}
export interface ISplitLine {
    isVisible(): boolean;
    setVisible(isVisible: boolean): ISplitLine;
    getLineBreakData(): LineBreakData | null;
    getViewLineCount(): number;
    getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;
    getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;
    getViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;
    getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;
    getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;
    getViewLinesData(model: ISimpleModel, modelLineNumber: number, fromOuputLineIndex: number, toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;
    getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;
    getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position;
    getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;
}
export interface IViewModelLinesCollection extends IDisposable {
    createCoordinatesConverter(): ICoordinatesConverter;
    setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent): boolean;
    setTabSize(newTabSize: number): boolean;
    getHiddenAreas(): Range[];
    setHiddenAreas(_ranges: Range[]): boolean;
    createLineBreaksComputer(): ILineBreaksComputer;
    onModelFlushed(): void;
    onModelLinesDeleted(versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;
    onModelLinesInserted(versionId: number, fromLineNumber: number, toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null;
    onModelLineChanged(versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];
    acceptVersionId(versionId: number): void;
    getViewLineCount(): number;
    getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;
    getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];
    getViewLineContent(viewLineNumber: number): string;
    getViewLineLength(viewLineNumber: number): number;
    getViewLineMinColumn(viewLineNumber: number): number;
    getViewLineMaxColumn(viewLineNumber: number): number;
    getViewLineData(viewLineNumber: number): ViewLineData;
    getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;
    getAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations;
    getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[];
}
export declare class CoordinatesConverter implements ICoordinatesConverter {
    private readonly _lines;
    constructor(lines: SplitLinesCollection);
    convertViewPositionToModelPosition(viewPosition: Position): Position;
    convertViewRangeToModelRange(viewRange: Range): Range;
    validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;
    validateViewRange(viewRange: Range, expectedModelRange: Range): Range;
    convertModelPositionToViewPosition(modelPosition: Position): Position;
    convertModelRangeToViewRange(modelRange: Range): Range;
    modelPositionIsVisible(modelPosition: Position): boolean;
    getModelLineViewLineCount(modelLineNumber: number): number;
}
export declare class SplitLinesCollection implements IViewModelLinesCollection {
    private readonly model;
    private _validModelVersionId;
    private readonly _domLineBreaksComputerFactory;
    private readonly _monospaceLineBreaksComputerFactory;
    private fontInfo;
    private tabSize;
    private wrappingColumn;
    private wrappingIndent;
    private wrappingStrategy;
    private lines;
    private prefixSumComputer;
    private hiddenAreasIds;
    constructor(model: ITextModel, domLineBreaksComputerFactory: ILineBreaksComputerFactory, monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory, fontInfo: FontInfo, tabSize: number, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent);
    dispose(): void;
    createCoordinatesConverter(): ICoordinatesConverter;
    private _constructLines;
    getHiddenAreas(): Range[];
    private _reduceRanges;
    setHiddenAreas(_ranges: Range[]): boolean;
    modelPositionIsVisible(modelLineNumber: number, _modelColumn: number): boolean;
    getModelLineViewLineCount(modelLineNumber: number): number;
    setTabSize(newTabSize: number): boolean;
    setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent): boolean;
    createLineBreaksComputer(): ILineBreaksComputer;
    onModelFlushed(): void;
    onModelLinesDeleted(versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;
    onModelLinesInserted(versionId: number, fromLineNumber: number, _toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null;
    onModelLineChanged(versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];
    acceptVersionId(versionId: number): void;
    getViewLineCount(): number;
    private _toValidViewLineNumber;
    getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;
    getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];
    getViewLineContent(viewLineNumber: number): string;
    getViewLineLength(viewLineNumber: number): number;
    getViewLineMinColumn(viewLineNumber: number): number;
    getViewLineMaxColumn(viewLineNumber: number): number;
    getViewLineData(viewLineNumber: number): ViewLineData;
    getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): ViewLineData[];
    validateViewPosition(viewLineNumber: number, viewColumn: number, expectedModelPosition: Position): Position;
    validateViewRange(viewRange: Range, expectedModelRange: Range): Range;
    convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position;
    convertViewRangeToModelRange(viewRange: Range): Range;
    convertModelPositionToViewPosition(_modelLineNumber: number, _modelColumn: number): Position;
    convertModelRangeToViewRange(modelRange: Range): Range;
    private _getViewLineNumberForModelPosition;
    getAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations;
    getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[];
}
export declare class SplitLine implements ISplitLine {
    private readonly _lineBreakData;
    private _isVisible;
    constructor(lineBreakData: LineBreakData, isVisible: boolean);
    isVisible(): boolean;
    setVisible(isVisible: boolean): ISplitLine;
    getLineBreakData(): LineBreakData | null;
    getViewLineCount(): number;
    private getInputStartOffsetOfOutputLineIndex;
    private getInputEndOffsetOfOutputLineIndex;
    getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;
    getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;
    getViewLineMinColumn(_model: ITextModel, _modelLineNumber: number, outputLineIndex: number): number;
    getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;
    getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;
    getViewLinesData(model: ITextModel, modelLineNumber: number, fromOuputLineIndex: number, toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;
    getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;
    getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position;
    getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;
}
export declare class IdentityCoordinatesConverter implements ICoordinatesConverter {
    private readonly _lines;
    constructor(lines: IdentityLinesCollection);
    private _validPosition;
    private _validRange;
    convertViewPositionToModelPosition(viewPosition: Position): Position;
    convertViewRangeToModelRange(viewRange: Range): Range;
    validateViewPosition(_viewPosition: Position, expectedModelPosition: Position): Position;
    validateViewRange(_viewRange: Range, expectedModelRange: Range): Range;
    convertModelPositionToViewPosition(modelPosition: Position): Position;
    convertModelRangeToViewRange(modelRange: Range): Range;
    modelPositionIsVisible(modelPosition: Position): boolean;
    getModelLineViewLineCount(modelLineNumber: number): number;
}
export declare class IdentityLinesCollection implements IViewModelLinesCollection {
    readonly model: ITextModel;
    constructor(model: ITextModel);
    dispose(): void;
    createCoordinatesConverter(): ICoordinatesConverter;
    getHiddenAreas(): Range[];
    setHiddenAreas(_ranges: Range[]): boolean;
    setTabSize(_newTabSize: number): boolean;
    setWrappingSettings(_fontInfo: FontInfo, _wrappingStrategy: 'simple' | 'advanced', _wrappingColumn: number, _wrappingIndent: WrappingIndent): boolean;
    createLineBreaksComputer(): ILineBreaksComputer;
    onModelFlushed(): void;
    onModelLinesDeleted(_versionId: number, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;
    onModelLinesInserted(_versionId: number, fromLineNumber: number, toLineNumber: number, lineBreaks: (LineBreakData | null)[]): viewEvents.ViewLinesInsertedEvent | null;
    onModelLineChanged(_versionId: number, lineNumber: number, lineBreakData: LineBreakData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];
    acceptVersionId(_versionId: number): void;
    getViewLineCount(): number;
    getActiveIndentGuide(viewLineNumber: number, _minLineNumber: number, _maxLineNumber: number): IActiveIndentGuideInfo;
    getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];
    getViewLineContent(viewLineNumber: number): string;
    getViewLineLength(viewLineNumber: number): number;
    getViewLineMinColumn(viewLineNumber: number): number;
    getViewLineMaxColumn(viewLineNumber: number): number;
    getViewLineData(viewLineNumber: number): ViewLineData;
    getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;
    getAllOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean, theme: EditorTheme): IOverviewRulerDecorations;
    getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean): IModelDecoration[];
}

import { ICodeEditor } from '../../browser/editorBrowser';
import { Range } from '../../common/core/range';
import { HoverStartMode } from './hoverOperation';
import { ContentHoverWidget } from './hoverWidgets';
import { IThemeService } from '../../../platform/theme/common/themeService';
import { IMarkerDecorationsService } from '../../common/services/markersDecorationService';
import { IOpenerService } from '../../../platform/opener/common/opener';
import { IKeybindingService } from '../../../platform/keybinding/common/keybinding';
import { IModeService } from '../../common/services/modeService';
import { IContextKey } from '../../../platform/contextkey/common/contextkey';
export declare class ModesContentHoverWidget extends ContentHoverWidget {
    private readonly _themeService;
    private readonly _modeService;
    private readonly _openerService;
    static readonly ID = "editor.contrib.modesContentHoverWidget";
    private _messages;
    private _lastRange;
    private readonly _computer;
    private readonly _hoverOperation;
    private _highlightDecorations;
    private _isChangingDecorations;
    private _shouldFocus;
    private _colorPicker;
    private _codeLink?;
    private readonly renderDisposable;
    constructor(editor: ICodeEditor, _hoverVisibleKey: IContextKey<boolean>, markerDecorationsService: IMarkerDecorationsService, keybindingService: IKeybindingService, _themeService: IThemeService, _modeService: IModeService, _openerService?: IOpenerService);
    dispose(): void;
    onModelDecorationsChanged(): void;
    startShowingAt(range: Range, mode: HoverStartMode, focus: boolean): void;
    hide(): void;
    isColorPickerVisible(): boolean;
    private _withResult;
    private _renderMessages;
    private renderMarkerHover;
    private recentMarkerCodeActionsInfo;
    private renderMarkerStatusbar;
    private getCodeActions;
    private static readonly _DECORATION_OPTIONS;
}

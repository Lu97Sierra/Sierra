import { VSBufferReadableStream } from '../../../base/common/buffer';
import { URI } from '../../../base/common/uri';
import { IRemoteConnectionData } from '../../remote/common/remoteAuthorityResolver';
import { IRequestService } from '../../request/common/request';
export declare const webviewPartitionId = "webview";
export declare namespace WebviewResourceResponse {
    enum Type {
        Success = 0,
        Failed = 1,
        AccessDenied = 2
    }
    class StreamSuccess {
        readonly stream: VSBufferReadableStream;
        readonly mimeType: string;
        readonly type = Type.Success;
        constructor(stream: VSBufferReadableStream, mimeType: string);
    }
    const Failed: {
        readonly type: Type.Failed;
    };
    const AccessDenied: {
        readonly type: Type.AccessDenied;
    };
    type StreamResponse = StreamSuccess | typeof Failed | typeof AccessDenied;
}
interface FileReader {
    readFileStream(resource: URI): Promise<VSBufferReadableStream>;
}
export declare function loadLocalResource(requestUri: URI, options: {
    extensionLocation: URI | undefined;
    roots: ReadonlyArray<URI>;
    remoteConnectionData?: IRemoteConnectionData | null;
    rewriteUri?: (uri: URI) => URI;
}, fileReader: FileReader, requestService: IRequestService): Promise<WebviewResourceResponse.StreamResponse>;
export {};

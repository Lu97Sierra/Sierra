import { EditorAction, ServicesAccessor } from '../../browser/editorExtensions';
import { IEditorContribution } from '../../common/editorCommon';
import { Disposable } from '../../../base/common/lifecycle';
import { ICodeEditor } from '../../browser/editorBrowser';
import { IPosition } from '../../common/core/position';
import { RawContextKey, IContextKeyService } from '../../../platform/contextkey/common/contextkey';
import { URI } from '../../../base/common/uri';
export declare const CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE: RawContextKey<boolean>;
export declare class LinkedEditingContribution extends Disposable implements IEditorContribution {
    static readonly ID = "editor.contrib.linkedEditing";
    private static readonly DECORATION;
    static get(editor: ICodeEditor): LinkedEditingContribution;
    private _debounceDuration;
    private readonly _editor;
    private _enabled;
    private readonly _visibleContextKey;
    private _rangeUpdateTriggerPromise;
    private _rangeSyncTriggerPromise;
    private _currentRequest;
    private _currentRequestPosition;
    private _currentRequestModelVersion;
    private _currentDecorations;
    private _languageWordPattern;
    private _currentWordPattern;
    private _ignoreChangeEvent;
    private readonly _localToDispose;
    constructor(editor: ICodeEditor, contextKeyService: IContextKeyService);
    private reinitialize;
    private _syncRanges;
    dispose(): void;
    clearRanges(): void;
    get currentUpdateTriggerPromise(): Promise<any>;
    get currentSyncTriggerPromise(): Promise<any>;
    updateRanges(force?: boolean): Promise<void>;
    setDebounceDuration(timeInMS: number): void;
}
export declare class LinkedEditingAction extends EditorAction {
    constructor();
    runCommand(accessor: ServicesAccessor, args: [URI, IPosition]): void | Promise<void>;
    run(_accessor: ServicesAccessor, editor: ICodeEditor): Promise<void>;
}
export declare const editorLinkedEditingBackground: string;

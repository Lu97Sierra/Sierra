import { Event } from '../../../base/common/event';
import { IDisposable } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
import { IMode, LanguageId, LanguageIdentifier } from '../modes';
export declare const IModeService: import("../../../platform/instantiation/common/instantiation").ServiceIdentifier<IModeService>;
export interface ILanguageExtensionPoint {
    id: string;
    extensions?: string[];
    filenames?: string[];
    filenamePatterns?: string[];
    firstLine?: string;
    aliases?: string[];
    mimetypes?: string[];
    configuration?: URI;
}
export interface ILanguageSelection extends IDisposable {
    readonly languageIdentifier: LanguageIdentifier;
    readonly onDidChange: Event<LanguageIdentifier>;
}
export interface IModeService {
    readonly _serviceBrand: undefined;
    onDidCreateMode: Event<IMode>;
    onLanguagesMaybeChanged: Event<void>;
    isRegisteredMode(mimetypeOrModeId: string): boolean;
    getRegisteredModes(): string[];
    getRegisteredLanguageNames(): string[];
    getExtensions(alias: string): string[];
    getFilenames(alias: string): string[];
    getMimeForMode(modeId: string): string | null;
    getLanguageName(modeId: string): string | null;
    getModeIdForLanguageName(alias: string): string | null;
    getModeIdByFilepathOrFirstLine(resource: URI, firstLine?: string): string | null;
    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string): string | null;
    getLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier | null;
    getConfigurationFiles(modeId: string): URI[];
    create(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): ILanguageSelection;
    createByLanguageName(languageName: string): ILanguageSelection;
    createByFilepathOrFirstLine(rsource: URI | null, firstLine?: string): ILanguageSelection;
    triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): void;
}

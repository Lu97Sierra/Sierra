/// <reference types="node" />
import * as fs from 'fs';
export declare const MAX_FILE_SIZE: number;
export declare const MAX_HEAP_SIZE: number;
export declare enum RimRafMode {
    /**
     * Slow version that unlinks each file and folder.
     */
    UNLINK = 0,
    /**
     * Fast version that first moves the file/folder
     * into a temp directory and then deletes that
     * without waiting for it.
     */
    MOVE = 1
}
export declare function rimraf(path: string, mode?: RimRafMode): Promise<void>;
export declare function rimrafSync(path: string): void;
export declare function readdir(path: string): Promise<string[]>;
export declare function readdirWithFileTypes(path: string): Promise<fs.Dirent[]>;
export declare function readdirSync(path: string): string[];
export declare function exists(path: string): Promise<boolean>;
export declare function chmod(path: string, mode: number): Promise<void>;
export declare function stat(path: string): Promise<fs.Stats>;
export interface IStatAndLink {
    stat: fs.Stats;
    symbolicLink?: {
        dangling: boolean;
    };
}
export declare function statLink(path: string): Promise<IStatAndLink>;
export declare function lstat(path: string): Promise<fs.Stats>;
export declare function rename(oldPath: string, newPath: string): Promise<void>;
export declare function renameIgnoreError(oldPath: string, newPath: string): Promise<void>;
export declare function unlink(path: string): Promise<void>;
export declare function symlink(target: string, path: string, type?: string): Promise<void>;
export declare function truncate(path: string, len: number): Promise<void>;
export declare function readFile(path: string): Promise<Buffer>;
export declare function readFile(path: string, encoding: string): Promise<string>;
export declare function mkdirp(path: string, mode?: number): Promise<void>;
export declare function writeFile(path: string, data: string, options?: IWriteFileOptions): Promise<void>;
export declare function writeFile(path: string, data: Buffer, options?: IWriteFileOptions): Promise<void>;
export declare function writeFile(path: string, data: Uint8Array, options?: IWriteFileOptions): Promise<void>;
export declare function writeFile(path: string, data: string | Buffer | Uint8Array, options?: IWriteFileOptions): Promise<void>;
export interface IWriteFileOptions {
    mode?: number;
    flag?: string;
}
export declare function writeFileSync(path: string, data: string | Buffer, options?: IWriteFileOptions): void;
export declare function readDirsInDir(dirPath: string): Promise<string[]>;
export declare function dirExists(path: string): Promise<boolean>;
export declare function fileExists(path: string): Promise<boolean>;
export declare function whenDeleted(path: string): Promise<void>;
export declare function move(source: string, target: string): Promise<void>;
export declare function copy(source: string, target: string, copiedSourcesIn?: {
    [path: string]: boolean;
}): Promise<void>;

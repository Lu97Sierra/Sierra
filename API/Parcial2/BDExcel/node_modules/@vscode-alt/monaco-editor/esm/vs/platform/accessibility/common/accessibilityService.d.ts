import { Disposable } from '../../../base/common/lifecycle';
import { IAccessibilityService, AccessibilitySupport } from './accessibility';
import { Event, Emitter } from '../../../base/common/event';
import { IContextKeyService } from '../../contextkey/common/contextkey';
import { IConfigurationService } from '../../configuration/common/configuration';
export declare class AccessibilityService extends Disposable implements IAccessibilityService {
    private readonly _contextKeyService;
    protected readonly _configurationService: IConfigurationService;
    readonly _serviceBrand: undefined;
    private _accessibilityModeEnabledContext;
    protected _accessibilitySupport: AccessibilitySupport;
    protected readonly _onDidChangeScreenReaderOptimized: Emitter<void>;
    constructor(_contextKeyService: IContextKeyService, _configurationService: IConfigurationService);
    get onDidChangeScreenReaderOptimized(): Event<void>;
    isScreenReaderOptimized(): boolean;
    getAccessibilitySupport(): AccessibilitySupport;
    alwaysUnderlineAccessKeys(): Promise<boolean>;
    setAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void;
}

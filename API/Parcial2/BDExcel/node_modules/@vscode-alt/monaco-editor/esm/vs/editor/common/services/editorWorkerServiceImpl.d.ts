import { Disposable } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
import { IRange } from '../core/range';
import { IChange } from '../editorCommon';
import * as modes from '../modes';
import { EditorSimpleWorker } from './editorSimpleWorker';
import { IDiffComputationResult, IEditorWorkerService } from './editorWorkerService';
import { IModelService } from './modelService';
import { ITextResourceConfigurationService } from './textResourceConfigurationService';
import { ILogService } from '../../../platform/log/common/log';
export declare class EditorWorkerServiceImpl extends Disposable implements IEditorWorkerService {
    readonly _serviceBrand: undefined;
    private readonly _modelService;
    private readonly _workerManager;
    private readonly _logService;
    constructor(modelService: IModelService, configurationService: ITextResourceConfigurationService, logService: ILogService);
    dispose(): void;
    canComputeDiff(original: URI, modified: URI): boolean;
    computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean, maxComputationTime: number): Promise<IDiffComputationResult | null>;
    canComputeDirtyDiff(original: URI, modified: URI): boolean;
    computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null>;
    computeMoreMinimalEdits(resource: URI, edits: modes.TextEdit[] | null | undefined): Promise<modes.TextEdit[] | undefined>;
    canNavigateValueSet(resource: URI): boolean;
    navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<modes.IInplaceReplaceSupportResult | null>;
    canComputeWordRanges(resource: URI): boolean;
    computeWordRanges(resource: URI, range: IRange): Promise<{
        [word: string]: IRange[];
    } | null>;
}
export declare class EditorWorkerHost {
    private readonly _workerClient;
    constructor(workerClient: EditorWorkerClient);
    fhr(method: string, args: any[]): Promise<any>;
}
export declare class EditorWorkerClient extends Disposable {
    private readonly _modelService;
    private readonly _keepIdleModels;
    private _worker;
    private readonly _workerFactory;
    private _modelManager;
    private _disposed;
    constructor(modelService: IModelService, keepIdleModels: boolean, label: string | undefined);
    fhr(method: string, args: any[]): Promise<any>;
    private _getOrCreateWorker;
    protected _getProxy(): Promise<EditorSimpleWorker>;
    private _getOrCreateModelManager;
    protected _withSyncedResources(resources: URI[]): Promise<EditorSimpleWorker>;
    computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean, maxComputationTime: number): Promise<IDiffComputationResult | null>;
    computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null>;
    computeMoreMinimalEdits(resource: URI, edits: modes.TextEdit[]): Promise<modes.TextEdit[]>;
    computeLinks(resource: URI): Promise<modes.ILink[] | null>;
    textualSuggest(resources: URI[], leadingWord: string | undefined, wordDefRegExp: RegExp): Promise<{
        words: string[];
        duration: number;
    } | null>;
    computeWordRanges(resource: URI, range: IRange): Promise<{
        [word: string]: IRange[];
    } | null>;
    navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<modes.IInplaceReplaceSupportResult | null>;
    dispose(): void;
}

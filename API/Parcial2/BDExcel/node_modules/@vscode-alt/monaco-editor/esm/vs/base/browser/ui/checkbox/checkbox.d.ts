import './checkbox.css';
import { IKeyboardEvent } from '../../keyboardEvent';
import { Widget } from '../widget';
import { Color } from '../../../common/color';
import { Event } from '../../../common/event';
import { DisposableStore } from '../../../common/lifecycle';
import { CSSIcon } from '../../../common/codicons';
import { BaseActionViewItem } from '../actionbar/actionViewItems';
export interface ICheckboxOpts extends ICheckboxStyles {
    readonly actionClassName?: string;
    readonly icon?: CSSIcon;
    readonly title: string;
    readonly isChecked: boolean;
}
export interface ICheckboxStyles {
    inputActiveOptionBorder?: Color;
    inputActiveOptionForeground?: Color;
    inputActiveOptionBackground?: Color;
}
export interface ISimpleCheckboxStyles {
    checkboxBackground?: Color;
    checkboxBorder?: Color;
    checkboxForeground?: Color;
}
export declare class CheckboxActionViewItem extends BaseActionViewItem {
    protected checkbox: Checkbox | undefined;
    protected readonly disposables: DisposableStore;
    render(container: HTMLElement): void;
    updateEnabled(): void;
    updateChecked(): void;
    dispose(): void;
}
export declare class Checkbox extends Widget {
    private readonly _onChange;
    readonly onChange: Event<boolean>;
    private readonly _onKeyDown;
    readonly onKeyDown: Event<IKeyboardEvent>;
    private readonly _opts;
    readonly domNode: HTMLElement;
    private _checked;
    constructor(opts: ICheckboxOpts);
    get enabled(): boolean;
    focus(): void;
    get checked(): boolean;
    set checked(newIsChecked: boolean);
    width(): number;
    style(styles: ICheckboxStyles): void;
    protected applyStyles(): void;
    enable(): void;
    disable(): void;
}
export declare class SimpleCheckbox extends Widget {
    private title;
    private isChecked;
    private checkbox;
    private styles;
    readonly domNode: HTMLElement;
    constructor(title: string, isChecked: boolean);
    get checked(): boolean;
    set checked(newIsChecked: boolean);
    focus(): void;
    hasFocus(): boolean;
    style(styles: ISimpleCheckboxStyles): void;
    protected applyStyles(): void;
}

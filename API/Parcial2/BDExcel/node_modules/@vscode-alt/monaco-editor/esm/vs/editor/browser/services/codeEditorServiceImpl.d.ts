import { IDisposable } from '../../../base/common/lifecycle';
import { ICodeEditor } from '../editorBrowser';
import { AbstractCodeEditorService } from './abstractCodeEditorService';
import { IDecorationRenderOptions } from '../../common/editorCommon';
import { IModelDecorationOptions, IModelDecorationOverviewRulerOptions, TrackedRangeStickiness } from '../../common/model';
import { IResourceEditorInput } from '../../../platform/editor/common/editor';
import { IThemeService } from '../../../platform/theme/common/themeService';
export declare class RefCountedStyleSheet {
    private readonly _parent;
    private readonly _editorId;
    private readonly _styleSheet;
    private _refCount;
    get sheet(): CSSStyleSheet;
    constructor(parent: CodeEditorServiceImpl, editorId: string, styleSheet: HTMLStyleElement);
    ref(): void;
    unref(): void;
    insertRule(rule: string, index?: number): void;
    removeRulesContainingSelector(ruleName: string): void;
}
export declare class GlobalStyleSheet {
    private readonly _styleSheet;
    get sheet(): CSSStyleSheet;
    constructor(styleSheet: HTMLStyleElement);
    ref(): void;
    unref(): void;
    insertRule(rule: string, index?: number): void;
    removeRulesContainingSelector(ruleName: string): void;
}
export declare abstract class CodeEditorServiceImpl extends AbstractCodeEditorService {
    private _globalStyleSheet;
    private readonly _decorationOptionProviders;
    private readonly _editorStyleSheets;
    private readonly _themeService;
    constructor(themeService: IThemeService, styleSheet?: GlobalStyleSheet | null);
    private _getOrCreateGlobalStyleSheet;
    private _getOrCreateStyleSheet;
    _removeEditorStyleSheets(editorId: string): void;
    registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string, editor?: ICodeEditor): void;
    removeDecorationType(key: string): void;
    resolveDecorationOptions(decorationTypeKey: string, writable: boolean): IModelDecorationOptions;
    resolveDecorationCSSRules(decorationTypeKey: string): CSSRuleList | null;
    abstract getActiveCodeEditor(): ICodeEditor | null;
    abstract openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null>;
}
interface IModelDecorationOptionsProvider extends IDisposable {
    refCount: number;
    getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;
    resolveDecorationCSSRules(): CSSRuleList;
}
export declare class DecorationSubTypeOptionsProvider implements IModelDecorationOptionsProvider {
    private readonly _styleSheet;
    refCount: number;
    private readonly _parentTypeKey;
    private _beforeContentRules;
    private _afterContentRules;
    constructor(themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments);
    getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;
    resolveDecorationCSSRules(): CSSRuleList;
    dispose(): void;
}
interface ProviderArguments {
    styleSheet: GlobalStyleSheet | RefCountedStyleSheet;
    key: string;
    parentTypeKey?: string;
    options: IDecorationRenderOptions;
}
export declare class DecorationTypeOptionsProvider implements IModelDecorationOptionsProvider {
    private readonly _disposables;
    private readonly _styleSheet;
    refCount: number;
    className: string | undefined;
    inlineClassName: string | undefined;
    inlineClassNameAffectsLetterSpacing: boolean | undefined;
    beforeContentClassName: string | undefined;
    afterContentClassName: string | undefined;
    glyphMarginClassName: string | undefined;
    isWholeLine: boolean;
    overviewRuler: IModelDecorationOverviewRulerOptions | undefined;
    stickiness: TrackedRangeStickiness | undefined;
    constructor(themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments);
    getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;
    resolveDecorationCSSRules(): CSSRuleList;
    dispose(): void;
}
export {};

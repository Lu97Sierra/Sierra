import { IChannel, IServerChannel } from '../../../base/parts/ipc/common/ipc';
import { LogLevel, ILogService, DelegatedLogService } from './log';
import { Event } from '../../../base/common/event';
export declare class LoggerChannel implements IServerChannel {
    private service;
    onDidChangeLogLevel: Event<LogLevel>;
    constructor(service: ILogService);
    listen(_: unknown, event: string): Event<any>;
    call(_: unknown, command: string, arg?: any): Promise<any>;
    private consoleLog;
}
export declare class LoggerChannelClient {
    private channel;
    constructor(channel: IChannel);
    get onDidChangeLogLevel(): Event<LogLevel>;
    setLevel(level: LogLevel): void;
    static setLevel(channel: IChannel, level: LogLevel): Promise<void>;
    consoleLog(severity: string, args: string[]): void;
}
export declare class FollowerLogService extends DelegatedLogService implements ILogService {
    private parent;
    readonly _serviceBrand: undefined;
    constructor(parent: LoggerChannelClient, logService: ILogService);
    setLevel(level: LogLevel): void;
}

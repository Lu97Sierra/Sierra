/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { join } from '../common/path.js';
import { Queue } from '../common/async.js';
import * as fs from 'fs';
import * as os from 'os';
import * as platform from '../common/platform.js';
import { Event } from '../common/event.js';
import { promisify } from 'util';
import { isRootOrDriveLetter } from '../common/extpath.js';
import { generateUuid } from '../common/uuid.js';
import { normalizeNFC } from '../common/normalization.js';
// See https://github.com/microsoft/vscode/issues/30180
const WIN32_MAX_FILE_SIZE = 300 * 1024 * 1024; // 300 MB
const GENERAL_MAX_FILE_SIZE = 16 * 1024 * 1024 * 1024; // 16 GB
// See https://github.com/v8/v8/blob/5918a23a3d571b9625e5cce246bdd5b46ff7cd8b/src/heap/heap.cc#L149
const WIN32_MAX_HEAP_SIZE = 700 * 1024 * 1024; // 700 MB
const GENERAL_MAX_HEAP_SIZE = 700 * 2 * 1024 * 1024; // 1400 MB
export const MAX_FILE_SIZE = process.arch === 'ia32' ? WIN32_MAX_FILE_SIZE : GENERAL_MAX_FILE_SIZE;
export const MAX_HEAP_SIZE = process.arch === 'ia32' ? WIN32_MAX_HEAP_SIZE : GENERAL_MAX_HEAP_SIZE;
export var RimRafMode;
(function (RimRafMode) {
    /**
     * Slow version that unlinks each file and folder.
     */
    RimRafMode[RimRafMode["UNLINK"] = 0] = "UNLINK";
    /**
     * Fast version that first moves the file/folder
     * into a temp directory and then deletes that
     * without waiting for it.
     */
    RimRafMode[RimRafMode["MOVE"] = 1] = "MOVE";
})(RimRafMode || (RimRafMode = {}));
export function rimraf(path, mode = RimRafMode.UNLINK) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isRootOrDriveLetter(path)) {
            throw new Error('rimraf - will refuse to recursively delete root');
        }
        // delete: via unlink
        if (mode === RimRafMode.UNLINK) {
            return rimrafUnlink(path);
        }
        // delete: via move
        return rimrafMove(path);
    });
}
function rimrafUnlink(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const stat = yield lstat(path);
            // Folder delete (recursive) - NOT for symbolic links though!
            if (stat.isDirectory() && !stat.isSymbolicLink()) {
                // Children
                const children = yield readdir(path);
                yield Promise.all(children.map(child => rimrafUnlink(join(path, child))));
                // Folder
                yield promisify(fs.rmdir)(path);
            }
            // Single file delete
            else {
                // chmod as needed to allow for unlink
                const mode = stat.mode;
                if (!(mode & 128)) { // 128 === 0200
                    yield chmod(path, mode | 128);
                }
                return unlink(path);
            }
        }
        catch (error) {
            if (error.code !== 'ENOENT') {
                throw error;
            }
        }
    });
}
function rimrafMove(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const pathInTemp = join(os.tmpdir(), generateUuid());
            try {
                yield rename(path, pathInTemp);
            }
            catch (error) {
                return rimrafUnlink(path); // if rename fails, delete without tmp dir
            }
            // Delete but do not return as promise
            rimrafUnlink(pathInTemp);
        }
        catch (error) {
            if (error.code !== 'ENOENT') {
                throw error;
            }
        }
    });
}
export function rimrafSync(path) {
    if (isRootOrDriveLetter(path)) {
        throw new Error('rimraf - will refuse to recursively delete root');
    }
    try {
        const stat = fs.lstatSync(path);
        // Folder delete (recursive) - NOT for symbolic links though!
        if (stat.isDirectory() && !stat.isSymbolicLink()) {
            // Children
            const children = readdirSync(path);
            children.map(child => rimrafSync(join(path, child)));
            // Folder
            fs.rmdirSync(path);
        }
        // Single file delete
        else {
            // chmod as needed to allow for unlink
            const mode = stat.mode;
            if (!(mode & 128)) { // 128 === 0200
                fs.chmodSync(path, mode | 128);
            }
            return fs.unlinkSync(path);
        }
    }
    catch (error) {
        if (error.code !== 'ENOENT') {
            throw error;
        }
    }
}
export function readdir(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return handleDirectoryChildren(yield promisify(fs.readdir)(path));
    });
}
export function readdirWithFileTypes(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const children = yield promisify(fs.readdir)(path, { withFileTypes: true });
        // Mac: uses NFD unicode form on disk, but we want NFC
        // See also https://github.com/nodejs/node/issues/2165
        if (platform.isMacintosh) {
            for (const child of children) {
                child.name = normalizeNFC(child.name);
            }
        }
        return children;
    });
}
export function readdirSync(path) {
    return handleDirectoryChildren(fs.readdirSync(path));
}
function handleDirectoryChildren(children) {
    // Mac: uses NFD unicode form on disk, but we want NFC
    // See also https://github.com/nodejs/node/issues/2165
    if (platform.isMacintosh) {
        return children.map(child => normalizeNFC(child));
    }
    return children;
}
export function exists(path) {
    return promisify(fs.exists)(path);
}
export function chmod(path, mode) {
    return promisify(fs.chmod)(path, mode);
}
export function stat(path) {
    return promisify(fs.stat)(path);
}
export function statLink(path) {
    return __awaiter(this, void 0, void 0, function* () {
        // First stat the link
        let lstats;
        try {
            lstats = yield lstat(path);
            // Return early if the stat is not a symbolic link at all
            if (!lstats.isSymbolicLink()) {
                return { stat: lstats };
            }
        }
        catch (error) {
            /* ignore - use stat() instead */
        }
        // If the stat is a symbolic link or failed to stat, use fs.stat()
        // which for symbolic links will stat the target they point to
        try {
            const stats = yield stat(path);
            return { stat: stats, symbolicLink: (lstats === null || lstats === void 0 ? void 0 : lstats.isSymbolicLink()) ? { dangling: false } : undefined };
        }
        catch (error) {
            // If the link points to a non-existing file we still want
            // to return it as result while setting dangling: true flag
            if (error.code === 'ENOENT' && lstats) {
                return { stat: lstats, symbolicLink: { dangling: true } };
            }
            throw error;
        }
    });
}
export function lstat(path) {
    return promisify(fs.lstat)(path);
}
export function rename(oldPath, newPath) {
    return promisify(fs.rename)(oldPath, newPath);
}
export function renameIgnoreError(oldPath, newPath) {
    return new Promise(resolve => fs.rename(oldPath, newPath, () => resolve()));
}
export function unlink(path) {
    return promisify(fs.unlink)(path);
}
export function symlink(target, path, type) {
    return promisify(fs.symlink)(target, path, type);
}
export function truncate(path, len) {
    return promisify(fs.truncate)(path, len);
}
export function readFile(path, encoding) {
    return promisify(fs.readFile)(path, encoding);
}
export function mkdirp(path, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        return promisify(fs.mkdir)(path, { mode, recursive: true });
    });
}
// According to node.js docs (https://nodejs.org/docs/v6.5.0/api/fs.html#fs_fs_writefile_file_data_options_callback)
// it is not safe to call writeFile() on the same path multiple times without waiting for the callback to return.
// Therefor we use a Queue on the path that is given to us to sequentialize calls to the same path properly.
const writeFilePathQueues = new Map();
export function writeFile(path, data, options) {
    const queueKey = toQueueKey(path);
    return ensureWriteFileQueue(queueKey).queue(() => {
        const ensuredOptions = ensureWriteOptions(options);
        return new Promise((resolve, reject) => doWriteFileAndFlush(path, data, ensuredOptions, error => error ? reject(error) : resolve()));
    });
}
function toQueueKey(path) {
    let queueKey = path;
    if (platform.isWindows || platform.isMacintosh) {
        queueKey = queueKey.toLowerCase(); // accommodate for case insensitive file systems
    }
    return queueKey;
}
function ensureWriteFileQueue(queueKey) {
    const existingWriteFileQueue = writeFilePathQueues.get(queueKey);
    if (existingWriteFileQueue) {
        return existingWriteFileQueue;
    }
    const writeFileQueue = new Queue();
    writeFilePathQueues.set(queueKey, writeFileQueue);
    const onFinish = Event.once(writeFileQueue.onFinished);
    onFinish(() => {
        writeFilePathQueues.delete(queueKey);
        writeFileQueue.dispose();
    });
    return writeFileQueue;
}
let canFlush = true;
// Calls fs.writeFile() followed by a fs.sync() call to flush the changes to disk
// We do this in cases where we want to make sure the data is really on disk and
// not in some cache.
//
// See https://github.com/nodejs/node/blob/v5.10.0/lib/fs.js#L1194
function doWriteFileAndFlush(path, data, options, callback) {
    if (!canFlush) {
        return fs.writeFile(path, data, { mode: options.mode, flag: options.flag }, callback);
    }
    // Open the file with same flags and mode as fs.writeFile()
    fs.open(path, options.flag, options.mode, (openError, fd) => {
        if (openError) {
            return callback(openError);
        }
        // It is valid to pass a fd handle to fs.writeFile() and this will keep the handle open!
        fs.writeFile(fd, data, writeError => {
            if (writeError) {
                return fs.close(fd, () => callback(writeError)); // still need to close the handle on error!
            }
            // Flush contents (not metadata) of the file to disk
            fs.fdatasync(fd, (syncError) => {
                // In some exotic setups it is well possible that node fails to sync
                // In that case we disable flushing and warn to the console
                if (syncError) {
                    console.warn('[node.js fs] fdatasync is now disabled for this session because it failed: ', syncError);
                    canFlush = false;
                }
                return fs.close(fd, closeError => callback(closeError));
            });
        });
    });
}
export function writeFileSync(path, data, options) {
    const ensuredOptions = ensureWriteOptions(options);
    if (!canFlush) {
        return fs.writeFileSync(path, data, { mode: ensuredOptions.mode, flag: ensuredOptions.flag });
    }
    // Open the file with same flags and mode as fs.writeFile()
    const fd = fs.openSync(path, ensuredOptions.flag, ensuredOptions.mode);
    try {
        // It is valid to pass a fd handle to fs.writeFile() and this will keep the handle open!
        fs.writeFileSync(fd, data);
        // Flush contents (not metadata) of the file to disk
        try {
            fs.fdatasyncSync(fd);
        }
        catch (syncError) {
            console.warn('[node.js fs] fdatasyncSync is now disabled for this session because it failed: ', syncError);
            canFlush = false;
        }
    }
    finally {
        fs.closeSync(fd);
    }
}
function ensureWriteOptions(options) {
    if (!options) {
        return { mode: 0o666, flag: 'w' };
    }
    return {
        mode: typeof options.mode === 'number' ? options.mode : 0o666,
        flag: typeof options.flag === 'string' ? options.flag : 'w'
    };
}
export function readDirsInDir(dirPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const children = yield readdir(dirPath);
        const directories = [];
        for (const child of children) {
            if (yield dirExists(join(dirPath, child))) {
                directories.push(child);
            }
        }
        return directories;
    });
}
export function dirExists(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const fileStat = yield stat(path);
            return fileStat.isDirectory();
        }
        catch (error) {
            return false;
        }
    });
}
export function fileExists(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const fileStat = yield stat(path);
            return fileStat.isFile();
        }
        catch (error) {
            return false;
        }
    });
}
export function whenDeleted(path) {
    // Complete when wait marker file is deleted
    return new Promise(resolve => {
        let running = false;
        const interval = setInterval(() => {
            if (!running) {
                running = true;
                fs.exists(path, exists => {
                    running = false;
                    if (!exists) {
                        clearInterval(interval);
                        resolve(undefined);
                    }
                });
            }
        }, 1000);
    });
}
export function move(source, target) {
    return __awaiter(this, void 0, void 0, function* () {
        if (source === target) {
            return Promise.resolve();
        }
        function updateMtime(path) {
            return __awaiter(this, void 0, void 0, function* () {
                const stat = yield lstat(path);
                if (stat.isDirectory() || stat.isSymbolicLink()) {
                    return Promise.resolve(); // only for files
                }
                const fd = yield promisify(fs.open)(path, 'a');
                try {
                    yield promisify(fs.futimes)(fd, stat.atime, new Date());
                }
                catch (error) {
                    //ignore
                }
                return promisify(fs.close)(fd);
            });
        }
        try {
            yield rename(source, target);
            yield updateMtime(target);
        }
        catch (error) {
            // In two cases we fallback to classic copy and delete:
            //
            // 1.) The EXDEV error indicates that source and target are on different devices
            // In this case, fallback to using a copy() operation as there is no way to
            // rename() between different devices.
            //
            // 2.) The user tries to rename a file/folder that ends with a dot. This is not
            // really possible to move then, at least on UNC devices.
            if (source.toLowerCase() !== target.toLowerCase() && error.code === 'EXDEV' || source.endsWith('.')) {
                yield copy(source, target);
                yield rimraf(source, RimRafMode.MOVE);
                yield updateMtime(target);
            }
            else {
                throw error;
            }
        }
    });
}
export function copy(source, target, copiedSourcesIn) {
    return __awaiter(this, void 0, void 0, function* () {
        const copiedSources = copiedSourcesIn ? copiedSourcesIn : Object.create(null);
        const fileStat = yield stat(source);
        if (!fileStat.isDirectory()) {
            return doCopyFile(source, target, fileStat.mode & 511);
        }
        if (copiedSources[source]) {
            return Promise.resolve(); // escape when there are cycles (can happen with symlinks)
        }
        copiedSources[source] = true; // remember as copied
        // Create folder
        yield mkdirp(target, fileStat.mode & 511);
        // Copy each file recursively
        const files = yield readdir(source);
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            yield copy(join(source, file), join(target, file), copiedSources);
        }
    });
}
function doCopyFile(source, target, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const reader = fs.createReadStream(source);
            const writer = fs.createWriteStream(target, { mode });
            let finished = false;
            const finish = (error) => {
                if (!finished) {
                    finished = true;
                    // in error cases, pass to callback
                    if (error) {
                        return reject(error);
                    }
                    // we need to explicitly chmod because of https://github.com/nodejs/node/issues/1104
                    fs.chmod(target, mode, error => error ? reject(error) : resolve());
                }
            };
            // handle errors properly
            reader.once('error', error => finish(error));
            writer.once('error', error => finish(error));
            // we are done (underlying fd has been closed)
            writer.once('close', () => finish());
            // start piping
            reader.pipe(writer);
        });
    });
}

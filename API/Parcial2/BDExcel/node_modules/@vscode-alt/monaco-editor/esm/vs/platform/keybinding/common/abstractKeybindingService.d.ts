import { Emitter, Event } from '../../../base/common/event';
import { Keybinding, ResolvedKeybinding } from '../../../base/common/keyCodes';
import { Disposable } from '../../../base/common/lifecycle';
import { ICommandService } from '../../commands/common/commands';
import { IContextKeyService, IContextKeyServiceTarget } from '../../contextkey/common/contextkey';
import { IKeybindingEvent, IKeybindingService, IKeyboardEvent, KeybindingsSchemaContribution } from './keybinding';
import { IResolveResult, KeybindingResolver } from './keybindingResolver';
import { ResolvedKeybindingItem } from './resolvedKeybindingItem';
import { INotificationService } from '../../notification/common/notification';
import { ITelemetryService } from '../../telemetry/common/telemetry';
import { ILogService } from '../../log/common/log';
export declare abstract class AbstractKeybindingService extends Disposable implements IKeybindingService {
    private _contextKeyService;
    protected _commandService: ICommandService;
    protected _telemetryService: ITelemetryService;
    private _notificationService;
    protected _logService: ILogService;
    _serviceBrand: undefined;
    protected readonly _onDidUpdateKeybindings: Emitter<IKeybindingEvent>;
    get onDidUpdateKeybindings(): Event<IKeybindingEvent>;
    private _currentChord;
    private _currentChordChecker;
    private _currentChordStatusMessage;
    protected _logging: boolean;
    get inChordMode(): boolean;
    constructor(_contextKeyService: IContextKeyService, _commandService: ICommandService, _telemetryService: ITelemetryService, _notificationService: INotificationService, _logService: ILogService);
    dispose(): void;
    protected abstract _getResolver(): KeybindingResolver;
    protected abstract _documentHasFocus(): boolean;
    abstract resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];
    abstract resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;
    abstract resolveUserBinding(userBinding: string): ResolvedKeybinding[];
    abstract registerSchemaContribution(contribution: KeybindingsSchemaContribution): void;
    abstract _dumpDebugInfo(): string;
    abstract _dumpDebugInfoJSON(): string;
    getDefaultKeybindingsContent(): string;
    toggleLogging(): boolean;
    protected _log(str: string): void;
    getDefaultKeybindings(): readonly ResolvedKeybindingItem[];
    getKeybindings(): readonly ResolvedKeybindingItem[];
    customKeybindingsCount(): number;
    lookupKeybindings(commandId: string): ResolvedKeybinding[];
    lookupKeybinding(commandId: string): ResolvedKeybinding | undefined;
    dispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean;
    softDispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): IResolveResult | null;
    private _enterChordMode;
    private _leaveChordMode;
    dispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void;
    protected _dispatch(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean;
    private _doDispatch;
    mightProducePrintableCharacter(event: IKeyboardEvent): boolean;
}

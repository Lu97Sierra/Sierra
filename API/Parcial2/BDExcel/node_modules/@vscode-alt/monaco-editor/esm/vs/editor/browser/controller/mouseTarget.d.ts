import { IPointerHandlerHelper } from './mouseHandler';
import { IMouseTarget, MouseTargetType } from '../editorBrowser';
import { EditorMouseEvent, EditorPagePosition, PageCoordinates } from '../editorDom';
import { IViewCursorRenderData } from '../viewParts/viewCursors/viewCursor';
import { EditorLayoutInfo } from '../../common/config/editorOptions';
import { Position } from '../../common/core/position';
import { Range as EditorRange } from '../../common/core/range';
import { HorizontalPosition } from '../../common/view/renderingContext';
import { ViewContext } from '../../common/view/viewContext';
import { IViewModel } from '../../common/viewModel/viewModel';
export interface IViewZoneData {
    viewZoneId: string;
    positionBefore: Position | null;
    positionAfter: Position | null;
    position: Position;
    afterLineNumber: number;
}
export interface IMarginData {
    isAfterLines: boolean;
    glyphMarginLeft: number;
    glyphMarginWidth: number;
    lineNumbersWidth: number;
    offsetX: number;
}
export interface IEmptyContentData {
    isAfterLines: boolean;
    horizontalDistanceToText?: number;
}
export declare class PointerHandlerLastRenderData {
    readonly lastViewCursorsRenderData: IViewCursorRenderData[];
    readonly lastTextareaPosition: Position | null;
    constructor(lastViewCursorsRenderData: IViewCursorRenderData[], lastTextareaPosition: Position | null);
}
export declare class MouseTarget implements IMouseTarget {
    readonly element: Element | null;
    readonly type: MouseTargetType;
    readonly mouseColumn: number;
    readonly position: Position | null;
    readonly range: EditorRange | null;
    readonly detail: any;
    constructor(element: Element | null, type: MouseTargetType, mouseColumn?: number, position?: Position | null, range?: EditorRange | null, detail?: any);
    private static _typeToString;
    static toString(target: IMouseTarget): string;
    toString(): string;
}
export declare class HitTestContext {
    readonly model: IViewModel;
    readonly layoutInfo: EditorLayoutInfo;
    readonly viewDomNode: HTMLElement;
    readonly lineHeight: number;
    readonly stickyTabStops: boolean;
    readonly typicalHalfwidthCharacterWidth: number;
    readonly lastRenderData: PointerHandlerLastRenderData;
    private readonly _context;
    private readonly _viewHelper;
    constructor(context: ViewContext, viewHelper: IPointerHandlerHelper, lastRenderData: PointerHandlerLastRenderData);
    getZoneAtCoord(mouseVerticalOffset: number): IViewZoneData | null;
    static getZoneAtCoord(context: ViewContext, mouseVerticalOffset: number): IViewZoneData | null;
    getFullLineRangeAtCoord(mouseVerticalOffset: number): {
        range: EditorRange;
        isAfterLines: boolean;
    };
    getLineNumberAtVerticalOffset(mouseVerticalOffset: number): number;
    isAfterLines(mouseVerticalOffset: number): boolean;
    isInTopPadding(mouseVerticalOffset: number): boolean;
    isInBottomPadding(mouseVerticalOffset: number): boolean;
    getVerticalOffsetForLineNumber(lineNumber: number): number;
    findAttribute(element: Element, attr: string): string | null;
    private static _findAttribute;
    getLineWidth(lineNumber: number): number;
    visibleRangeForPosition(lineNumber: number, column: number): HorizontalPosition | null;
    getPositionFromDOMInfo(spanNode: HTMLElement, offset: number): Position | null;
    getCurrentScrollTop(): number;
    getCurrentScrollLeft(): number;
}
export declare class MouseTargetFactory {
    private readonly _context;
    private readonly _viewHelper;
    constructor(context: ViewContext, viewHelper: IPointerHandlerHelper);
    mouseTargetIsWidget(e: EditorMouseEvent): boolean;
    createMouseTarget(lastRenderData: PointerHandlerLastRenderData, editorPos: EditorPagePosition, pos: PageCoordinates, target: HTMLElement | null): IMouseTarget;
    private static _createMouseTarget;
    private static _hitTestContentWidget;
    private static _hitTestOverlayWidget;
    private static _hitTestViewCursor;
    private static _hitTestViewZone;
    private static _hitTestTextArea;
    private static _hitTestMargin;
    private static _hitTestViewLines;
    private static _hitTestMinimap;
    private static _hitTestScrollbarSlider;
    private static _hitTestScrollbar;
    getMouseColumn(editorPos: EditorPagePosition, pos: PageCoordinates): number;
    static _getMouseColumn(mouseContentHorizontalOffset: number, typicalHalfwidthCharacterWidth: number): number;
    private static createMouseTargetFromHitTestPosition;
    /**
     * Most probably WebKit browsers and Edge
     */
    private static _doHitTestWithCaretRangeFromPoint;
    private static _actualDoHitTestWithCaretRangeFromPoint;
    /**
     * Most probably Gecko
     */
    private static _doHitTestWithCaretPositionFromPoint;
    /**
     * Most probably IE
     */
    private static _doHitTestWithMoveToPoint;
    private static _snapToSoftTabBoundary;
    private static _doHitTest;
}
export declare function shadowCaretRangeFromPoint(shadowRoot: ShadowRoot, x: number, y: number): Range;

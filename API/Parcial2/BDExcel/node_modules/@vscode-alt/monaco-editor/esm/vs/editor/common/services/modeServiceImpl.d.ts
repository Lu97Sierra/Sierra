import { Emitter, Event } from '../../../base/common/event';
import { URI } from '../../../base/common/uri';
import { IMode, LanguageId, LanguageIdentifier } from '../modes';
import { ILanguageSelection, IModeService } from './modeService';
export declare class ModeServiceImpl implements IModeService {
    _serviceBrand: undefined;
    private readonly _instantiatedModes;
    private readonly _registry;
    private readonly _onDidCreateMode;
    readonly onDidCreateMode: Event<IMode>;
    protected readonly _onLanguagesMaybeChanged: Emitter<void>;
    readonly onLanguagesMaybeChanged: Event<void>;
    constructor(warnOnOverwrite?: boolean);
    protected _onReady(): Promise<boolean>;
    isRegisteredMode(mimetypeOrModeId: string): boolean;
    getRegisteredModes(): string[];
    getRegisteredLanguageNames(): string[];
    getExtensions(alias: string): string[];
    getFilenames(alias: string): string[];
    getMimeForMode(modeId: string): string | null;
    getLanguageName(modeId: string): string | null;
    getModeIdForLanguageName(alias: string): string | null;
    getModeIdByFilepathOrFirstLine(resource: URI | null, firstLine?: string): string | null;
    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): string | null;
    getLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier | null;
    getConfigurationFiles(modeId: string): URI[];
    create(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): ILanguageSelection;
    createByLanguageName(languageName: string): ILanguageSelection;
    createByFilepathOrFirstLine(resource: URI | null, firstLine?: string): ILanguageSelection;
    private _createModeAndGetLanguageIdentifier;
    triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): void;
    waitForLanguageRegistration(): Promise<void>;
    private _getModeIdByLanguageName;
    private _getOrCreateMode;
}

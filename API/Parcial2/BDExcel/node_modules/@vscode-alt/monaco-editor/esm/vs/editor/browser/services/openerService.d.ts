import { IDisposable } from '../../../base/common/lifecycle';
import { URI } from '../../../base/common/uri';
import { ICodeEditorService } from './codeEditorService';
import { ICommandService } from '../../../platform/commands/common/commands';
import { IOpener, IOpenerService, IValidator, IExternalUriResolver, OpenOptions, ResolveExternalUriOptions, IResolvedExternalUri, IExternalOpener } from '../../../platform/opener/common/opener';
export declare class OpenerService implements IOpenerService {
    readonly _serviceBrand: undefined;
    private readonly _openers;
    private readonly _validators;
    private readonly _resolvers;
    private readonly _resolvedUriTargets;
    private _externalOpener;
    constructor(editorService: ICodeEditorService, commandService: ICommandService);
    registerOpener(opener: IOpener): IDisposable;
    registerValidator(validator: IValidator): IDisposable;
    registerExternalUriResolver(resolver: IExternalUriResolver): IDisposable;
    setExternalOpener(externalOpener: IExternalOpener): void;
    open(target: URI | string, options?: OpenOptions): Promise<boolean>;
    resolveExternalUri(resource: URI, options?: ResolveExternalUriOptions): Promise<IResolvedExternalUri>;
    private _doOpenExternal;
    dispose(): void;
}

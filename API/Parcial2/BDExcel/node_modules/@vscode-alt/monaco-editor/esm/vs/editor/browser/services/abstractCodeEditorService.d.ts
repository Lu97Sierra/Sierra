import { Emitter, Event } from '../../../base/common/event';
import { Disposable } from '../../../base/common/lifecycle';
import { ICodeEditor, IDiffEditor } from '../editorBrowser';
import { ICodeEditorService } from './codeEditorService';
import { IDecorationRenderOptions } from '../../common/editorCommon';
import { IModelDecorationOptions, ITextModel } from '../../common/model';
import { IResourceEditorInput } from '../../../platform/editor/common/editor';
import { URI } from '../../../base/common/uri';
export declare abstract class AbstractCodeEditorService extends Disposable implements ICodeEditorService {
    readonly _serviceBrand: undefined;
    private readonly _onCodeEditorAdd;
    readonly onCodeEditorAdd: Event<ICodeEditor>;
    private readonly _onCodeEditorRemove;
    readonly onCodeEditorRemove: Event<ICodeEditor>;
    private readonly _onDiffEditorAdd;
    readonly onDiffEditorAdd: Event<IDiffEditor>;
    private readonly _onDiffEditorRemove;
    readonly onDiffEditorRemove: Event<IDiffEditor>;
    private readonly _onDidChangeTransientModelProperty;
    readonly onDidChangeTransientModelProperty: Event<ITextModel>;
    protected readonly _onDecorationTypeRegistered: Emitter<string>;
    onDecorationTypeRegistered: Event<string>;
    private readonly _codeEditors;
    private readonly _diffEditors;
    constructor();
    addCodeEditor(editor: ICodeEditor): void;
    removeCodeEditor(editor: ICodeEditor): void;
    listCodeEditors(): ICodeEditor[];
    addDiffEditor(editor: IDiffEditor): void;
    removeDiffEditor(editor: IDiffEditor): void;
    listDiffEditors(): IDiffEditor[];
    getFocusedCodeEditor(): ICodeEditor | null;
    abstract registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string, editor?: ICodeEditor): void;
    abstract removeDecorationType(key: string): void;
    abstract resolveDecorationOptions(decorationTypeKey: string | undefined, writable: boolean): IModelDecorationOptions;
    abstract resolveDecorationCSSRules(decorationTypeKey: string): CSSRuleList | null;
    private readonly _transientWatchers;
    private readonly _modelProperties;
    setModelProperty(resource: URI, key: string, value: any): void;
    getModelProperty(resource: URI, key: string): any;
    setTransientModelProperty(model: ITextModel, key: string, value: any): void;
    getTransientModelProperty(model: ITextModel, key: string): any;
    getTransientModelProperties(model: ITextModel): [string, any][] | undefined;
    _removeWatcher(w: ModelTransientSettingWatcher): void;
    abstract getActiveCodeEditor(): ICodeEditor | null;
    abstract openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null>;
}
export declare class ModelTransientSettingWatcher {
    readonly uri: string;
    private readonly _values;
    constructor(uri: string, model: ITextModel, owner: AbstractCodeEditorService);
    set(key: string, value: any): void;
    get(key: string): any;
    keys(): string[];
}

import { IQuickPickSeparator } from '../common/quickInput';
import { PickerQuickAccessProvider, IPickerQuickAccessItem, IPickerQuickAccessProviderOptions } from './pickerQuickAccess';
import { CancellationToken } from '../../../base/common/cancellation';
import { DisposableStore, Disposable, IDisposable } from '../../../base/common/lifecycle';
import { IStorageService } from '../../storage/common/storage';
import { IConfigurationService } from '../../configuration/common/configuration';
import { IInstantiationService } from '../../instantiation/common/instantiation';
import { IKeybindingService } from '../../keybinding/common/keybinding';
import { ICommandService } from '../../commands/common/commands';
import { ITelemetryService } from '../../telemetry/common/telemetry';
import { INotificationService } from '../../notification/common/notification';
export interface ICommandQuickPick extends IPickerQuickAccessItem {
    commandId: string;
    commandAlias?: string;
}
export interface ICommandsQuickAccessOptions extends IPickerQuickAccessProviderOptions<ICommandQuickPick> {
    showAlias: boolean;
}
export declare abstract class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider<ICommandQuickPick> implements IDisposable {
    protected options: ICommandsQuickAccessOptions;
    private readonly instantiationService;
    private readonly keybindingService;
    private readonly commandService;
    private readonly telemetryService;
    private readonly notificationService;
    static PREFIX: string;
    private static WORD_FILTER;
    private readonly commandsHistory;
    constructor(options: ICommandsQuickAccessOptions, instantiationService: IInstantiationService, keybindingService: IKeybindingService, commandService: ICommandService, telemetryService: ITelemetryService, notificationService: INotificationService);
    protected getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Promise<Array<ICommandQuickPick | IQuickPickSeparator>>;
    /**
     * Subclasses to provide the actual command entries.
     */
    protected abstract getCommandPicks(disposables: DisposableStore, token: CancellationToken): Promise<Array<ICommandQuickPick>>;
}
export declare class CommandsHistory extends Disposable {
    private readonly storageService;
    private readonly configurationService;
    static readonly DEFAULT_COMMANDS_HISTORY_LENGTH = 50;
    private static readonly PREF_KEY_CACHE;
    private static readonly PREF_KEY_COUNTER;
    private static cache;
    private static counter;
    private configuredCommandsHistoryLength;
    constructor(storageService: IStorageService, configurationService: IConfigurationService);
    private registerListeners;
    private updateConfiguration;
    private load;
    push(commandId: string): void;
    peek(commandId: string): number | undefined;
    static saveState(storageService: IStorageService): void;
    static getConfiguredCommandHistoryLength(configurationService: IConfigurationService): number;
    static clearHistory(configurationService: IConfigurationService, storageService: IStorageService): void;
}

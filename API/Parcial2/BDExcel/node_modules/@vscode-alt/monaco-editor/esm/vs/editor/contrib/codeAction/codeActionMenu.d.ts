import { IAnchor } from '../../../base/browser/ui/contextview/contextview';
import { ResolvedKeybinding } from '../../../base/common/keyCodes';
import { Disposable } from '../../../base/common/lifecycle';
import { ICodeEditor } from '../../browser/editorBrowser';
import { IPosition } from '../../common/core/position';
import { CodeAction } from '../../common/modes';
import { CodeActionItem, CodeActionSet } from './codeAction';
import { CodeActionTrigger } from './types';
import { IContextMenuService } from '../../../platform/contextview/browser/contextView';
import { IKeybindingService } from '../../../platform/keybinding/common/keybinding';
import { ResolvedKeybindingItem } from '../../../platform/keybinding/common/resolvedKeybindingItem';
interface CodeActionWidgetDelegate {
    onSelectCodeAction: (action: CodeActionItem) => Promise<any>;
}
export interface CodeActionShowOptions {
    readonly includeDisabledActions: boolean;
}
export declare class CodeActionMenu extends Disposable {
    private readonly _editor;
    private readonly _delegate;
    private readonly _contextMenuService;
    private _visible;
    private readonly _showingActions;
    private readonly _keybindingResolver;
    constructor(_editor: ICodeEditor, _delegate: CodeActionWidgetDelegate, _contextMenuService: IContextMenuService, keybindingService: IKeybindingService);
    get isVisible(): boolean;
    show(trigger: CodeActionTrigger, codeActions: CodeActionSet, at: IAnchor | IPosition, options: CodeActionShowOptions): Promise<void>;
    private getMenuActions;
    private _toCoords;
}
export declare class CodeActionKeybindingResolver {
    private readonly _keybindingProvider;
    private static readonly codeActionCommands;
    constructor(_keybindingProvider: {
        getKeybindings(): readonly ResolvedKeybindingItem[];
    });
    getResolver(): (action: CodeAction) => ResolvedKeybinding | undefined;
    private bestKeybindingForCodeAction;
}
export {};

import { IContextKeyService, IContextKey, IContextKeyServiceTarget } from '../contextkey/common/contextkey';
import { HistoryInputBox, IHistoryInputOptions } from '../../base/browser/ui/inputbox/inputBox';
import { FindInput, IFindInputOptions } from '../../base/browser/ui/findinput/findInput';
import { IContextViewProvider } from '../../base/browser/ui/contextview/contextview';
import { IHistoryNavigationWidget } from '../../base/browser/history';
import { ReplaceInput, IReplaceInputOptions } from '../../base/browser/ui/findinput/replaceInput';
export declare const HistoryNavigationWidgetContext = "historyNavigationWidget";
export declare const HistoryNavigationEnablementContext = "historyNavigationEnabled";
interface IContextScopedWidget {
    readonly target: IContextKeyServiceTarget;
}
interface IContextScopedHistoryNavigationWidget extends IContextScopedWidget {
    historyNavigator: IHistoryNavigationWidget;
}
export declare function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService: IContextKeyService, widget: IContextScopedHistoryNavigationWidget): {
    scopedContextKeyService: IContextKeyService;
    historyNavigationEnablement: IContextKey<boolean>;
};
export declare class ContextScopedHistoryInputBox extends HistoryInputBox {
    constructor(container: HTMLElement, contextViewProvider: IContextViewProvider | undefined, options: IHistoryInputOptions, contextKeyService: IContextKeyService);
}
export declare class ContextScopedFindInput extends FindInput {
    constructor(container: HTMLElement | null, contextViewProvider: IContextViewProvider, options: IFindInputOptions, contextKeyService: IContextKeyService, showFindOptions?: boolean);
}
export declare class ContextScopedReplaceInput extends ReplaceInput {
    constructor(container: HTMLElement | null, contextViewProvider: IContextViewProvider | undefined, options: IReplaceInputOptions, contextKeyService: IContextKeyService, showReplaceOptions?: boolean);
}
export {};

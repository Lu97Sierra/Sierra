import { Disposable, IDisposable } from '../lifecycle';
export interface IWorker extends IDisposable {
    getId(): number;
    postMessage(message: any, transfer: ArrayBuffer[]): void;
}
export interface IWorkerCallback {
    (message: any): void;
}
export interface IWorkerFactory {
    create(moduleId: string, callback: IWorkerCallback, onErrorCallback: (err: any) => void): IWorker;
}
export declare function logOnceWebWorkerWarning(err: any): void;
export interface IWorkerClient<W> {
    getProxyObject(): Promise<W>;
    dispose(): void;
}
/**
 * Main thread side
 */
export declare class SimpleWorkerClient<W extends object, H extends object> extends Disposable implements IWorkerClient<W> {
    private readonly _worker;
    private readonly _onModuleLoaded;
    private readonly _protocol;
    private readonly _lazyProxy;
    constructor(workerFactory: IWorkerFactory, moduleId: string, host: H);
    getProxyObject(): Promise<W>;
    private _request;
    private _onError;
}
export interface IRequestHandler {
    _requestHandlerBrand: any;
    [prop: string]: any;
}
export interface IRequestHandlerFactory<H> {
    (host: H): IRequestHandler;
}
/**
 * Worker side
 */
export declare class SimpleWorkerServer<H extends object> {
    private _requestHandlerFactory;
    private _requestHandler;
    private _protocol;
    constructor(postMessage: (msg: any, transfer?: ArrayBuffer[]) => void, requestHandlerFactory: IRequestHandlerFactory<H> | null);
    onmessage(msg: any): void;
    private _handleMessage;
    private initialize;
}
/**
 * Called on the worker side
 */
export declare function create(postMessage: (msg: string) => void): SimpleWorkerServer<any>;

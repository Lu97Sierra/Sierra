import { ICommandQuickPick } from '../../../../platform/quickinput/browser/commandsQuickAccess';
import { ICodeEditorService } from '../../../browser/services/codeEditorService';
import { AbstractEditorCommandsQuickAccessProvider } from '../../../contrib/quickAccess/commandsQuickAccess';
import { IEditor } from '../../../common/editorCommon';
import { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
import { ICommandService } from '../../../../platform/commands/common/commands';
import { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';
import { INotificationService } from '../../../../platform/notification/common/notification';
import { EditorAction } from '../../../browser/editorExtensions';
export declare class StandaloneCommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {
    private readonly codeEditorService;
    protected get activeTextEditorControl(): IEditor | undefined;
    constructor(instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, keybindingService: IKeybindingService, commandService: ICommandService, telemetryService: ITelemetryService, notificationService: INotificationService);
    protected getCommandPicks(): Promise<Array<ICommandQuickPick>>;
}
export declare class GotoLineAction extends EditorAction {
    constructor();
    run(accessor: ServicesAccessor): void;
}

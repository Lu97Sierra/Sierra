import { Event } from '../../../base/common/event';
import { IDisposable } from '../../../base/common/lifecycle';
import { ITextModel } from '../model';
import { LanguageSelector } from './languageSelector';
export declare class LanguageFeatureRegistry<T> {
    private _clock;
    private readonly _entries;
    private readonly _onDidChange;
    get onDidChange(): Event<number>;
    register(selector: LanguageSelector, provider: T): IDisposable;
    has(model: ITextModel): boolean;
    all(model: ITextModel): T[];
    ordered(model: ITextModel): T[];
    orderedGroups(model: ITextModel): T[][];
    private _orderedForEach;
    private _lastCandidate;
    private _updateScores;
    private static _compareByScoreAndTime;
}
/**
 * Keeps moving average per model and set of providers so that requests
 * can be debounce according to the provider performance
 */
export declare class LanguageFeatureRequestDelays {
    private readonly _registry;
    readonly min: number;
    readonly max: number;
    private readonly _cache;
    constructor(_registry: LanguageFeatureRegistry<any>, min: number, max?: number);
    private _key;
    private _clamp;
    get(model: ITextModel): number;
    update(model: ITextModel, value: number): number;
}

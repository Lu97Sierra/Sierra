import './links.css';
import { ICodeEditor } from '../../browser/editorBrowser';
import { Position } from '../../common/core/position';
import { IEditorContribution } from '../../common/editorCommon';
import { IModelDecorationsChangeAccessor, IModelDeltaDecoration } from '../../common/model';
import { Link } from './getLinks';
import { INotificationService } from '../../../platform/notification/common/notification';
import { IOpenerService } from '../../../platform/opener/common/opener';
declare class LinkOccurrence {
    static decoration(link: Link, useMetaKey: boolean): IModelDeltaDecoration;
    private static _getOptions;
    decorationId: string;
    link: Link;
    constructor(link: Link, decorationId: string);
    activate(changeAccessor: IModelDecorationsChangeAccessor, useMetaKey: boolean): void;
    deactivate(changeAccessor: IModelDecorationsChangeAccessor, useMetaKey: boolean): void;
}
export declare class LinkDetector implements IEditorContribution {
    static readonly ID: string;
    static get(editor: ICodeEditor): LinkDetector;
    static readonly RECOMPUTE_TIME = 1000;
    private readonly editor;
    private enabled;
    private readonly listenersToRemove;
    private readonly timeout;
    private computePromise;
    private activeLinksList;
    private activeLinkDecorationId;
    private readonly openerService;
    private readonly notificationService;
    private currentOccurrences;
    constructor(editor: ICodeEditor, openerService: IOpenerService, notificationService: INotificationService);
    private onModelChanged;
    private onModelModeChanged;
    private onChange;
    private beginCompute;
    private updateDecorations;
    private _onEditorMouseMove;
    private cleanUpActiveLinkDecoration;
    private onEditorMouseUp;
    openLinkOccurrence(occurrence: LinkOccurrence, openToSide: boolean, fromUserGesture?: boolean): void;
    getLinkOccurrence(position: Position | null): LinkOccurrence | null;
    private isEnabled;
    private stop;
    dispose(): void;
}
export {};

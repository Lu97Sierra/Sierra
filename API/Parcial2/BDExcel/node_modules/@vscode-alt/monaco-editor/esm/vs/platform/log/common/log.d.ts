import { IDisposable, Disposable } from '../../../base/common/lifecycle';
import { Event } from '../../../base/common/event';
import { IEnvironmentService } from '../../environment/common/environment';
import { LoggerChannelClient } from './logIpc';
import { URI } from '../../../base/common/uri';
export declare const ILogService: import("../../instantiation/common/instantiation").ServiceIdentifier<ILogService>;
export declare const ILoggerService: import("../../instantiation/common/instantiation").ServiceIdentifier<ILoggerService>;
export declare enum LogLevel {
    Trace = 0,
    Debug = 1,
    Info = 2,
    Warning = 3,
    Error = 4,
    Critical = 5,
    Off = 6
}
export declare const DEFAULT_LOG_LEVEL: LogLevel;
export interface ILogger extends IDisposable {
    onDidChangeLogLevel: Event<LogLevel>;
    getLevel(): LogLevel;
    setLevel(level: LogLevel): void;
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string | Error, ...args: any[]): void;
    critical(message: string | Error, ...args: any[]): void;
    /**
     * An operation to flush the contents. Can be synchronous.
     */
    flush(): void;
}
export interface ILogService extends ILogger {
    readonly _serviceBrand: undefined;
}
export interface ILoggerService {
    readonly _serviceBrand: undefined;
    getLogger(file: URI): ILogger;
}
export declare abstract class AbstractLogService extends Disposable {
    private level;
    private readonly _onDidChangeLogLevel;
    readonly onDidChangeLogLevel: Event<LogLevel>;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
}
export declare class ConsoleLogMainService extends AbstractLogService implements ILogService {
    readonly _serviceBrand: undefined;
    private useColors;
    constructor(logLevel?: LogLevel);
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string | Error, ...args: any[]): void;
    error(message: string, ...args: any[]): void;
    critical(message: string, ...args: any[]): void;
    dispose(): void;
    flush(): void;
}
export declare class ConsoleLogService extends AbstractLogService implements ILogService {
    readonly _serviceBrand: undefined;
    constructor(logLevel?: LogLevel);
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string | Error, ...args: any[]): void;
    error(message: string, ...args: any[]): void;
    critical(message: string, ...args: any[]): void;
    dispose(): void;
    flush(): void;
}
export declare class LogServiceAdapter extends AbstractLogService implements ILogService {
    private readonly adapter;
    readonly _serviceBrand: undefined;
    constructor(adapter: {
        consoleLog: (type: string, args: any[]) => void;
    }, logLevel?: LogLevel);
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string | Error, ...args: any[]): void;
    error(message: string | Error, ...args: any[]): void;
    critical(message: string | Error, ...args: any[]): void;
    private extractMessage;
    dispose(): void;
    flush(): void;
}
export declare class ConsoleLogInMainService extends LogServiceAdapter implements ILogService {
    readonly _serviceBrand: undefined;
    constructor(client: LoggerChannelClient, logLevel?: LogLevel);
}
export declare class MultiplexLogService extends AbstractLogService implements ILogService {
    private readonly logServices;
    readonly _serviceBrand: undefined;
    constructor(logServices: ReadonlyArray<ILogService>);
    setLevel(level: LogLevel): void;
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string | Error, ...args: any[]): void;
    critical(message: string | Error, ...args: any[]): void;
    flush(): void;
    dispose(): void;
}
export declare class DelegatedLogService extends Disposable implements ILogService {
    private logService;
    readonly _serviceBrand: undefined;
    constructor(logService: ILogService);
    get onDidChangeLogLevel(): Event<LogLevel>;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string | Error, ...args: any[]): void;
    critical(message: string | Error, ...args: any[]): void;
    flush(): void;
}
export declare class NullLogService implements ILogService {
    readonly _serviceBrand: undefined;
    readonly onDidChangeLogLevel: Event<LogLevel>;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string | Error, ...args: any[]): void;
    critical(message: string | Error, ...args: any[]): void;
    dispose(): void;
    flush(): void;
}
export declare function getLogLevel(environmentService: IEnvironmentService): LogLevel;
export declare function parseLogLevel(logLevel: string): LogLevel | undefined;
export declare function LogLevelToString(logLevel: LogLevel): string;

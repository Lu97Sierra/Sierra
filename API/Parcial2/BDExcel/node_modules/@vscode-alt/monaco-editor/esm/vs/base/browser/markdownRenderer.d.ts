import { FormattedTextRenderOptions } from './formattedTextRenderer';
import { IMarkdownString } from '../common/htmlContent';
import * as marked from '../common/marked/marked';
import { URI } from '../common/uri';
export interface MarkedOptions extends marked.MarkedOptions {
    baseUrl?: never;
}
export interface MarkdownRenderOptions extends FormattedTextRenderOptions {
    codeBlockRenderer?: (modeId: string, value: string) => Promise<HTMLElement>;
    asyncRenderCallback?: () => void;
    baseUrl?: URI;
}
/**
 * Low-level way create a html element from a markdown string.
 *
 * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/browser/core/markdownRenderer.ts)
 * which comes with support for pretty code block rendering and which uses the default way of handling links.
 */
export declare function renderMarkdown(markdown: IMarkdownString, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): HTMLElement;
/**
 * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.
 */
export declare function renderMarkdownAsPlaintext(markdown: IMarkdownString): string;

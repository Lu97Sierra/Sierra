import './actionbar.css';
import { Disposable } from '../../../common/lifecycle';
import { SelectBox, ISelectOptionItem, ISelectBoxOptions } from '../selectBox/selectBox';
import { IAction, IActionRunner, IActionViewItem } from '../../../common/actions';
import { IContextViewProvider } from '../contextview/contextview';
import { EventLike } from '../../dom';
export interface IBaseActionViewItemOptions {
    draggable?: boolean;
    isMenu?: boolean;
    useEventAsContext?: boolean;
}
export declare class BaseActionViewItem extends Disposable implements IActionViewItem {
    protected options: IBaseActionViewItemOptions;
    element: HTMLElement | undefined;
    _context: any;
    _action: IAction;
    private _actionRunner;
    constructor(context: any, action: IAction, options?: IBaseActionViewItemOptions);
    private handleActionChangeEvent;
    get actionRunner(): IActionRunner;
    set actionRunner(actionRunner: IActionRunner);
    getAction(): IAction;
    isEnabled(): boolean;
    setActionContext(newContext: unknown): void;
    render(container: HTMLElement): void;
    onClick(event: EventLike): void;
    focus(): void;
    blur(): void;
    protected updateEnabled(): void;
    protected updateLabel(): void;
    protected updateTooltip(): void;
    protected updateClass(): void;
    protected updateChecked(): void;
    dispose(): void;
}
export interface IActionViewItemOptions extends IBaseActionViewItemOptions {
    icon?: boolean;
    label?: boolean;
    keybinding?: string | null;
}
export declare class ActionViewItem extends BaseActionViewItem {
    protected label: HTMLElement | undefined;
    protected options: IActionViewItemOptions;
    private cssClass?;
    constructor(context: unknown, action: IAction, options?: IActionViewItemOptions);
    render(container: HTMLElement): void;
    focus(): void;
    updateLabel(): void;
    updateTooltip(): void;
    updateClass(): void;
    updateEnabled(): void;
    updateChecked(): void;
}
export declare class SelectActionViewItem extends BaseActionViewItem {
    protected selectBox: SelectBox;
    constructor(ctx: unknown, action: IAction, options: ISelectOptionItem[], selected: number, contextViewProvider: IContextViewProvider, selectBoxOptions?: ISelectBoxOptions);
    setOptions(options: ISelectOptionItem[], selected?: number): void;
    select(index: number): void;
    private registerListeners;
    protected getActionContext(option: string, index: number): string;
    focus(): void;
    blur(): void;
    render(container: HTMLElement): void;
}

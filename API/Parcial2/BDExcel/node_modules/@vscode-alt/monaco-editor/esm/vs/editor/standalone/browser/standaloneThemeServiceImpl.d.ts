import { IStandaloneTheme, IStandaloneThemeData, IStandaloneThemeService } from '../common/standaloneThemeService';
import { IFileIconTheme } from '../../../platform/theme/common/themeService';
import { IDisposable, Disposable } from '../../../base/common/lifecycle';
export declare class StandaloneThemeServiceImpl extends Disposable implements IStandaloneThemeService {
    readonly _serviceBrand: undefined;
    private readonly _onColorThemeChange;
    readonly onDidColorThemeChange: import("../../../base/common/event").Event<IStandaloneTheme>;
    private readonly _onFileIconThemeChange;
    readonly onDidFileIconThemeChange: import("../../../base/common/event").Event<IFileIconTheme>;
    private readonly _environment;
    private readonly _knownThemes;
    private _codiconCSS;
    private _themeCSS;
    private _allCSS;
    private _globalStyleElement;
    private _styleElements;
    private _theme;
    constructor();
    registerEditorContainer(domNode: HTMLElement): IDisposable;
    private _registerRegularEditorContainer;
    private _registerShadowDomContainer;
    defineTheme(themeName: string, themeData: IStandaloneThemeData): void;
    getColorTheme(): IStandaloneTheme;
    setTheme(themeName: string): string;
    private _updateCSS;
    getFileIconTheme(): IFileIconTheme;
}

import { Disposable } from '../../../base/common/lifecycle';
import { ICodeEditorService } from '../../browser/services/codeEditorService';
import { IEditorWorkerService } from '../../common/services/editorWorkerService';
import { IModeService } from '../../common/services/modeService';
import { IModelService } from '../../common/services/modelService';
import { ITextResourceConfigurationService, ITextResourcePropertiesService } from '../../common/services/textResourceConfigurationService';
import { SimpleEditorProgressService, StandaloneTelemetryService } from './simpleServices';
import { IStandaloneThemeService } from '../common/standaloneThemeService';
import { IConfigurationService } from '../../../platform/configuration/common/configuration';
import { IDialogService } from '../../../platform/dialogs/common/dialogs';
import { IInstantiationService, ServiceIdentifier } from '../../../platform/instantiation/common/instantiation';
import { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection';
import { ILabelService } from '../../../platform/label/common/label';
import { ILogService } from '../../../platform/log/common/log';
import { IMarkerService } from '../../../platform/markers/common/markers';
import { INotificationService } from '../../../platform/notification/common/notification';
import { IStorageService } from '../../../platform/storage/common/storage';
import { IWorkspaceContextService } from '../../../platform/workspace/common/workspace';
import { IMarkerDecorationsService } from '../../common/services/markersDecorationService';
import { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo';
export interface IEditorOverrideServices {
    [index: string]: any;
}
export declare module StaticServices {
    class LazyStaticService<T> {
        private readonly _serviceId;
        private readonly _factory;
        private _value;
        get id(): ServiceIdentifier<T>;
        constructor(serviceId: ServiceIdentifier<T>, factory: (overrides?: IEditorOverrideServices) => T);
        get(overrides?: IEditorOverrideServices): T;
    }
    function init(overrides: IEditorOverrideServices): [ServiceCollection, IInstantiationService];
    const instantiationService: LazyStaticService<IInstantiationService>;
    const configurationService: LazyStaticService<IConfigurationService>;
    const resourceConfigurationService: LazyStaticService<ITextResourceConfigurationService>;
    const resourcePropertiesService: LazyStaticService<ITextResourcePropertiesService>;
    const contextService: LazyStaticService<IWorkspaceContextService>;
    const labelService: LazyStaticService<ILabelService>;
    const telemetryService: LazyStaticService<StandaloneTelemetryService>;
    const dialogService: LazyStaticService<IDialogService>;
    const notificationService: LazyStaticService<INotificationService>;
    const markerService: LazyStaticService<IMarkerService>;
    const modeService: LazyStaticService<IModeService>;
    const standaloneThemeService: LazyStaticService<IStandaloneThemeService>;
    const logService: LazyStaticService<ILogService>;
    const undoRedoService: LazyStaticService<IUndoRedoService>;
    const modelService: LazyStaticService<IModelService>;
    const markerDecorationsService: LazyStaticService<IMarkerDecorationsService>;
    const codeEditorService: LazyStaticService<ICodeEditorService>;
    const editorProgressService: LazyStaticService<SimpleEditorProgressService>;
    const storageService: LazyStaticService<IStorageService>;
    const editorWorkerService: LazyStaticService<IEditorWorkerService>;
}
export declare class DynamicStandaloneServices extends Disposable {
    private readonly _serviceCollection;
    private readonly _instantiationService;
    constructor(domElement: HTMLElement, overrides: IEditorOverrideServices);
    get<T>(serviceId: ServiceIdentifier<T>): T;
    set<T>(serviceId: ServiceIdentifier<T>, instance: T): void;
    has<T>(serviceId: ServiceIdentifier<T>): boolean;
}

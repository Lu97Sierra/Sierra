import { IListRenderer, IListVirtualDelegate } from '../../../base/browser/ui/list/list';
import { IPagedRenderer, PagedList, IPagedListOptions } from '../../../base/browser/ui/list/listPaging';
import { IListOptions, List, IListAccessibilityProvider, IListOptionsUpdate } from '../../../base/browser/ui/list/listWidget';
import { Event } from '../../../base/common/event';
import { Disposable, IDisposable } from '../../../base/common/lifecycle';
import { IConfigurationService } from '../../configuration/common/configuration';
import { IContextKey, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey';
import { IEditorOptions } from '../../editor/common/editor';
import { IKeybindingService } from '../../keybinding/common/keybinding';
import { IColorMapping } from '../../theme/common/styler';
import { IThemeService } from '../../theme/common/themeService';
import { ObjectTree, IObjectTreeOptions, ICompressibleTreeRenderer, CompressibleObjectTree, ICompressibleObjectTreeOptions, ICompressibleObjectTreeOptionsUpdate } from '../../../base/browser/ui/tree/objectTree';
import { ITreeRenderer, IAsyncDataSource, IDataSource } from '../../../base/browser/ui/tree/tree';
import { AsyncDataTree, IAsyncDataTreeOptions, CompressibleAsyncDataTree, ITreeCompressionDelegate, ICompressibleAsyncDataTreeOptions, IAsyncDataTreeOptionsUpdate } from '../../../base/browser/ui/tree/asyncDataTree';
import { DataTree, IDataTreeOptions } from '../../../base/browser/ui/tree/dataTree';
import { IAbstractTreeOptionsUpdate } from '../../../base/browser/ui/tree/abstractTree';
import { IAccessibilityService } from '../../accessibility/common/accessibility';
export declare type ListWidget = List<any> | PagedList<any> | ObjectTree<any, any> | DataTree<any, any, any> | AsyncDataTree<any, any, any>;
export declare type WorkbenchListWidget = WorkbenchList<any> | WorkbenchPagedList<any> | WorkbenchObjectTree<any, any> | WorkbenchCompressibleObjectTree<any, any> | WorkbenchDataTree<any, any, any> | WorkbenchAsyncDataTree<any, any, any> | WorkbenchCompressibleAsyncDataTree<any, any, any>;
export declare const IListService: import("../../instantiation/common/instantiation").ServiceIdentifier<IListService>;
export interface IListService {
    readonly _serviceBrand: undefined;
    /**
     * Returns the currently focused list widget if any.
     */
    readonly lastFocusedList: WorkbenchListWidget | undefined;
}
export declare class ListService implements IListService {
    private readonly _themeService;
    readonly _serviceBrand: undefined;
    private disposables;
    private lists;
    private _lastFocusedWidget;
    private _hasCreatedStyleController;
    get lastFocusedList(): WorkbenchListWidget | undefined;
    constructor(_themeService: IThemeService);
    register(widget: WorkbenchListWidget, extraContextKeys?: (IContextKey<boolean>)[]): IDisposable;
    dispose(): void;
}
export declare const WorkbenchListSupportsMultiSelectContextKey: RawContextKey<boolean>;
export declare const WorkbenchListFocusContextKey: import("../../contextkey/common/contextkey").ContextKeyFalseExpr | import("../../contextkey/common/contextkey").ContextKeyTrueExpr | import("../../contextkey/common/contextkey").ContextKeyDefinedExpr | import("../../contextkey/common/contextkey").ContextKeyNotExpr | import("../../contextkey/common/contextkey").ContextKeyEqualsExpr | import("../../contextkey/common/contextkey").ContextKeyNotEqualsExpr | import("../../contextkey/common/contextkey").ContextKeyRegexExpr | import("../../contextkey/common/contextkey").ContextKeyNotRegexExpr | import("../../contextkey/common/contextkey").ContextKeyAndExpr | import("../../contextkey/common/contextkey").ContextKeyOrExpr | import("../../contextkey/common/contextkey").ContextKeyInExpr | import("../../contextkey/common/contextkey").ContextKeyNotInExpr | import("../../contextkey/common/contextkey").ContextKeyGreaterExpr | import("../../contextkey/common/contextkey").ContextKeyGreaterEqualsExpr | import("../../contextkey/common/contextkey").ContextKeySmallerExpr | import("../../contextkey/common/contextkey").ContextKeySmallerEqualsExpr | undefined;
export declare const WorkbenchListHasSelectionOrFocus: RawContextKey<boolean>;
export declare const WorkbenchListDoubleSelection: RawContextKey<boolean>;
export declare const WorkbenchListMultiSelection: RawContextKey<boolean>;
export declare const WorkbenchListSupportsKeyboardNavigation: RawContextKey<boolean>;
export declare const WorkbenchListAutomaticKeyboardNavigationKey = "listAutomaticKeyboardNavigation";
export declare const WorkbenchListAutomaticKeyboardNavigation: RawContextKey<boolean>;
export declare let didBindWorkbenchListAutomaticKeyboardNavigation: boolean;
export interface IWorkbenchListOptionsUpdate extends IListOptionsUpdate {
    readonly overrideStyles?: IColorMapping;
}
export interface IWorkbenchListOptions<T> extends IWorkbenchListOptionsUpdate, IListOptions<T> {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
}
export declare class WorkbenchList<T> extends List<T> {
    readonly contextKeyService: IContextKeyService;
    private readonly themeService;
    private listHasSelectionOrFocus;
    private listDoubleSelection;
    private listMultiSelection;
    private horizontalScrolling;
    private _styler;
    private _useAltAsMultipleSelectionModifier;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<T>, renderers: IListRenderer<T, any>[], options: IWorkbenchListOptions<T>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService);
    updateOptions(options: IWorkbenchListOptionsUpdate): void;
    dispose(): void;
    private updateStyles;
    get useAltAsMultipleSelectionModifier(): boolean;
}
export interface IWorkbenchPagedListOptions<T> extends IWorkbenchListOptionsUpdate, IPagedListOptions<T> {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
}
export declare class WorkbenchPagedList<T> extends PagedList<T> {
    readonly contextKeyService: IContextKeyService;
    private readonly disposables;
    private _useAltAsMultipleSelectionModifier;
    private horizontalScrolling;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<number>, renderers: IPagedRenderer<T, any>[], options: IWorkbenchPagedListOptions<T>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService);
    get useAltAsMultipleSelectionModifier(): boolean;
    dispose(): void;
}
export interface IOpenResourceOptions {
    editorOptions: IEditorOptions;
    sideBySide: boolean;
    element: any;
    payload: any;
}
export interface IResourceResultsNavigationOptions {
    openOnFocus: boolean;
}
export interface IOpenEvent<T> {
    editorOptions: IEditorOptions;
    sideBySide: boolean;
    element: T;
    browserEvent?: UIEvent;
}
export interface IResourceNavigatorOptions {
    readonly configurationService?: IConfigurationService;
    readonly openOnFocus?: boolean;
    readonly openOnSingleClick?: boolean;
}
export interface SelectionKeyboardEvent extends KeyboardEvent {
    preserveFocus?: boolean;
    __forceEvent?: boolean;
}
export declare function getSelectionKeyboardEvent(typeArg?: string, preserveFocus?: boolean): SelectionKeyboardEvent;
declare abstract class ResourceNavigator<T> extends Disposable {
    protected readonly widget: ListWidget;
    private readonly openOnFocus;
    private openOnSingleClick;
    private readonly _onDidOpen;
    readonly onDidOpen: Event<IOpenEvent<T | undefined>>;
    constructor(widget: ListWidget, options?: IResourceNavigatorOptions);
    private onFocusFromKeyboard;
    private onSelectionFromKeyboard;
    private onPointer;
    private onMouseDblClick;
    private _open;
    abstract getSelectedElement(): T | undefined;
}
export declare class ListResourceNavigator<T> extends ResourceNavigator<T> {
    protected readonly widget: List<T> | PagedList<T>;
    constructor(widget: List<T> | PagedList<T>, options?: IResourceNavigatorOptions);
    getSelectedElement(): T | undefined;
}
export interface IWorkbenchObjectTreeOptions<T, TFilterData> extends IObjectTreeOptions<T, TFilterData>, IResourceNavigatorOptions {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
    readonly overrideStyles?: IColorMapping;
}
export declare class WorkbenchObjectTree<T extends NonNullable<any>, TFilterData = void> extends ObjectTree<T, TFilterData> {
    private internals;
    get contextKeyService(): IContextKeyService;
    get useAltAsMultipleSelectionModifier(): boolean;
    get onDidOpen(): Event<IOpenEvent<T | undefined>>;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<T>, renderers: ITreeRenderer<T, TFilterData, any>[], options: IWorkbenchObjectTreeOptions<T, TFilterData>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService);
}
export interface IWorkbenchCompressibleObjectTreeOptionsUpdate extends ICompressibleObjectTreeOptionsUpdate {
    readonly overrideStyles?: IColorMapping;
}
export interface IWorkbenchCompressibleObjectTreeOptions<T, TFilterData> extends IWorkbenchCompressibleObjectTreeOptionsUpdate, ICompressibleObjectTreeOptions<T, TFilterData>, IResourceNavigatorOptions {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
}
export declare class WorkbenchCompressibleObjectTree<T extends NonNullable<any>, TFilterData = void> extends CompressibleObjectTree<T, TFilterData> {
    private internals;
    get contextKeyService(): IContextKeyService;
    get useAltAsMultipleSelectionModifier(): boolean;
    get onDidOpen(): Event<IOpenEvent<T | undefined>>;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<T>, renderers: ICompressibleTreeRenderer<T, TFilterData, any>[], options: IWorkbenchCompressibleObjectTreeOptions<T, TFilterData>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService);
    updateOptions(options?: IWorkbenchCompressibleObjectTreeOptionsUpdate): void;
}
export interface IWorkbenchDataTreeOptionsUpdate extends IAbstractTreeOptionsUpdate {
    readonly overrideStyles?: IColorMapping;
}
export interface IWorkbenchDataTreeOptions<T, TFilterData> extends IWorkbenchDataTreeOptionsUpdate, IDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
}
export declare class WorkbenchDataTree<TInput, T, TFilterData = void> extends DataTree<TInput, T, TFilterData> {
    private internals;
    get contextKeyService(): IContextKeyService;
    get useAltAsMultipleSelectionModifier(): boolean;
    get onDidOpen(): Event<IOpenEvent<T | undefined>>;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<T>, renderers: ITreeRenderer<T, TFilterData, any>[], dataSource: IDataSource<TInput, T>, options: IWorkbenchDataTreeOptions<T, TFilterData>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService);
    updateOptions(options?: IWorkbenchDataTreeOptionsUpdate): void;
}
export interface IWorkbenchAsyncDataTreeOptionsUpdate extends IAsyncDataTreeOptionsUpdate {
    readonly overrideStyles?: IColorMapping;
}
export interface IWorkbenchAsyncDataTreeOptions<T, TFilterData> extends IWorkbenchAsyncDataTreeOptionsUpdate, IAsyncDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
}
export declare class WorkbenchAsyncDataTree<TInput, T, TFilterData = void> extends AsyncDataTree<TInput, T, TFilterData> {
    private internals;
    get contextKeyService(): IContextKeyService;
    get useAltAsMultipleSelectionModifier(): boolean;
    get onDidOpen(): Event<IOpenEvent<T | undefined>>;
    constructor(user: string, container: HTMLElement, delegate: IListVirtualDelegate<T>, renderers: ITreeRenderer<T, TFilterData, any>[], dataSource: IAsyncDataSource<TInput, T>, options: IWorkbenchAsyncDataTreeOptions<T, TFilterData>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService);
    updateOptions(options?: IWorkbenchAsyncDataTreeOptionsUpdate): void;
}
export interface IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData> extends ICompressibleAsyncDataTreeOptions<T, TFilterData>, IResourceNavigatorOptions {
    readonly accessibilityProvider: IListAccessibilityProvider<T>;
    readonly overrideStyles?: IColorMapping;
}
export declare class WorkbenchCompressibleAsyncDataTree<TInput, T, TFilterData = void> extends CompressibleAsyncDataTree<TInput, T, TFilterData> {
    private internals;
    get contextKeyService(): IContextKeyService;
    get useAltAsMultipleSelectionModifier(): boolean;
    get onDidOpen(): Event<IOpenEvent<T | undefined>>;
    constructor(user: string, container: HTMLElement, virtualDelegate: IListVirtualDelegate<T>, compressionDelegate: ITreeCompressionDelegate<T>, renderers: ICompressibleTreeRenderer<T, TFilterData, any>[], dataSource: IAsyncDataSource<TInput, T>, options: IWorkbenchCompressibleAsyncDataTreeOptions<T, TFilterData>, contextKeyService: IContextKeyService, listService: IListService, themeService: IThemeService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService);
}
export {};

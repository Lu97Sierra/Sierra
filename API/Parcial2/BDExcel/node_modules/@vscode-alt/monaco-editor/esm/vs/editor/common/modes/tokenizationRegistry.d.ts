import { Color } from '../../../base/common/color';
import { Event } from '../../../base/common/event';
import { IDisposable } from '../../../base/common/lifecycle';
import { ITokenizationRegistry, ITokenizationSupport, ITokenizationSupportChangedEvent } from '../modes';
export declare class TokenizationRegistryImpl implements ITokenizationRegistry {
    private readonly _map;
    private readonly _promises;
    private readonly _onDidChange;
    readonly onDidChange: Event<ITokenizationSupportChangedEvent>;
    private _colorMap;
    constructor();
    fire(languages: string[]): void;
    register(language: string, support: ITokenizationSupport): IDisposable;
    registerPromise(language: string, supportPromise: Thenable<ITokenizationSupport | null>): IDisposable;
    getPromise(language: string): Thenable<ITokenizationSupport> | null;
    get(language: string): ITokenizationSupport | null;
    setColorMap(colorMap: Color[]): void;
    getColorMap(): Color[] | null;
    getDefaultBackground(): Color | null;
}

import { Disposable } from '@workbench-stack/core';
import { IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IFileSystemProviderWithFileReadWriteCapability, FileSystemProviderCapabilities, IFileChange, IWatchOptions, FileType, IStat, FileWriteOptions, FileDeleteOptions, FileOverwriteOptions } from '@files-stack/core';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
export interface IDbKey {
    fragment?: string;
    query: string;
    collection: string;
}
export declare abstract class KeyValueLogProvider extends Disposable implements IFileSystemProviderWithFileReadWriteCapability {
    private readonly scheme;
    readonly capabilities: FileSystemProviderCapabilities;
    readonly onDidChangeCapabilities: Event<void>;
    private readonly _onDidChangeFile;
    readonly onDidChangeFile: Event<IFileChange[]>;
    private readonly versions;
    constructor(scheme: string);
    watch(resource: URI, opts: IWatchOptions): IDisposable;
    mkdir(resource: URI): Promise<void>;
    stat(resource: URI): Promise<IStat>;
    readdir(resource: URI): Promise<[string, FileType][]>;
    readFile(resource: URI): Promise<Uint8Array>;
    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;
    delete(resource: URI, opts: FileDeleteOptions): Promise<void>;
    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
    private toResource;
    protected abstract getAllKeys(key: IDbKey): Promise<string[]>;
    protected abstract hasKey(key: IDbKey): Promise<boolean>;
    protected abstract getValue(key: IDbKey): Promise<string>;
    protected abstract setValue(key: IDbKey, value: string): Promise<void>;
    protected abstract deleteKey(key: IDbKey): Promise<void>;
    private generateKey;
}

import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IStoredWorkspaceFolder, ConfigurationModel, IConfigurationCache, IJSONEditingService } from '@workbench-stack/core';
import { IWorkspaceIdentifier, IConfigurationFileService } from '../../../interfaces';
export declare class WorkspaceConfiguration extends Disposable {
    private readonly _configurationFileService;
    private readonly _cachedConfiguration;
    private _workspaceConfiguration;
    private _workspaceConfigurationChangeDisposable;
    private _workspaceIdentifier;
    private readonly _onDidUpdateConfiguration;
    readonly onDidUpdateConfiguration: Event<void>;
    private _loaded;
    get loaded(): boolean;
    constructor(configurationCache: IConfigurationCache, configurationFileService: IConfigurationFileService);
    load(workspaceIdentifier: IWorkspaceIdentifier): Promise<void>;
    reload(): Promise<void>;
    getFolders(): IStoredWorkspaceFolder[];
    setFolders(folders: IStoredWorkspaceFolder[], jsonEditingService: IJSONEditingService /** @sri replace with interface */): Promise<void>;
    getConfiguration(): ConfigurationModel;
    reprocessWorkspaceSettings(): ConfigurationModel;
    private waitAndSwitch;
    private switch;
    private onDidWorkspaceConfigurationChange;
    private updateCache;
}

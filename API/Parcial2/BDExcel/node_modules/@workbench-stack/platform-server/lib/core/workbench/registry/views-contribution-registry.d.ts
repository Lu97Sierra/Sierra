import { ExtensionIdentifier } from '@workbench-stack/core';
import { IKeybindings } from '@vscode-alt/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry';
import { IDisposable } from '@vscode-alt/monaco-editor';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
export interface IViewDescriptor {
    readonly id: string;
    readonly name: string;
    readonly ctorDescriptor: {
        ctor: any;
        arguments?: any[];
    };
    readonly when?: any;
    readonly order?: number;
    readonly weight?: number;
    readonly collapsed?: boolean;
    readonly canToggleVisibility?: boolean;
    readonly hideByDefault?: boolean;
    readonly workspace?: boolean;
    readonly focusCommand?: {
        id: string;
        keybindings?: IKeybindings;
    };
}
export interface IViewDescriptorCollection extends IDisposable {
    readonly onDidChangeActiveViews: Event<{
        added: IViewDescriptor[];
        removed: IViewDescriptor[];
    }>;
    readonly activeViewDescriptors: IViewDescriptor[];
    readonly allViewDescriptors: IViewDescriptor[];
}
export declare class ViewContainer {
    readonly id: string;
    readonly hideIfEmpty: boolean;
    readonly extensionId?: ExtensionIdentifier;
    protected constructor(id: string, hideIfEmpty: boolean, extensionId?: ExtensionIdentifier);
}
export interface IViewsRegistry {
    readonly onViewsRegistered: Event<{
        views: IViewDescriptor[];
        viewContainer: ViewContainer;
    }>;
    readonly onViewsDeregistered: Event<{
        views: IViewDescriptor[];
        viewContainer: ViewContainer;
    }>;
    readonly onDidChangeContainer: Event<{
        views: IViewDescriptor[];
        from: ViewContainer;
        to: ViewContainer;
    }>;
    registerViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;
    deregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;
    moveViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;
    getViews(viewContainer: ViewContainer): IViewDescriptor[];
    getView(id: string): IViewDescriptor | null;
    getViewContainer(id: string): ViewContainer | null;
}

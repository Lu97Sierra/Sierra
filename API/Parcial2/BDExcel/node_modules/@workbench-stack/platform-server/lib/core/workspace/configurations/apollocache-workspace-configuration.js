"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_client_1 = require("apollo-client");
const client_core_1 = require("@common-stack/client-core");
const inversify_1 = require("inversify");
const core = require("@workbench-stack/core");
const map_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/map");
let ApolloCacheWorkspace = class ApolloCacheWorkspace {
    constructor(apollo) {
        this.apollo = apollo;
        this._foldersMap = map_1.TernarySearchTree.forPaths();
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const workspaceResult = yield this.apollo.query({
                query: core.GetWorkspace_WSDocument,
            });
            this.workspace = workspaceResult.data.getWorkspace;
            this.toWorkspaceFolders();
            this.updateFoldersMap();
        });
    }
    toWorkspaceFolders() {
        if (this.workspace) {
            const folders = this.workspace.folders;
            this._folders = folders.map(fl => new core.WorkspaceFolder(fl));
        }
        else {
            console.warn('called without any workspace');
        }
    }
    get folders() {
        return this._folders;
    }
    getFolder(resource) {
        if (!resource) {
            return null;
        }
    }
    updateFoldersMap() {
        this._foldersMap = map_1.TernarySearchTree.forPaths();
        for (const folder of this.folders) {
            this._foldersMap.set(folder.uri.toString(), folder);
        }
    }
};
__decorate([
    inversify_1.postConstruct(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ApolloCacheWorkspace.prototype, "initialize", null);
ApolloCacheWorkspace = __decorate([
    __param(0, inversify_1.inject(client_core_1.ClientTypes.ApolloClient)),
    __metadata("design:paramtypes", [apollo_client_1.ApolloClient])
], ApolloCacheWorkspace);
//# sourceMappingURL=apollocache-workspace-configuration.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewContainer = void 0;
const registry_1 = require("../../registry");
const core_1 = require("@workbench-stack/core");
const nls_1 = require("@vscode-alt/monaco-editor/esm/vs/nls");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
class ViewContainer {
    constructor(id, hideIfEmpty, extensionId) {
        this.id = id;
        this.hideIfEmpty = hideIfEmpty;
        this.extensionId = extensionId;
    }
}
exports.ViewContainer = ViewContainer;
class ViewsRegistry {
    constructor() {
        this._onViewsRegistered = new event_1.Emitter();
        this.onViewsRegistered = this._onViewsRegistered.event;
        this._onViewsDeregistered = new event_1.Emitter();
        this.onViewsDeregistered = this._onViewsDeregistered.event;
        this._onDidChangeContainer = new event_1.Emitter();
        this.onDidChangeContainer = this._onDidChangeContainer.event;
        this._viewContainers = [];
        this._views = new Map();
    }
    registerViews(views, viewContainer) {
        this.addViews(views, viewContainer);
        this._onViewsRegistered.fire({ views: views, viewContainer });
    }
    deregisterViews(viewDescriptors, viewContainer) {
        const views = this.removeViews(viewDescriptors, viewContainer);
        if (views.length) {
            this._onViewsDeregistered.fire({ views, viewContainer });
        }
    }
    moveViews(viewsToMove, viewContainer) {
        for (const container of this._views.keys()) {
            if (container !== viewContainer) {
                const views = this.removeViews(viewsToMove, container);
                if (views.length) {
                    this.addViews(views, viewContainer);
                    this._onDidChangeContainer.fire({ views, from: container, to: viewContainer });
                }
            }
        }
    }
    getViews(loc) {
        return this._views.get(loc) || [];
    }
    getView(id) {
        for (const viewContainer of this._viewContainers) {
            const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];
            if (viewDescriptor) {
                return viewDescriptor;
            }
        }
        return null;
    }
    getViewContainer(viewId) {
        for (const viewContainer of this._viewContainers) {
            const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];
            if (viewDescriptor) {
                return viewContainer;
            }
        }
        return null;
    }
    addViews(viewDescriptors, viewContainer) {
        let views = this._views.get(viewContainer);
        if (!views) {
            views = [];
            this._views.set(viewContainer, views);
            this._viewContainers.push(viewContainer);
        }
        for (const viewDescriptor of viewDescriptors) {
            if (views.some(v => v.id === viewDescriptor.id)) {
                throw new Error(nls_1.localize('duplicateId', "A view with id '{0}' is already registered in the container '{1}'", viewDescriptor.id, viewContainer.id));
            }
            views.push(viewDescriptor);
        }
    }
    removeViews(viewDescriptors, viewContainer) {
        const views = this._views.get(viewContainer);
        if (!views) {
            return [];
        }
        const viewsToDeregister = [];
        const remaningViews = [];
        for (const view of views) {
            if (viewDescriptors.indexOf(view) === -1) {
                remaningViews.push(view);
            }
            else {
                viewsToDeregister.push(view);
            }
        }
        if (viewsToDeregister.length) {
            if (remaningViews.length) {
                this._views.set(viewContainer, remaningViews);
            }
            else {
                this._views.delete(viewContainer);
                this._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);
            }
        }
        return viewsToDeregister;
    }
}
registry_1.Registry.Instance.add(core_1.Extensions.ViewsRegistry, new ViewsRegistry());
//# sourceMappingURL=views-contribution-registry.js.map
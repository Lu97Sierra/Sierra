"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasArgs = exports.asArray = exports.buildHelpMessage = exports.formatOptions = exports.parseArgs = exports.parseCLIProcessArgv = exports.parseMainProcessArgv = void 0;
/* tslint:disable */
const os = require("os");
const minimist = require("minimist");
const assert = require("assert");
// import { MIN_MAX_MEMORY_SIZE_MB } from 'vs/platform/files/common/files';
const platform_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/platform");
const product_1 = require("../../product");
const nls = require("@vscode-alt/monaco-editor/esm/vs/nls");
const MIN_MAX_MEMORY_SIZE_MB = 2048;
const options = {
    string: [
        'locale',
        'user-data-dir',
        'extensions-dir',
        'folder-uri',
        'file-uri',
        'extensionDevelopmentPath',
        'extensionTestsPath',
        'install-extension',
        'disable-extension',
        'uninstall-extension',
        'debugId',
        'debugPluginHost',
        'debugBrkPluginHost',
        'debugSearch',
        'debugBrkSearch',
        'enable-proposed-api',
        'export-default-configuration',
        'install-source',
        'upload-logs',
        'driver',
        'trace-category-filter',
        'trace-options',
        '_',
    ],
    boolean: [
        'help',
        'version',
        'wait',
        'diff',
        'add',
        'goto',
        'new-window',
        'unity-launch',
        'reuse-window',
        'open-url',
        'performance',
        'prof-startup',
        'verbose',
        'logExtensionHostCommunication',
        'disable-extensions',
        'list-extensions',
        'show-versions',
        'nolazy',
        'issue',
        'skip-getting-started',
        'skip-release-notes',
        'sticky-quickopen',
        'disable-restore-windows',
        'disable-telemetry',
        'disable-updates',
        'disable-crash-reporter',
        'skip-add-to-recently-opened',
        'status',
        'file-write',
        'file-chmod',
        'driver-verbose',
        'trace',
    ],
    alias: {
        add: 'a',
        help: 'h',
        version: 'v',
        wait: 'w',
        diff: 'd',
        goto: 'g',
        status: 's',
        'new-window': 'n',
        'reuse-window': 'r',
        performance: 'p',
        'disable-extensions': 'disableExtensions',
        'extensions-dir': 'extensionHomePath',
        'debugPluginHost': 'inspect-extensions',
        'debugBrkPluginHost': 'inspect-brk-extensions',
        'debugSearch': 'inspect-search',
        'debugBrkSearch': 'inspect-brk-search',
    },
};
function validate(args) {
    if (args.goto) {
        args._.forEach(arg => assert(/^(\w:)?[^:]+(:\d*){0,2}$/.test(arg), nls.localize('gotoValidation', 'Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.')));
    }
    if (args['max-memory']) {
        assert(args['max-memory'] >= MIN_MAX_MEMORY_SIZE_MB, `The max-memory argument cannot be specified lower than ${MIN_MAX_MEMORY_SIZE_MB} MB.`);
    }
    return args;
}
function stripAppPath(argv) {
    const index = argv.findIndex(a => !/^-/.test(a));
    if (index > -1) {
        return [...argv.slice(0, index), ...argv.slice(index + 1)];
    }
    return undefined;
}
/**
 * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`
 */
function parseMainProcessArgv(processArgv) {
    let [, ...args] = processArgv;
    // If dev, remove the first non-option argument: it's the app location
    if (process.env['VSCODE_DEV']) {
        args = stripAppPath(args) || [];
    }
    return validate(parseArgs(args));
}
exports.parseMainProcessArgv = parseMainProcessArgv;
/**
 * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`
 */
function parseCLIProcessArgv(processArgv) {
    let [, , ...args] = processArgv;
    if (process.env['VSCODE_DEV']) {
        args = stripAppPath(args) || [];
    }
    return validate(parseArgs(args));
}
exports.parseCLIProcessArgv = parseCLIProcessArgv;
/**
 * Use this to parse code arguments such as `--verbose --wait`
 */
function parseArgs(args) {
    return minimist(args, options);
}
exports.parseArgs = parseArgs;
const optionsHelp = {
    '-d, --diff <file> <file>': nls.localize('diff', "Compare two files with each other."),
    '-a, --add <dir>': nls.localize('add', "Add folder(s) to the last active window."),
    '-g, --goto <file:line[:character]>': nls.localize('goto', "Open a file at the path on the specified line and character position."),
    '-n, --new-window': nls.localize('newWindow', "Force to open a new window."),
    '-r, --reuse-window': nls.localize('reuseWindow', "Force to open a file or folder in an already opened window."),
    '-w, --wait': nls.localize('wait', "Wait for the files to be closed before returning."),
    '--locale <locale>': nls.localize('locale', "The locale to use (e.g. en-US or zh-TW)."),
    '--user-data-dir <dir>': nls.localize('userDataDir', "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code."),
    '-v, --version': nls.localize('version', "Print version."),
    '-h, --help': nls.localize('help', "Print usage.")
};
const extensionsHelp = {
    '--extensions-dir <dir>': nls.localize('extensionHomePath', "Set the root path for extensions."),
    '--list-extensions': nls.localize('listExtensions', "List the installed extensions."),
    '--show-versions': nls.localize('showVersions', "Show versions of installed extensions, when using --list-extension."),
    '--uninstall-extension (<extension-id> | <extension-vsix-path>)': nls.localize('uninstallExtension', "Uninstalls an extension."),
    '--install-extension (<extension-id> | <extension-vsix-path>)': nls.localize('installExtension', "Installs or updates the extension. Use `--force` argument to avoid prompts."),
    '--enable-proposed-api (<extension-id>)': nls.localize('experimentalApis', "Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.")
};
const troubleshootingHelp = {
    '--verbose': nls.localize('verbose', "Print verbose output (implies --wait)."),
    '--log <level>': nls.localize('log', "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'."),
    '-s, --status': nls.localize('status', "Print process usage and diagnostics information."),
    '-p, --performance': nls.localize('performance', "Start with the 'Developer: Startup Performance' command enabled."),
    '--prof-startup': nls.localize('prof-startup', "Run CPU profiler during startup"),
    '--disable-extensions': nls.localize('disableExtensions', "Disable all installed extensions."),
    '--disable-extension <extension-id>': nls.localize('disableExtension', "Disable an extension."),
    '--inspect-extensions': nls.localize('inspect-extensions', "Allow debugging and profiling of extensions. Check the developer tools for the connection URI."),
    '--inspect-brk-extensions': nls.localize('inspect-brk-extensions', "Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI."),
    '--disable-gpu': nls.localize('disableGPU', "Disable GPU hardware acceleration."),
    '--upload-logs': nls.localize('uploadLogs', "Uploads logs from current session to a secure endpoint."),
    '--max-memory': nls.localize('maxMemory', "Max memory size for a window (in Mbytes).")
};
function formatOptions(options, columns) {
    let keys = Object.keys(options);
    let argLength = Math.max.apply(null, keys.map(k => k.length)) + 2 /*left padding*/ + 1 /*right padding*/;
    if (columns - argLength < 25) {
        // Use a condensed version on narrow terminals
        return keys.reduce((r, key) => r.concat([`  ${key}`, `      ${options[key]}`]), []).join('\n');
    }
    let descriptionColumns = columns - argLength - 1;
    let result = '';
    keys.forEach(k => {
        let wrappedDescription = wrapText(options[k], descriptionColumns);
        let keyPadding = ' '.repeat(argLength - k.length - 2 /*left padding*/);
        if (result.length > 0) {
            result += '\n';
        }
        result += '  ' + k + keyPadding + wrappedDescription[0];
        for (let i = 1; i < wrappedDescription.length; i++) {
            result += '\n' + ' '.repeat(argLength) + wrappedDescription[i];
        }
    });
    return result;
}
exports.formatOptions = formatOptions;
function wrapText(text, columns) {
    let lines = [];
    while (text.length) {
        let index = text.length < columns ? text.length : text.lastIndexOf(' ', columns);
        let line = text.slice(0, index).trim();
        text = text.slice(index);
        lines.push(line);
    }
    return lines;
}
function buildHelpMessage(fullName, name, version) {
    const columns = process.stdout.isTTY ? process.stdout.columns : 80;
    const executable = `${name}${os.platform() === 'win32' ? '.exe' : ''}`;
    return `${fullName} ${version}
${nls.localize('usage', "Usage")}: ${executable} [${nls.localize('options', "options")}] [${nls.localize('paths', 'paths')}...]
${platform_1.isWindows ? nls.localize('stdinWindows', "To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')", product_1.product.applicationName) : nls.localize('stdinUnix', "To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')", product_1.product.applicationName)}
${nls.localize('optionsUpperCase', "Options")}:
${formatOptions(optionsHelp, columns)}
${nls.localize('extensionsManagement', "Extensions Management")}:
${formatOptions(extensionsHelp, columns)}
${nls.localize('troubleshooting', "Troubleshooting")}:
${formatOptions(troubleshootingHelp, columns)}`;
}
exports.buildHelpMessage = buildHelpMessage;
/**
 * Converts an argument into an array
 * @param arg a argument value. Can be undefined, an entry or an array
 */
function asArray(arg) {
    if (arg) {
        if (Array.isArray(arg)) {
            return arg;
        }
        return [arg];
    }
    return [];
}
exports.asArray = asArray;
/**
 * Returns whether an argument is present.
 */
function hasArgs(arg) {
    if (arg) {
        if (Array.isArray(arg)) {
            return !!arg.length;
        }
        return true;
    }
    return false;
}
exports.hasArgs = hasArgs;
//# sourceMappingURL=argv.js.map
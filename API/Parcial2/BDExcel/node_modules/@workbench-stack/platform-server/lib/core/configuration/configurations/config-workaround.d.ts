import { IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
export interface IConfigurationChangeEvent<T> {
    config: T;
}
export interface IConfigWatcher<T> {
    path: string;
    hasParseErrors: boolean;
    reload(callback: (config: T) => void): void;
    getConfig(): T;
}
export interface IConfigOptions<T> {
    onError: (error: Error | string) => void;
    defaultConfig: T;
    changeBufferDelay?: number;
    parse?: (content: string, errors: any[]) => T;
    initCallback?: (config: T) => void;
}
/**
 * A simple helper to watch a configured file for changes and process its contents as JSON object.
 * Supports:
 * - comments in JSON files and errors
 * - symlinks for the config file itself
 * - delayed processing of changes to accomodate for lots of changes
 * - configurable defaults
 */
export declare class ConfigWatcher<T> implements IConfigWatcher<T>, IDisposable {
    private _path;
    private options;
    private cache;
    private parseErrors;
    private disposed;
    private loaded;
    private timeoutHandle;
    private readonly disposables;
    private readonly _onDidUpdateConfiguration;
    constructor(_path: string, options?: IConfigOptions<T>);
    get path(): string;
    get hasParseErrors(): boolean;
    get onDidUpdateConfiguration(): Event<IConfigurationChangeEvent<T>>;
    private initAsync;
    private updateCache;
    private loadSync;
    private loadAsync;
    private parse;
    private registerWatcher;
    private handleSymbolicLink;
    private watch;
    private onConfigFileChange;
    reload(callback?: (config: T) => void): void;
    getConfig(): T;
    private ensureLoaded;
    dispose(): void;
}

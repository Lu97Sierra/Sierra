import { IExtensionPoint, IExtensionPointHandler, IExtensionPointUser, IRegistry } from '@workbench-stack/core';
export declare class ExtensionPointUserDelta<T> {
    readonly added: IExtensionPointUser<T>[];
    readonly removed: IExtensionPointUser<T>[];
    private static _toSet;
    static compute<T>(previous: IExtensionPointUser<T>[] | null, current: IExtensionPointUser<T>[]): ExtensionPointUserDelta<T>;
    constructor(added: IExtensionPointUser<T>[], removed: IExtensionPointUser<T>[]);
}
export declare class ExtensionPoint<T> implements IExtensionPoint<T> {
    readonly name: string;
    private _handler;
    private _users;
    private _delta;
    constructor(name: string);
    setHandler(handler: IExtensionPointHandler<T>): void;
    acceptUsers(users: IExtensionPointUser<T>[]): void;
    private _handle;
}
export declare const schema: {
    properties: {
        engines: {
            type: string;
            description: string;
            properties: {
                vscode: {
                    type: string;
                    description: string;
                    default: string;
                };
            };
        };
        publisher: {
            type: string;
            description: string;
        };
        displayName: {
            description: string;
            type: string;
        };
        categories: {
            description: string;
            type: string;
            uniqueItems: boolean;
            items: {
                oneOf: ({
                    type: string;
                    enum: string[];
                    const?: undefined;
                    deprecationMessage?: undefined;
                } | {
                    type: string;
                    const: string;
                    deprecationMessage: string;
                    enum?: undefined;
                })[];
            };
        };
        galleryBanner: {
            type: string;
            description: string;
            properties: {
                color: {
                    description: string;
                    type: string;
                };
                theme: {
                    description: string;
                    type: string;
                    enum: string[];
                };
            };
        };
        contributes: {
            description: string;
            type: string;
            properties: {};
            default: {};
        };
        preview: {
            type: string;
            description: string;
        };
        activationEvents: {
            description: string;
            type: string;
            items: {
                type: string;
                defaultSnippets: {
                    label: string;
                    description: string;
                    body: string;
                }[];
            };
        };
        badges: {
            type: string;
            description: string;
            items: {
                type: string;
                required: string[];
                properties: {
                    url: {
                        type: string;
                        description: string;
                    };
                    href: {
                        type: string;
                        description: string;
                    };
                    description: {
                        type: string;
                        description: string;
                    };
                };
            };
        };
        markdown: {
            type: string;
            description: string;
            enum: string[];
            default: string;
        };
        qna: {
            default: string;
            description: string;
            anyOf: ({
                type: string[];
                enum: (string | boolean)[];
            } | {
                type: string;
                enum?: undefined;
            })[];
        };
        extensionDependencies: {
            description: string;
            type: string;
            uniqueItems: boolean;
            items: {
                type: string;
                pattern: string;
            };
        };
        extensionPack: {
            description: string;
            type: string;
            uniqueItems: boolean;
            items: {
                type: string;
                pattern: string;
            };
        };
        scripts: {
            type: string;
            properties: {
                'vscode:prepublish': {
                    description: string;
                    type: string;
                };
                'vscode:uninstall': {
                    description: string;
                    type: string;
                };
            };
        };
        icon: {
            type: string;
            description: string;
        };
    };
};
export declare class Registry implements IRegistry {
    static readonly Instance: Registry;
    private data;
    constructor();
    add(id: string, data: any): void;
    knows(id: string): boolean;
    as<T>(id: string): any;
    private _extensionPoints;
    registerExtensionPoint<T>(desc: any): IExtensionPoint<T>;
    getExtensionPoints(): any;
    getExtensionPointsMap(): any;
}

import { IExtensionPoint, IExtensionPointHandler, IExtensionPointUser, ExtensionKind } from '@workbench-stack/core';
export declare class ExtensionPointUserDelta<T> {
    readonly added: readonly IExtensionPointUser<T>[];
    readonly removed: readonly IExtensionPointUser<T>[];
    private static _toSet;
    static compute<T>(previous: readonly IExtensionPointUser<T>[] | null, current: readonly IExtensionPointUser<T>[]): ExtensionPointUserDelta<T>;
    constructor(added: readonly IExtensionPointUser<T>[], removed: readonly IExtensionPointUser<T>[]);
}
export declare class ExtensionPoint<T> implements IExtensionPoint<T> {
    readonly name: string;
    readonly defaultExtensionKind: ExtensionKind;
    private _handler;
    private _users;
    private _delta;
    constructor(name: string, defaultExtensionKind: ExtensionKind);
    setHandler(handler: IExtensionPointHandler<T>): void;
    acceptUsers(users: IExtensionPointUser<T>[]): void;
    private _handle;
}

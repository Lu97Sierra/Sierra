"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionPoint = exports.ExtensionPointUserDelta = void 0;
const core_1 = require("@workbench-stack/core");
const errors_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/errors");
class ExtensionPointUserDelta {
    constructor(added, removed) {
        this.added = added;
        this.removed = removed;
    }
    static _toSet(arr) {
        const result = new Set();
        for (let i = 0, len = arr.length; i < len; i++) {
            result.add(core_1.ExtensionIdentifier.toKey(arr[i].description.identifier));
        }
        return result;
    }
    static compute(previous, current) {
        if (!previous || !previous.length) {
            return new ExtensionPointUserDelta(current, []);
        }
        if (!current || !current.length) {
            return new ExtensionPointUserDelta([], previous);
        }
        const previousSet = this._toSet(previous);
        const currentSet = this._toSet(current);
        let added = current.filter(user => !previousSet.has(core_1.ExtensionIdentifier.toKey(user.description.identifier)));
        let removed = previous.filter(user => !currentSet.has(core_1.ExtensionIdentifier.toKey(user.description.identifier)));
        return new ExtensionPointUserDelta(added, removed);
    }
}
exports.ExtensionPointUserDelta = ExtensionPointUserDelta;
class ExtensionPoint {
    constructor(name, defaultExtensionKind) {
        this.name = name;
        this.defaultExtensionKind = defaultExtensionKind;
        this._handler = null;
        this._users = null;
        this._delta = null;
    }
    setHandler(handler) {
        if (this._handler !== null) {
            throw new Error('Handler already set!');
        }
        this._handler = handler;
        this._handle();
    }
    acceptUsers(users) {
        this._delta = ExtensionPointUserDelta.compute(this._users, users);
        this._users = users;
        this._handle();
    }
    _handle() {
        if (this._handler === null || this._users === null || this._delta === null) {
            return;
        }
        try {
            this._handler(this._users, this._delta);
        }
        catch (err) {
            errors_1.onUnexpectedError(err);
        }
    }
}
exports.ExtensionPoint = ExtensionPoint;
//# sourceMappingURL=extension-point.js.map
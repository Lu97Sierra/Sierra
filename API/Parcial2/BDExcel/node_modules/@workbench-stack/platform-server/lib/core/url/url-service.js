"use strict";
/* tslint:disable */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayURLService = exports.URLService = void 0;
const inversify_1 = require("inversify");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
let URLService = class URLService {
    constructor() {
        this.handlers = new Set();
    }
    open(uri) {
        const handlers = [...this.handlers.values()];
        return async_1.first(handlers.map(h => () => h.handleURL(uri)), undefined, false).then(val => val || false);
    }
    registerHandler(handler) {
        this.handlers.add(handler);
        return lifecycle_1.toDisposable(() => this.handlers.delete(handler));
    }
};
URLService = __decorate([
    inversify_1.injectable()
], URLService);
exports.URLService = URLService;
let RelayURLService = class RelayURLService extends URLService {
    constructor(urlService) {
        super();
        this.urlService = urlService;
    }
    open(uri) {
        return this.urlService.open(uri);
    }
    handleURL(uri) {
        return super.open(uri);
    }
};
RelayURLService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [Object])
], RelayURLService);
exports.RelayURLService = RelayURLService;
//# sourceMappingURL=url-service.js.map
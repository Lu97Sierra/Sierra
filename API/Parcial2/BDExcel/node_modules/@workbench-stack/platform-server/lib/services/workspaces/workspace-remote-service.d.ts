import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IWorkspaceContextService, IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceInitializationPayload } from '@workbench-stack/core';
import * as core from '@workbench-stack/core';
import { ConfigurationTarget, IConfigurationOverrides, IConfigurationData, IWorkspace, IConfigurationChangeEvent } from '@workbench-stack/core';
import { IWorkspaceFolderCreationData } from '@workbench-stack/core';
import { WorkbenchState, IWorkspaceFolder, IWorkspaceFoldersChangeEvent } from '@workbench-stack/core';
import { ApolloClient } from 'apollo-client';
import { IConfigurationService } from '@workbench-stack/core';
export declare class WorkspaceRemoteService extends Disposable implements IConfigurationService, IWorkspaceContextService {
    private lifecycleService;
    private apollo;
    private utility;
    protected readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent>;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    protected readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent>;
    readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;
    protected readonly _onDidChangeWorkspaceName: Emitter<void>;
    readonly onDidChangeWorkspaceName: Event<void>;
    protected readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState>;
    readonly onDidChangeWorkbenchState: Event<WorkbenchState>;
    private workspace;
    constructor(lifecycleService: core.ILifecycleService, apollo: ApolloClient<any>, utility: any);
    asyncInitializedWorkspaceContainer(): Promise<void>;
    get configuration(): core.IFinalConfigurationFragment;
    initialize(arg: IWorkspaceInitializationPayload): Promise<any>;
    getCompleteWorkspace(): Promise<core.Workspace>;
    getWorkspace(): IWorkspace;
    getWorkbenchState(): WorkbenchState;
    getWorkspaceFolder(resource: URI): IWorkspaceFolder | null;
    addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void>;
    removeFolders(foldersToRemove: URI[]): Promise<void>;
    updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void>;
    isInsideWorkspace(resource: URI): boolean;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
    getConfigurationData(): IConfigurationData;
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    updateValue(key: string, value: any): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;
    reloadConfiguration(folder?: IWorkspaceFolder, key?: string): Promise<void>;
    inspect<T>(key: string, overrides?: IConfigurationOverrides): {
        default: T;
        user: T;
        workspace?: T;
        workspaceFolder?: T;
        memory?: T;
        value: T;
    };
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
}

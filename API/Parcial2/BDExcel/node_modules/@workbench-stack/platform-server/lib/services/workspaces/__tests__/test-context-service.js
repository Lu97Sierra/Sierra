"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestContextService = void 0;
const test_workspace_1 = require("./test-workspace");
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
const resources = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const inversify_1 = require("inversify");
const core_1 = require("@workbench-stack/core");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
let TestContextService = class TestContextService {
    constructor(workspace = test_workspace_1.TestWorkspace, options = null) {
        this.workspace = workspace;
        this.options = options || Object.create(null);
        this._onDidChangeWorkspaceFolders = new event_1.Emitter();
        this._onDidChangeWorkbenchState = new event_1.Emitter();
    }
    initialize(arg) {
        throw new Error("Method not implemented.");
    }
    getCompleteWorkspace() {
        throw new Error("Method not implemented.");
    }
    addFolders(foldersToAdd, index) {
        throw new Error("Method not implemented.");
    }
    removeFolders(foldersToRemove) {
        throw new Error("Method not implemented.");
    }
    updateFolders(foldersToAdd, foldersToRemove, index) {
        throw new Error("Method not implemented.");
    }
    dispose() {
        throw new Error("Method not implemented.");
    }
    get onDidChangeWorkspaceName() {
        return this._onDidChangeWorkspaceName.event;
    }
    get onDidChangeWorkspaceFolders() {
        return this._onDidChangeWorkspaceFolders.event;
    }
    get onDidChangeWorkbenchState() {
        return this._onDidChangeWorkbenchState.event;
    }
    getFolders() {
        return this.workspace ? this.workspace.folders : [];
    }
    getWorkbenchState() {
        if (this.workspace.configuration) {
            return 3 /* WORKSPACE */;
        }
        if (this.workspace.folders.length) {
            return 2 /* FOLDER */;
        }
        return 1 /* EMPTY */;
    }
    getWorkspace() {
        return this.workspace;
    }
    getWorkspaceFolder(resource) {
        return this.workspace.getFolder(resource);
    }
    setWorkspace(workspace) {
        this.workspace = workspace;
    }
    getOptions() {
        return this.options;
    }
    updateOptions() {
    }
    isInsideWorkspace(resource) {
        if (resource && this.workspace) {
            return resources.isEqualOrParent(resource, this.workspace.folders[0].uri);
        }
        return false;
    }
    toResource(workspaceRelativePath) {
        return uri_1.URI.file(workspaceRelativePath);
    }
    isCurrentWorkspace(workspaceIdentifier) {
        return core_1.isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && resources.isEqual(this.workspace.folders[0].uri, workspaceIdentifier);
    }
};
TestContextService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [Object, Object])
], TestContextService);
exports.TestContextService = TestContextService;
//# sourceMappingURL=test-context-service.js.map
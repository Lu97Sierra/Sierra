"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var WorkspaceClientService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceClientService = void 0;
const moleculer_1 = require("moleculer");
const core = require("@workbench-stack/core");
const inversify_1 = require("inversify");
const core_1 = require("@workbench-stack/core");
const ILogger = require("bunyan");
const core_2 = require("@common-stack/core");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
let WorkspaceClientService = WorkspaceClientService_1 = class WorkspaceClientService extends core_1.AbstractWorkspaceContextService {
    constructor(lifecycleService, logger, broker) {
        super(logger);
        this.lifecycleService = lifecycleService;
        this.broker = broker;
        this.topic = "WorkspaceContextService" /* WorkspaceContextService */;
        console.log('WORKSPACE CLIENT SERVICE IS CRATED WITHOUT LOADING');
        this.logger = logger.child({ className: WorkspaceClientService_1 });
        this.startupBarrier = new async_1.Barrier();
    }
    // @postConstruct()
    extInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('WORKSPACE CLIENT SERVICE POST CONSTRUCT CALLED');
            yield this.broker.waitForServices("WorkspaceReady" /* WorkspaceReady */);
            console.log('WORKSPACE CLIENT READY STATE RESOLVED');
            if (!this.startupBarrier.isOpen()) {
                this.startupBarrier.open();
            }
            if (!this.workspace) {
                yield this.asyncInitializeWorkspace();
            }
        });
    }
    initialize(args) {
        throw new Error('Method not implemented.');
    }
    asyncInitializeWorkspace(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const workspace = yield this.callAction("getWorkspace" /* getWorkspace */);
            this.logger.debug('Wokspace data received in post construct: [%j]', workspace);
            this.workspace = this.reviveWorkspaceUris(workspace);
        });
    }
    addFolders(foldersToAdd, index) {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateWorkspaceBarrier = new async_1.Barrier();
            yield this.callAction("addFolders" /* addFolders */, { foldersToAdd, index });
            yield this.updateWorkspaceBarrier.wait();
        });
    }
    removeFolders(foldersToRemove) {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateWorkspaceBarrier = new async_1.Barrier();
            yield this.callAction("removeFolders" /* removeFolders */, { foldersToRemove });
            yield this.updateWorkspaceBarrier.wait();
        });
    }
    updateFolders(foldersToAdd, foldersToRemove, index) {
        return __awaiter(this, void 0, void 0, function* () {
            this.updateWorkspaceBarrier = new async_1.Barrier();
            yield this.callAction("updateFolders" /* updateFolders */, { foldersToAdd, foldersToRemove, index });
            yield this.updateWorkspaceBarrier.wait();
        });
    }
    callAction(command, params, topic, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.startupBarrier.wait().then(() => {
                return this.broker.call(`${topic || this.topic}.${command}`, params, opts);
            });
        });
    }
};
WorkspaceClientService = WorkspaceClientService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(core.ClientTypes.ILifecycleService)),
    __param(1, inversify_1.inject(core_2.CommonType.LOGGER)),
    __param(2, inversify_1.inject(core_2.CommonType.MOLECULER_BROKER)),
    __metadata("design:paramtypes", [Object, ILogger,
        moleculer_1.ServiceBroker])
], WorkspaceClientService);
exports.WorkspaceClientService = WorkspaceClientService;
//# sourceMappingURL=workspace-client-service.js.map
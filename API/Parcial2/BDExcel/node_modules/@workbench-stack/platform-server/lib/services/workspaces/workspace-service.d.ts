import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { IConfigurationCache, Disposable } from '@workbench-stack/core';
import { IWorkspaceContextService, IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from '@workbench-stack/core';
import { Workspace, IConfigurationChangeEvent, IConfigurationService } from '@workbench-stack/core';
import { IRemoteAgentService } from '../../interfaces';
import { ConfigurationTarget, IConfigurationOverrides, IConfigurationData } from '@workbench-stack/core';
import { IConfigurationFileService } from '../../interfaces';
import { IWorkspaceFolderCreationData } from '@workbench-stack/core';
import { WorkbenchState, IWorkspaceFolder, IWorkspaceFoldersChangeEvent } from '@workbench-stack/core';
import { interfaces } from 'inversify';
import { ISingleFolderWorkspaceInitializationPayload, IWorkspaceInitializationPayload } from '@workbench-stack/core';
import * as ILogger from 'bunyan';
export declare function isSingleFolderWorkspaceInitializationPayload(obj: any): obj is ISingleFolderWorkspaceInitializationPayload;
export declare class WorkspaceService extends Disposable implements IConfigurationService, IWorkspaceContextService {
    protected readonly configurationFileService: IConfigurationFileService;
    private workspace;
    private completeWorkspaceBarrier;
    private readonly configurationCache;
    private _configuration;
    private defaultConfiguration;
    private localUserConfiguration;
    private remoteUserConfiguration;
    private workspaceConfiguration;
    private cachedFolderConfigs;
    private workspaceEditingQueue;
    protected readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent>;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    protected readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent>;
    readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;
    protected readonly _onDidChangeWorkspaceName: Emitter<void>;
    readonly onDidChangeWorkspaceName: Event<void>;
    protected readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState>;
    readonly onDidChangeWorkbenchState: Event<WorkbenchState>;
    private configurationEditingService;
    private jsonEditingService;
    private cyclicDependencyReady;
    private cyclicDependency;
    private logger;
    constructor({ userSettingsResource, remoteAuthority, configurationCache }: {
        userSettingsResource?: URI;
        remoteAuthority?: string;
        configurationCache: IConfigurationCache;
    }, configurationFileService: IConfigurationFileService, remoteAgentService: IRemoteAgentService, logger: ILogger);
    getCompleteWorkspace(): Promise<Workspace>;
    getWorkspace(): Workspace;
    getWorkbenchState(): WorkbenchState;
    getWorkspaceFolder(resource: URI): IWorkspaceFolder | null;
    addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void>;
    removeFolders(foldersToRemove: URI[]): Promise<void>;
    updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void>;
    isInsideWorkspace(resource: URI): boolean;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
    private doUpdateFolders;
    private setFolders;
    private contains;
    getConfigurationData(): IConfigurationData;
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    updateValue(key: string, value: any): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;
    reloadConfiguration(folder?: IWorkspaceFolder, key?: string): Promise<void>;
    inspect<T>(key: string, overrides?: IConfigurationOverrides): {
        default: T;
        user: T;
        userLocal?: T;
        userRemote?: T;
        workspace?: T;
        workspaceFolder?: T;
        memory?: T;
        value: T;
    };
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    initialize(arg: IWorkspaceInitializationPayload): Promise<any>;
    acquireInstantiationService(container: interfaces.Container): void;
    private createWorkspace;
    private createMultiFolderWorkspace;
    private createSingleFolderWorkspace;
    private createEmptyWorkspace;
    private releaseWorkspaceBarrier;
    private updateWorkspaceAndInitializeConfiguration;
    private compareFolders;
    private initializeConfiguration;
    private initializeUserConfiguration;
    private reloadUserConfiguration;
    private reloadLocalUserConfiguration;
    private reloadRemoteUserConfiguration;
    private reloadWorkspaceConfiguration;
    private reloadWorkspaceFolderConfiguration;
    private loadConfiguration;
    private getWorkspaceConfigurationModel;
    private onDefaultConfigurationChanged;
    private registerConfigurationSchemas;
    private onLocalUserConfigurationChanged;
    private onRemoteUserConfigurationChanged;
    private onWorkspaceConfigurationChanged;
    private onWorkspaceFolderConfigurationChanged;
    private onFoldersChanged;
    private loadFolderConfigurations;
    private writeConfigurationValue;
    private deriveConfigurationTarget;
    private triggerConfigurationChange;
    private getTargetConfiguration;
    private toEditableConfigurationTarget;
}

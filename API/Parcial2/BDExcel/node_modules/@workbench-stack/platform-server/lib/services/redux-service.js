"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ReduxService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReduxService = void 0;
const _ = require("lodash");
const Logger = require("bunyan");
const inversify_1 = require("inversify");
const redux_1 = require("redux");
const redux_2 = require("../utils/redux");
const createReducer = reducers => redux_1.combineReducers(Object.assign(Object.assign({}, reducers), { root: (state) => state
        ? state
        : '__root' }));
function injectAsyncReducer(store, name, asyncReducer) {
    store.asyncReducers[name] = asyncReducer;
    store.replaceReducer(createReducer(store.asyncReducers));
}
const initializeStore = (dynamicMiddlewares) => {
    const store = redux_1.createStore(createReducer({}), redux_1.applyMiddleware(dynamicMiddlewares));
    store.asyncReducers = {};
    store.injectReducer = (key, reducer) => {
        store.asyncReducers[key] = reducer;
        store.replaceReducer(createReducer(store.asyncReducers));
        return store;
    };
    return store;
};
let ReduxService = ReduxService_1 = class ReduxService {
    constructor(logger) {
        this._dynamic = redux_2.createDynamicMiddlewares();
        this._store = initializeStore(this._dynamic.enhancer);
        this._logger = logger.child({ className: ReduxService_1 });
        this.dispatch = this._store.dispatch;
        this.getState = this._store.getState;
        this.subscribe = this._store.subscribe;
        this.replaceReducer = this._store.replaceReducer;
    }
    [Symbol.observable]() {
        throw new Error('Method not implemented.');
    }
    addReducer(key, value) {
        if (_.isObject(key)) {
            _.each(key, (reducer, index) => injectAsyncReducer(this._store, index, reducer));
        }
        else {
            injectAsyncReducer(this._store, key, value);
        }
    }
    addMiddleware(middleware) {
        this._dynamic.addMiddleware(middleware);
    }
};
ReduxService = ReduxService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject('Logger')),
    __metadata("design:paramtypes", [Logger])
], ReduxService);
exports.ReduxService = ReduxService;
//# sourceMappingURL=redux-service.js.map
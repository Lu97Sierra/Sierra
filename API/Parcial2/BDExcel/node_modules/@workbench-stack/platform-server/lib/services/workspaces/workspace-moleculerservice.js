"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceMoleculerService = void 0;
const moleculer_1 = require("moleculer");
const core_1 = require("@workbench-stack/core");
class WorkspaceMoleculerService extends moleculer_1.Service {
    constructor(broker, { container, settings }) {
        super(broker);
        const topic = "WorkspaceContextService" /* WorkspaceContextService */;
        this.parseServiceSchema({
            name: topic,
            created: () => {
                this._workspace = container.get(core_1.TYPES.IWorkspaceContextService);
            },
            actions: {
                ["getWorkspace" /* getWorkspace */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        return yield this._workspace.getWorkspace();
                    }),
                    cache: true,
                },
                ["addFolders" /* addFolders */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        return yield this._workspace.addFolders(ctx.params.foldersToAdd, ctx.params.index);
                    }),
                },
                ["removeFolders" /* removeFolders */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        return yield this._workspace.removeFolders(ctx.params.foldersToRemove);
                    }),
                },
                ["updateFolders" /* updateFolders */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        return yield this._workspace.updateFolders(ctx.params.foldersToAdd, ctx.params.foldersToRemove, ctx.params.index);
                    }),
                },
            },
            stopped: () => __awaiter(this, void 0, void 0, function* () {
                return this._workspace.dispose();
            }),
        });
    }
}
exports.WorkspaceMoleculerService = WorkspaceMoleculerService;
//# sourceMappingURL=workspace-moleculerservice.js.map
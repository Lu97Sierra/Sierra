"use strict";
/* tslint:disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationFileService = void 0;
const pfs = require("@vscode-alt/monaco-editor/esm/vs/base/node/pfs");
const file_service_based_configuration_file_service_1 = require("./file-service-based-configuration-file-service");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const network_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/network");
class ConfigurationFileService extends lifecycle_1.Disposable {
    constructor() {
        super(...arguments);
        this._fileServiceBasedConfigurationFileService = null;
        this._whenFileServiceBasedConfigurationFileServiceAvailable = new Promise((c) => this._fileServiceBasedConfigurationFileServiceCallback = c);
        this._watchResources = [];
        this.whenWatchingStarted = this._whenFileServiceBasedConfigurationFileServiceAvailable.then(() => undefined);
        this._onFileChanges = this._register(new event_1.Emitter());
        this.onFileChanges = this._onFileChanges.event;
    }
    get isWatching() {
        return this._fileServiceBasedConfigurationFileService ? this._fileServiceBasedConfigurationFileService.isWatching : false;
    }
    watch(resource) {
        if (this._fileServiceBasedConfigurationFileService) {
            console.log('--WATCH FILE>>.. ', resource);
            // throw new Error('what is calling')
            return this._fileServiceBasedConfigurationFileService.watch(resource);
        }
        const disposable = { disposable: null };
        this._watchResources.push({ resource, disposable });
        return lifecycle_1.toDisposable(() => {
            if (disposable.disposable) {
                disposable.disposable.dispose();
            }
        });
    }
    whenProviderRegistered(scheme) {
        if (scheme === network_1.Schemas.file) {
            return Promise.resolve();
        }
        return this._whenFileServiceBasedConfigurationFileServiceAvailable
            .then(fileServiceBasedConfigurationFileService => fileServiceBasedConfigurationFileService.whenProviderRegistered(scheme));
    }
    exists(resource) {
        return this._fileServiceBasedConfigurationFileService ? this._fileServiceBasedConfigurationFileService.exists(resource) : pfs.exists(resource.fsPath);
    }
    readFile(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._fileServiceBasedConfigurationFileService) {
                return this._fileServiceBasedConfigurationFileService.readFile(resource);
            }
            else {
                const contents = yield pfs.readFile(resource.fsPath);
                return contents.toString();
            }
        });
    }
    get fileService() {
        return this._fileService;
    }
    set fileService(fileService) {
        if (fileService && !this._fileServiceBasedConfigurationFileService) {
            this._fileServiceBasedConfigurationFileService = new file_service_based_configuration_file_service_1.ConfigurationFileService(fileService);
            this._fileService = fileService;
            this._register(this._fileServiceBasedConfigurationFileService.onFileChanges(e => {
                return this._onFileChanges.fire(e);
            }));
            for (const { resource, disposable } of this._watchResources) {
                disposable.disposable = this._fileServiceBasedConfigurationFileService.watch(resource);
            }
            this._fileServiceBasedConfigurationFileServiceCallback(this._fileServiceBasedConfigurationFileService);
        }
    }
}
exports.ConfigurationFileService = ConfigurationFileService;
//# sourceMappingURL=configuration-file-service.js.map
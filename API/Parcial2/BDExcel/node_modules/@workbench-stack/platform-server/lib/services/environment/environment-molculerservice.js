"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentMoleculerService = void 0;
const moleculer_1 = require("moleculer");
const core_1 = require("@workbench-stack/core");
class EnvironmentMoleculerService extends moleculer_1.Service {
    constructor(broker, { container, settings }) {
        super(broker);
        const topic = "WorkspaceContextService" /* WorkspaceContextService */;
        this.parseServiceSchema({
            name: topic,
            created: () => {
                this._environmentService = container.get(core_1.TYPES.IEnvironmentService);
            },
            actions: {
                ["environment" /* environment */]: {
                    handler: (ctx) => __awaiter(this, void 0, void 0, function* () {
                        return {
                            execPath: this._environmentService.execPath,
                            cliPath: this._environmentService.cliPath,
                            appRoot: this._environmentService.appRoot,
                            userHome: this._environmentService.userHome,
                            userDataPath: this._environmentService.userDataPath,
                            appNameLong: this._environmentService.appNameLong,
                            appQuality: this._environmentService.appQuality,
                            appSettingsHome: this._environmentService.appSettingsHome,
                            appSettingsPath: this._environmentService.appSettingsPath,
                            appKeybindingsPath: this._environmentService.appKeybindingsPath,
                            settingsSearchBuildId: this._environmentService.settingsSearchBuildId,
                            settingsSearchUrl: this._environmentService.settingsSearchUrl,
                            globalStorageHome: this._environmentService.globalStorageHome,
                            workspaceStorageHome: this._environmentService.workspaceStorageHome,
                            backupHome: this._environmentService.backupHome,
                            backupWorkspacesPath: this._environmentService.backupWorkspacesPath,
                            untitledWorkspacesHome: this._environmentService.untitledWorkspacesHome,
                            workspacesHome: this._environmentService.workspacesHome,
                            /** Specific to cdecode, workspaces project */
                            workspacesProjectPath: this._environmentService.workspacesProjectPath,
                            /** Specific to cdecode, workspace settings */
                            workspaceSettingsPath: this._environmentService.workspaceSettingsPath,
                            isExtensionDevelopment: this._environmentService.isExtensionDevelopment,
                            disableExtensions: this._environmentService.disableExtensions,
                            builtinExtensionsPath: this._environmentService.builtinExtensionsPath,
                            extensionsPath: this._environmentService.extensionsPath,
                            /**  This seems to be single URI as array was failing  */
                            extensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,
                            extensionTestsPath: this._environmentService.extensionTestsPath,
                            debugExtensionHost: this._environmentService.debugExtensionHost,
                            debugSearch: this._environmentService.debugSearch,
                            logExtensionHostCommunication: this._environmentService.logExtensionHostCommunication,
                            isBuilt: this._environmentService.isBuilt,
                            wait: this._environmentService.wait,
                            status: this._environmentService.status,
                            performance: this._environmentService.performance,
                            log: this._environmentService.log,
                            logsPath: this._environmentService.logsPath,
                            verbose: this._environmentService.verbose,
                            logLevel: this._environmentService.logLevel,
                            skipGettingStarted: this._environmentService.skipGettingStarted,
                            skipReleaseNotes: this._environmentService.skipReleaseNotes,
                            skipAddToRecentlyOpened: this._environmentService.skipAddToRecentlyOpened,
                            nodeCachedDataDir: this._environmentService.nodeCachedDataDir,
                            installSourcePath: this._environmentService.installSourcePath,
                            disableUpdates: this._environmentService.disableUpdates,
                            disableCrashReporter: this._environmentService.disableCrashReporter,
                            driverHandle: this._environmentService.driverHandle,
                            driverVerbose: this._environmentService.driverVerbose,
                        };
                    }),
                    cache: true,
                },
            },
        });
    }
}
exports.EnvironmentMoleculerService = EnvironmentMoleculerService;
//# sourceMappingURL=environment-molculerservice.js.map

export const CommonTypes = {
        ILogService: Symbol.for('ILogService'),
        ILifecycleService: Symbol.for('ILifecycleService'),
        // Remote Lifecycle
        IRemoteLifecycleService: Symbol.for('IRemoteLifecycleService'),
        IEnvironmentService: Symbol.for('IEnvironmentService'),
        IWorkspaceContextService: Symbol.for('IWorkspaceContextService'),
        IConfigurationService: Symbol.for('IConfigurationService'),
};

export const TYPES = {
        // common
        ILogService: CommonTypes.ILogService,
        ILifecycleService: CommonTypes.ILifecycleService,
        IEnvironmentService: CommonTypes.IEnvironmentService,
        IConfigurationService: CommonTypes.IConfigurationService,

        IMaketplaceConnector: Symbol.for('IMaketplaceConnector'),
        IDownloadService: Symbol.for('IDownloadService'),
        IFileDownloadService: Symbol.for('IFileDownloadService'),
        IExtensionDownloader: Symbol.for('IExtensionDownloader'),

        ISCMService: Symbol.for('ISCMService'),

        IRegistry: Symbol.for('IRegistry'),
        IBackupService: Symbol.for('IBackupService'),
        INotificationService: Symbol.for('INotificationService'),
        IStorageService: Symbol.for('IStorageService'),



        IPreferenceEditorService: Symbol.for('IPreferenceEditorService'),
        IJSONEditingService: Symbol.for('IJSONEditingService'),
        //workspace
        IWorkspacesService: Symbol.for('IWorkspacesService'),
        IWorkspace: Symbol.for('IWorkspace'),
        IWorkspaceEditingService: Symbol.for('IWorkspaceEditingService'),
        IWorkspaceMigrationService: Symbol.for('IWorkspaceMigrationService'),
        IConfigurationEditingService: Symbol.for('IConfigurationEditingService'),
        IWorkspaceContextService: CommonTypes.IWorkspaceContextService,

        // workbench module
        IWorkbenchMicroservice: Symbol.for('IWorkbenchMicroservice'),
        IWorkbenchEnvironmentService: Symbol.for('IWorkbenchEnvironmentService'),

        // Extension
        IExtensionEnablementService: Symbol.for('IExtensionEnablementService'),
        IExtensionManagementService: Symbol.for('IExtensionManagementService'),
        IExtensionManagementServerService: Symbol.for('IExtensionManagementServerService'),
        IExtensionsWorkbenchService: Symbol.for('IExtensionsWorkbenchService'),
        IExtensionGalleryService: Symbol.for('IExtensionGalleryService'),
        IExtensionGalleryRepository: Symbol.for('IExtensionGalleryRepository'),
        CachedExtensionScanner: Symbol.for('CachedExtensionScanner'),
        IExtensionService: Symbol.for('IExtensionService'),
        ExtensionHostProcessWorker: Symbol.for('ExtensionHostProcessWorker'),
        ExtensionHostProcessWorkerFactory: Symbol.for('Factory<ExtensionHostProcessWorker>'),
        ExtensionHostProfiler: Symbol.for('ExtensionHostProfiler'),
        ExtensionHostProfilerFactory: Symbol.for('Factory<ExtensionHostProfiler>'),
        ExtensionHostProcessManager: Symbol.for('ExtensionHostProcessManager'),
        ExtensionHostProcessManagerFactory: Symbol.for('Factory<ExtensionHostProcessManager>'),
        ExtensionContainer: Symbol.for('ExtensionContainer'),

        IExtensionHostWebsocketManager: Symbol.for('IExtensionHostWebsocketManager'), // remove
        IMultiMessagePassingProtocol: Symbol.for('MultiMessagePassingProtocol'),

        // Extension Host
        IExtHostContext: Symbol.for('IExtHostContext'),


        // URL
        IURLService: Symbol.for('IURLService'),
        IExtensionUrlHandler: Symbol.for('IExtensionUrlHandler'),

        // Registry
        IExtensionMongoConnection: Symbol.for('ExtensionMongoConnection'),
        IRegistryExtensionService: Symbol.for('IRegistryExtensionService'),
        IRegistryExtensionRepository: Symbol.for('IRegistryExtensionRepository'),


        // Moleculer Service
        IConfigurationMicroService: Symbol.for('IConfigurationMicroService'),

        // Local Lifecycle
        IRemoteLifecycleService: CommonTypes.IRemoteLifecycleService,

        /**
         * @deprecated
         */
        ICommonMicroservice: Symbol.for('ICommonMicroservice'),
};



export const ClientTypes = {
        IEditorService: Symbol.for('IEditorService'),
        ICodeEditorService: Symbol.for(''),
        IEditorGroupsService: Symbol.for('IEditorGroupsService'),
        IModelService: Symbol.for('IModelService'),
        IModeService: Symbol.for('IModeService'),
        IContextKeyService: Symbol.for('IContextKeyService'),
        IResourceContextKey: Symbol.for('IResourceContextKey'),

        ITextResourceConfigurationService: Symbol.for('ITextResourceConfigurationService'),
        ITextModelService: Symbol.for('ITextModelService'),
        // common types
        IEnvironmentService: CommonTypes.IEnvironmentService,
        IConfigurationService: CommonTypes.IConfigurationService,
        IWorkspaceContextService: CommonTypes.IWorkspaceContextService,
        ILifecycleService: CommonTypes.ILifecycleService,
        IRemoteLifecycleService: CommonTypes.IRemoteLifecycleService,

        IPreferenceEditorService: Symbol.for('IPreferenceEditorService'),
        IJSONEditingService: Symbol.for('IJSONEditingService'),
        INotificationService: Symbol.for('INotificationService'),
        IDialogService: Symbol.for('IDialogService'),
        IStatusbarService: Symbol.for('IStatusbarService'),
        IKeybindingService: Symbol.for('IKeybindingService'),
        IKeybindingEditingService: Symbol.for('IKeybindingEditingService'),
        IKeymapService: Symbol.for('IKeymapService'),
        IStorageService: Symbol.for('IStorageService'),
        ICommandService: Symbol.for('ICommandService'),
        IContextMenuService: Symbol.for('IContextMenuService'),
        IQuickInputService: Symbol.for('IQuickInputService'),
};




export const enum CacheTypenames {
        Context = 'Context',
        Environment = 'Environment',

        EditorPart = 'EditorPart',
        EditorGroup = 'EditorGroup',

        // Editors
        ResourceEditorInput = 'ResourceEditorInput',
        DiffEditorInput = 'DiffEditorInput',
        SideBySideEditorInput = 'SideBySideEditorInput',
        UntitledEditorInput = 'UntitledEditorInput',
        // FileEditorInput = 'FileEditorInput',
        DataUriEditorInput = 'DataUriEditorInput',
        PreferencesEditorInput = 'PreferencesEditorInput',
        KeybindingEditorInput = 'KeybindingEditorInput',
        // deprecated
        PreferenceEditorInput = 'PreferencesEditorInput',
        Configuration = 'Configuration',
        GitEditorInput = 'GitEditorInput',


        // workspace and configuration
        ConfigurationData = 'ConfigurationData',
        WorkspaceFolderData = 'WorkspaceFolderData',
        WorkspaceData = 'WorkspaceData',
        ResourceMapConfigurationModel = 'ResourceMapConfigurationModel',
        FolderConfigurationModel = 'FolderConfigurationModel',
        FolderWorkspace = 'FolderWorkspace',

        //Notifications
        Notification = 'Notification',
        Notifications = 'Notifications',
        Actions = 'Actions',
        Action = 'Action',
        ActionRun = 'ActionRun',

        //Dialog
        Dialog = 'Dialog',
        Detail = 'Detail',

        //statusbar
        Statusbar = 'Statusbar',
        StatubarEntry = 'StatubarEntry',
        StatusbarItem = 'StatusbarItem',
        Terminal = 'Terminal',
        SelectionStatus = 'SelectionStatus',
        Indentation = 'Indentation',
        EncodingStatus = 'EncodingStatus',
        EndOfLineSequence = 'EndOfLineSequence',
        LanguageMode = 'LanguageMode',
        SyncStatus = 'SyncStatus',
        BranchStatus = 'BranchStatus',

        //Keybindings
        Keybindings = 'Keybindings',
        KeybindingItem = 'KeybindingItem',
        KeyboardEvent = 'KeyboardEvent',

        //ContextMenu
        ContextMenu = 'ContextMenu',
        Anchor = 'Anchor',
        MenuItem = 'MenuItem',

        //QuickInputModel
        QuickInputModel = 'QuickInputModel',
        QuickInput = 'QuickInput',
        QuickPick = 'QuickPick',
        QuickPickItem = 'QuickPickItem',

        //settings
        SettingsGroup = 'SettingsGroup',
        SettingsSection = 'SettingsSection',
        Setting = 'Setting',

        //GoToLineQuickAccess
        GoToLineQuickAccess = 'GoToLineQuickAccess',
        LineRange = 'LineRange',
}

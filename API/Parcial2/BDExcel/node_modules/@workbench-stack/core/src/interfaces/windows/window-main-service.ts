
// @sri seems unnesessary

// export interface IWindowsMainService {
//     _serviceBrand: any;

//     // events
//     readonly onWindowReady: Event<ICodeWindow>;
//     readonly onWindowsCountChanged: Event<IWindowsCountChangedEvent>;
//     readonly onWindowClose: Event<number>;

//     // methods
//     ready(initialUserEnv: IProcessEnvironment): void;
//     reload(win: ICodeWindow, cli?: ParsedArgs): void;
//     enterWorkspace(win: ICodeWindow, path: URI): Promise<IEnterWorkspaceResult | undefined>;
//     closeWorkspace(win: ICodeWindow): void;
//     open(openConfig: IOpenConfiguration): ICodeWindow[];
//     openExtensionDevelopmentHostWindow(extensionDevelopmentPath: string | string[], openConfig: IOpenConfiguration): void;
//     pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
//     pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
//     pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;
//     pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;
//     showMessageBox(options: Electron.MessageBoxOptions, win?: ICodeWindow): Promise<IMessageBoxResult>;
//     showSaveDialog(options: Electron.SaveDialogOptions, win?: ICodeWindow): Promise<string>;
//     showOpenDialog(options: Electron.OpenDialogOptions, win?: ICodeWindow): Promise<string[]>;
//     focusLastActive(cli: ParsedArgs, context: OpenContext): ICodeWindow;
//     getLastActiveWindow(): ICodeWindow | undefined;
//     waitForWindowCloseOrLoad(windowId: number): Promise<void>;
//     openNewWindow(context: OpenContext, options?: INewWindowOptions): ICodeWindow[];
//     openNewTabbedWindow(context: OpenContext): ICodeWindow[];
//     sendToFocused(channel: string, ...args: any[]): void;
//     sendToAll(channel: string, payload: any, windowIdsToIgnore?: number[]): void;
//     getFocusedWindow(): ICodeWindow | undefined;
//     getWindowById(windowId: number): ICodeWindow | undefined;
//     getWindows(): ICodeWindow[];
//     getWindowCount(): number;
//     quit(): void;
// }


// temporary
/** same as ModelState as in vscode */
export const enum FileModelState {
    /**  A model is saved.  */
    SAVED = 'SAVED',
    /**  A model is dirty.  */
    DIRTY = 'DIRTY',
    /**  A model is transitioning from dirty to saved.  */
    PENDING_SAVE = 'PENDING_SAVE',
    /**
     * A model is in conflict mode when changes cannot be saved because the
     * underlying file has changed. Models in conflict mode are always dirty.
     */
    CONFLICT = 'CONFLICT',
    /**  A model is in orphan state when the underlying file has been deleted.  */
    ORPHAN = 'ORPHAN',
    /**
     * Any error that happens during a save that is not causing the CONFLICT state.
     * Models in error mode are always dirty.
     */
    ERROR = 'ERROR',
    /**  Loading  */
    PENDING_LOAD = 'PENDING_LOAD',
    /**  Unkown  */
    UNKNOWN = 'UNKNOWN',
}


// editorGroup.ts


export const enum EditorOpenPositioning {
    LEFT = 'left',
    RIGHT = 'right',
    FIRST = 'first',
    LAST = 'last',
}

// editorGroups.ts
export const enum GroupDirection {
    UP,
    DOWN,
    LEFT,
    RIGHT,
}


export const enum GroupOrientation {
    HORIZONTAL = 'horizontal',
    VERTICAL = 'vertical',
}

export const enum GroupLocation {
    FIRST,
    LAST,
    NEXT,
    PREVIOUS,
}

export const enum MergeGroupMode {
    COPY_EDITORS,
    MOVE_EDITORS,
}


export const enum CloseDirection {
    LEFT,
    RIGHT,
}



export const enum GroupsOrder {

    /**
     * Groups sorted by creation order (oldest one first)
     */
    CREATION_TIME,

    /**
     * Groups sorted by most recent activity (most recent active first)
     */
    MOST_RECENTLY_ACTIVE,

    /**
     * Groups sorted by grid widget order
     */
    GRID_APPEARANCE,
}


export const enum EditorsOrder {

    /**
     * Editors sorted by most recent activity (most recent active first)
     */
    MOST_RECENTLY_ACTIVE,

    /**
     * Editors sorted by sequential order
     */
    SEQUENTIAL,
}


export const enum GroupsArrangement {

    /**
     * Make the current active group consume the maximum
     * amount of space possible.
     */
    MINIMIZE_OTHERS,

    /**
     * Size all groups evenly.
     */
    EVEN,
}



// editorCommont.ts


export const enum LableFormatType {
    default,
    short,
    medium,
    long,
}

export const enum OpenSideBySideDirection {
    right,
    down,
}

export const enum OpenPositioningType {
    left,
    right,
    first,
    last,
}

export const enum TabSizingType {
    fit,
    shrink,
}

export const enum TabCloseButtonType {
    left,
    right,
    off,
}

export enum SideBySideEditor {
    /**
     * Usually Right Side of the side-by-side editor
     */
    MASTER = 1,
    /**
     * usually Left Side of the side-by-side editor
     */
    DETAILS = 2,
}


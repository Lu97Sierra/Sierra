/* tslint:disable */
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import {
    IWillActivateEvent, IExtensionDescription,
    IExtensionsStatus, IResponsiveStateChangeEvent,
} from './extensions';
import { IExtensionPoint } from './extension-registry';
import { ExtensionPointContribution, ExtensionIdentifier  } from '../../core/extension';

export interface IExtensionPointContribution<T> {
    readonly description: IExtensionDescription;
    readonly value: T;
}
export interface IExtensionService {

	/**
	 * An event emitted when extensions are registered after their extension points got handled.
	 *
	 * This event will also fire on startup to signal the installed extensions.
	 *
	 * @returns the extensions that got registered
	 */
    onDidRegisterExtensions: Event<void>;

	/**
	 * @event
	 * Fired when extensions status changes.
	 * The event contains the ids of the extensions that have changed.
	 */
    onDidChangeExtensionsStatus: Event<ExtensionIdentifier[]>;

	/**
	 * An event that is fired when activation happens.
	 */
    onWillActivateByEvent: Event<IWillActivateEvent>;

	/**
	 * An event that is fired when an extension host changes its
	 * responsive-state.
	 */
    onDidChangeResponsiveChange: Event<IResponsiveStateChangeEvent>;

	/**
	 * Send an activation event and activate interested extensions.
	 */
    activateByEvent(activationEvent: string): Promise<void>;

	/**
	 * An promise that resolves when the installed extensions are registered after
	 * their extension points got handled.
	 */
    whenInstalledExtensionsRegistered(): Promise<boolean>;

	/**
	 * Return all registered extensions
	 */
    getExtensions(): Promise<IExtensionDescription[]>;

	/**
	 * Return a specific extension
	 * @param id An extension id
	 */
    getExtension(id: string): Promise<IExtensionDescription | undefined>;

	/**
	 * Read all contributions to an extension point.
	 */
    readExtensionPointContributions<T>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]>;

	/**
	 * Get information about extensions status.
	 */
    getExtensionsStatus(): { [id: string]: IExtensionsStatus } | Promise<{ [id: string]: IExtensionsStatus }>;

	/**
	 * Return the inspect port or 0.
	 */
    getInspectPort(): number | Promise<number>;

	/**
	 * Restarts the extension host.
	 */
    restartExtensionHost(): void | Promise<void>;

	/**
	 * Starts the extension host.
	 */
    startExtensionHost(): void | Promise<void>;

	/**
	 * Stops the extension host.
	 */
    stopExtensionHost(): void | Promise<void>;
}

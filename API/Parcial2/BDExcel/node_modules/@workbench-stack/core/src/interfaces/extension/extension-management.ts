/* tslint:disable */
import * as nls from '@vscode-alt/monaco-editor/esm/vs/nls';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { IWorkspace, IWorkspaceFolder } from '../workspace';
import { IExtensionManifest, IBaseExtension, IExtensionIdentifier } from '../generated-model';


// auto generated
// export interface IGalleryExtensionProperties

// auto generated
// export interface IGalleryExtensionAsset 

// auto generated
// export interface IGalleryExtensionAssets 

export function isIExtensionIdentifier(thing: any): thing is IExtensionIdentifier {
    return thing
        && typeof thing === 'object'
        && typeof thing.id === 'string'
        && (!thing.uuid || typeof thing.uuid === 'string');
}

// auto generated from graphql schema
// export interface IGalleryExtension 

export interface IGalleryMetadata {
    id: string;
    publisherId: string;
    publisherDisplayName: string;
}

export interface ILocalExtension extends IBaseExtension {
	readonly manifest: IExtensionManifest;
	metadata: IGalleryMetadata;
	readmeUrl: URI | null;
	changelogUrl: URI | null;
}

export const enum SortBy {
    NoneOrRelevance = 0,
    LastUpdatedDate = 1,
    Title = 2,
    PublisherName = 3,
    InstallCount = 4,
    PublishedDate = 5,
    AverageRating = 6,
    WeightedRating = 12
}

export const enum SortOrder {
    Default = 0,
    Ascending = 1,
    Descending = 2
}

export interface IQueryOptions {
    text?: string;
    ids?: string[];
    names?: string[];
    pageSize?: number;
    sortBy?: SortBy;
    sortOrder?: SortOrder;
    source?: string;
}

export const enum StatisticType {
    Uninstall = 'uninstall'
}

export interface IReportedExtension {
    id: IExtensionIdentifier;
    malicious: boolean;
}

export const enum InstallOperation {
    None = 0,
    Install,
    Update
}

export interface ITranslation {
    contents: { [key: string]: {} };
}


export const INSTALL_ERROR_MALICIOUS = 'malicious';
export const INSTALL_ERROR_INCOMPATIBLE = 'incompatible';

export const enum EnablementState {
    Disabled,
    WorkspaceDisabled,
    Enabled,
    WorkspaceEnabled
}

export interface IExtensionsConfigContent {
    recommendations: string[];
    unwantedRecommendations: string[];
}

export type RecommendationChangeNotification = {
    extensionId: string,
    isRecommended: boolean
};

export type DynamicRecommendation = 'dynamic';
export type ExecutableRecommendation = 'executable';
export type CachedRecommendation = 'cached';
export type ApplicationRecommendation = 'application';
export type ExtensionRecommendationSource = IWorkspace | IWorkspaceFolder | URI | DynamicRecommendation | ExecutableRecommendation | CachedRecommendation | ApplicationRecommendation;

export interface IExtensionRecommendation {
    extensionId: string;
    sources: ExtensionRecommendationSource[];
}

export const enum ExtensionRecommendationReason {
    Workspace,
    File,
    Executable,
    DynamicWorkspace,
    Experimental
}

export const ExtensionsLabel = nls.localize('extensions', "Extensions");
export const ExtensionsChannelId = 'extensions';
export const PreferencesLabel = nls.localize('preferences', "Preferences");

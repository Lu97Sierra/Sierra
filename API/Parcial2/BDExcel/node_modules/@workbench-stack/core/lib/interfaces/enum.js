"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SideBySideEditor = exports.TabCloseButtonType = exports.TabSizingType = exports.OpenPositioningType = exports.OpenSideBySideDirection = exports.LableFormatType = exports.GroupsArrangement = exports.EditorsOrder = exports.GroupsOrder = exports.CloseDirection = exports.MergeGroupMode = exports.GroupLocation = exports.GroupOrientation = exports.GroupDirection = exports.EditorOpenPositioning = exports.FileModelState = void 0;
// temporary
/** same as ModelState as in vscode */
var FileModelState;
(function (FileModelState) {
    /**  A model is saved.  */
    FileModelState["SAVED"] = "SAVED";
    /**  A model is dirty.  */
    FileModelState["DIRTY"] = "DIRTY";
    /**  A model is transitioning from dirty to saved.  */
    FileModelState["PENDING_SAVE"] = "PENDING_SAVE";
    /**
     * A model is in conflict mode when changes cannot be saved because the
     * underlying file has changed. Models in conflict mode are always dirty.
     */
    FileModelState["CONFLICT"] = "CONFLICT";
    /**  A model is in orphan state when the underlying file has been deleted.  */
    FileModelState["ORPHAN"] = "ORPHAN";
    /**
     * Any error that happens during a save that is not causing the CONFLICT state.
     * Models in error mode are always dirty.
     */
    FileModelState["ERROR"] = "ERROR";
    /**  Loading  */
    FileModelState["PENDING_LOAD"] = "PENDING_LOAD";
    /**  Unkown  */
    FileModelState["UNKNOWN"] = "UNKNOWN";
})(FileModelState = exports.FileModelState || (exports.FileModelState = {}));
// editorGroup.ts
var EditorOpenPositioning;
(function (EditorOpenPositioning) {
    EditorOpenPositioning["LEFT"] = "left";
    EditorOpenPositioning["RIGHT"] = "right";
    EditorOpenPositioning["FIRST"] = "first";
    EditorOpenPositioning["LAST"] = "last";
})(EditorOpenPositioning = exports.EditorOpenPositioning || (exports.EditorOpenPositioning = {}));
// editorGroups.ts
var GroupDirection;
(function (GroupDirection) {
    GroupDirection[GroupDirection["UP"] = 0] = "UP";
    GroupDirection[GroupDirection["DOWN"] = 1] = "DOWN";
    GroupDirection[GroupDirection["LEFT"] = 2] = "LEFT";
    GroupDirection[GroupDirection["RIGHT"] = 3] = "RIGHT";
})(GroupDirection = exports.GroupDirection || (exports.GroupDirection = {}));
var GroupOrientation;
(function (GroupOrientation) {
    GroupOrientation["HORIZONTAL"] = "horizontal";
    GroupOrientation["VERTICAL"] = "vertical";
})(GroupOrientation = exports.GroupOrientation || (exports.GroupOrientation = {}));
var GroupLocation;
(function (GroupLocation) {
    GroupLocation[GroupLocation["FIRST"] = 0] = "FIRST";
    GroupLocation[GroupLocation["LAST"] = 1] = "LAST";
    GroupLocation[GroupLocation["NEXT"] = 2] = "NEXT";
    GroupLocation[GroupLocation["PREVIOUS"] = 3] = "PREVIOUS";
})(GroupLocation = exports.GroupLocation || (exports.GroupLocation = {}));
var MergeGroupMode;
(function (MergeGroupMode) {
    MergeGroupMode[MergeGroupMode["COPY_EDITORS"] = 0] = "COPY_EDITORS";
    MergeGroupMode[MergeGroupMode["MOVE_EDITORS"] = 1] = "MOVE_EDITORS";
})(MergeGroupMode = exports.MergeGroupMode || (exports.MergeGroupMode = {}));
var CloseDirection;
(function (CloseDirection) {
    CloseDirection[CloseDirection["LEFT"] = 0] = "LEFT";
    CloseDirection[CloseDirection["RIGHT"] = 1] = "RIGHT";
})(CloseDirection = exports.CloseDirection || (exports.CloseDirection = {}));
var GroupsOrder;
(function (GroupsOrder) {
    /**
     * Groups sorted by creation order (oldest one first)
     */
    GroupsOrder[GroupsOrder["CREATION_TIME"] = 0] = "CREATION_TIME";
    /**
     * Groups sorted by most recent activity (most recent active first)
     */
    GroupsOrder[GroupsOrder["MOST_RECENTLY_ACTIVE"] = 1] = "MOST_RECENTLY_ACTIVE";
    /**
     * Groups sorted by grid widget order
     */
    GroupsOrder[GroupsOrder["GRID_APPEARANCE"] = 2] = "GRID_APPEARANCE";
})(GroupsOrder = exports.GroupsOrder || (exports.GroupsOrder = {}));
var EditorsOrder;
(function (EditorsOrder) {
    /**
     * Editors sorted by most recent activity (most recent active first)
     */
    EditorsOrder[EditorsOrder["MOST_RECENTLY_ACTIVE"] = 0] = "MOST_RECENTLY_ACTIVE";
    /**
     * Editors sorted by sequential order
     */
    EditorsOrder[EditorsOrder["SEQUENTIAL"] = 1] = "SEQUENTIAL";
})(EditorsOrder = exports.EditorsOrder || (exports.EditorsOrder = {}));
var GroupsArrangement;
(function (GroupsArrangement) {
    /**
     * Make the current active group consume the maximum
     * amount of space possible.
     */
    GroupsArrangement[GroupsArrangement["MINIMIZE_OTHERS"] = 0] = "MINIMIZE_OTHERS";
    /**
     * Size all groups evenly.
     */
    GroupsArrangement[GroupsArrangement["EVEN"] = 1] = "EVEN";
})(GroupsArrangement = exports.GroupsArrangement || (exports.GroupsArrangement = {}));
// editorCommont.ts
var LableFormatType;
(function (LableFormatType) {
    LableFormatType[LableFormatType["default"] = 0] = "default";
    LableFormatType[LableFormatType["short"] = 1] = "short";
    LableFormatType[LableFormatType["medium"] = 2] = "medium";
    LableFormatType[LableFormatType["long"] = 3] = "long";
})(LableFormatType = exports.LableFormatType || (exports.LableFormatType = {}));
var OpenSideBySideDirection;
(function (OpenSideBySideDirection) {
    OpenSideBySideDirection[OpenSideBySideDirection["right"] = 0] = "right";
    OpenSideBySideDirection[OpenSideBySideDirection["down"] = 1] = "down";
})(OpenSideBySideDirection = exports.OpenSideBySideDirection || (exports.OpenSideBySideDirection = {}));
var OpenPositioningType;
(function (OpenPositioningType) {
    OpenPositioningType[OpenPositioningType["left"] = 0] = "left";
    OpenPositioningType[OpenPositioningType["right"] = 1] = "right";
    OpenPositioningType[OpenPositioningType["first"] = 2] = "first";
    OpenPositioningType[OpenPositioningType["last"] = 3] = "last";
})(OpenPositioningType = exports.OpenPositioningType || (exports.OpenPositioningType = {}));
var TabSizingType;
(function (TabSizingType) {
    TabSizingType[TabSizingType["fit"] = 0] = "fit";
    TabSizingType[TabSizingType["shrink"] = 1] = "shrink";
})(TabSizingType = exports.TabSizingType || (exports.TabSizingType = {}));
var TabCloseButtonType;
(function (TabCloseButtonType) {
    TabCloseButtonType[TabCloseButtonType["left"] = 0] = "left";
    TabCloseButtonType[TabCloseButtonType["right"] = 1] = "right";
    TabCloseButtonType[TabCloseButtonType["off"] = 2] = "off";
})(TabCloseButtonType = exports.TabCloseButtonType || (exports.TabCloseButtonType = {}));
var SideBySideEditor;
(function (SideBySideEditor) {
    /**
     * Usually Right Side of the side-by-side editor
     */
    SideBySideEditor[SideBySideEditor["MASTER"] = 1] = "MASTER";
    /**
     * usually Left Side of the side-by-side editor
     */
    SideBySideEditor[SideBySideEditor["DETAILS"] = 2] = "DETAILS";
})(SideBySideEditor = exports.SideBySideEditor || (exports.SideBySideEditor = {}));
//# sourceMappingURL=enum.js.map
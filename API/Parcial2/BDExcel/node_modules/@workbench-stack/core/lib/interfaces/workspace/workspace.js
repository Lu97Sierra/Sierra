"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IWorkspaceFolder = exports.IWorkspace = exports.WorkbenchState = void 0;
/* tslint:disable */
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
// src/vs/platform/workspaces/common/workspace.ts
var WorkbenchState;
(function (WorkbenchState) {
    WorkbenchState[WorkbenchState["EMPTY"] = 1] = "EMPTY";
    WorkbenchState[WorkbenchState["FOLDER"] = 2] = "FOLDER";
    WorkbenchState[WorkbenchState["WORKSPACE"] = 3] = "WORKSPACE";
})(WorkbenchState = exports.WorkbenchState || (exports.WorkbenchState = {}));
var IWorkspace;
(function (IWorkspace) {
    function isIWorkspace(thing) {
        return thing && typeof thing === 'object'
            && typeof thing.id === 'string'
            && Array.isArray(thing.folders);
    }
    IWorkspace.isIWorkspace = isIWorkspace;
})(IWorkspace = exports.IWorkspace || (exports.IWorkspace = {}));
// export interface IWorkspaceFolderData {
// 	/**
// 	 * The associated URI for this workspace folder.
// 	 */
// 	readonly uri: URI;
// 	/**
// 	 * The name of this workspace folder. Defaults to
// 	 * the basename its [uri-path](#Uri.path)
// 	 */
// 	readonly name: string;
// 	/**
// 	 * The ordinal number of this workspace folder.
// 	 */
// 	readonly index: number;
// }
// since IWorkspaceFolder interface and namespace should exist in same file
var IWorkspaceFolder;
(function (IWorkspaceFolder) {
    function isIWorkspaceFolder(thing) {
        return thing && typeof thing === 'object'
            && uri_1.URI.isUri(thing.uri)
            && typeof thing.name === 'string'
            && typeof thing.toResource === 'function';
    }
    IWorkspaceFolder.isIWorkspaceFolder = isIWorkspaceFolder;
})(IWorkspaceFolder = exports.IWorkspaceFolder || (exports.IWorkspaceFolder = {}));
//# sourceMappingURL=workspace.js.map
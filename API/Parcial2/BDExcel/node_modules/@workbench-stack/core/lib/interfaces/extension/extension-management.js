"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferencesLabel = exports.ExtensionsChannelId = exports.ExtensionsLabel = exports.ExtensionRecommendationReason = exports.EnablementState = exports.INSTALL_ERROR_INCOMPATIBLE = exports.INSTALL_ERROR_MALICIOUS = exports.InstallOperation = exports.StatisticType = exports.SortOrder = exports.SortBy = exports.isIExtensionIdentifier = void 0;
/* tslint:disable */
const nls = require("@vscode-alt/monaco-editor/esm/vs/nls");
// auto generated
// export interface IGalleryExtensionProperties
// auto generated
// export interface IGalleryExtensionAsset 
// auto generated
// export interface IGalleryExtensionAssets 
function isIExtensionIdentifier(thing) {
    return thing
        && typeof thing === 'object'
        && typeof thing.id === 'string'
        && (!thing.uuid || typeof thing.uuid === 'string');
}
exports.isIExtensionIdentifier = isIExtensionIdentifier;
var SortBy;
(function (SortBy) {
    SortBy[SortBy["NoneOrRelevance"] = 0] = "NoneOrRelevance";
    SortBy[SortBy["LastUpdatedDate"] = 1] = "LastUpdatedDate";
    SortBy[SortBy["Title"] = 2] = "Title";
    SortBy[SortBy["PublisherName"] = 3] = "PublisherName";
    SortBy[SortBy["InstallCount"] = 4] = "InstallCount";
    SortBy[SortBy["PublishedDate"] = 5] = "PublishedDate";
    SortBy[SortBy["AverageRating"] = 6] = "AverageRating";
    SortBy[SortBy["WeightedRating"] = 12] = "WeightedRating";
})(SortBy = exports.SortBy || (exports.SortBy = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["Default"] = 0] = "Default";
    SortOrder[SortOrder["Ascending"] = 1] = "Ascending";
    SortOrder[SortOrder["Descending"] = 2] = "Descending";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
var StatisticType;
(function (StatisticType) {
    StatisticType["Uninstall"] = "uninstall";
})(StatisticType = exports.StatisticType || (exports.StatisticType = {}));
var InstallOperation;
(function (InstallOperation) {
    InstallOperation[InstallOperation["None"] = 0] = "None";
    InstallOperation[InstallOperation["Install"] = 1] = "Install";
    InstallOperation[InstallOperation["Update"] = 2] = "Update";
})(InstallOperation = exports.InstallOperation || (exports.InstallOperation = {}));
exports.INSTALL_ERROR_MALICIOUS = 'malicious';
exports.INSTALL_ERROR_INCOMPATIBLE = 'incompatible';
var EnablementState;
(function (EnablementState) {
    EnablementState[EnablementState["Disabled"] = 0] = "Disabled";
    EnablementState[EnablementState["WorkspaceDisabled"] = 1] = "WorkspaceDisabled";
    EnablementState[EnablementState["Enabled"] = 2] = "Enabled";
    EnablementState[EnablementState["WorkspaceEnabled"] = 3] = "WorkspaceEnabled";
})(EnablementState = exports.EnablementState || (exports.EnablementState = {}));
var ExtensionRecommendationReason;
(function (ExtensionRecommendationReason) {
    ExtensionRecommendationReason[ExtensionRecommendationReason["Workspace"] = 0] = "Workspace";
    ExtensionRecommendationReason[ExtensionRecommendationReason["File"] = 1] = "File";
    ExtensionRecommendationReason[ExtensionRecommendationReason["Executable"] = 2] = "Executable";
    ExtensionRecommendationReason[ExtensionRecommendationReason["DynamicWorkspace"] = 3] = "DynamicWorkspace";
    ExtensionRecommendationReason[ExtensionRecommendationReason["Experimental"] = 4] = "Experimental";
})(ExtensionRecommendationReason = exports.ExtensionRecommendationReason || (exports.ExtensionRecommendationReason = {}));
exports.ExtensionsLabel = nls.localize('extensions', "Extensions");
exports.ExtensionsChannelId = 'extensions';
exports.PreferencesLabel = nls.localize('preferences', "Preferences");
//# sourceMappingURL=extension-management.js.map
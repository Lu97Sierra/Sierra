import { INativeOpenDialogOptions, IDevToolsOptions, IEnterWorkspaceResult, IMessageBoxOptions, ISaveDialogOptions, IOpenDialogOptions, IOpenSettings, IMessageBoxResult, IURIToOpen, IWorkspaceIdentifier, INewWindowOptions, ICrashReporterStartOptions } from '../generated-model';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { ISingleFolderWorkspaceIdentifier } from '../workspace';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
interface IVscodeWindowService {
    _serviceBrand: any;
    readonly onDidChangeFocus: Event<boolean>;
    readonly onDidChangeMaximize: Event<boolean>;
    readonly hasFocus: boolean;
    readonly windowId: number;
    pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    reloadWindow(args?: any /** ParsedArgs */): Promise<void>;
    openDevTools(options?: IDevToolsOptions): Promise<void>;
    toggleDevTools(): Promise<void>;
    closeWorkspace(): Promise<void>;
    enterWorkspace(path: URI): Promise<IEnterWorkspaceResult | undefined>;
    toggleFullScreen(): Promise<void>;
    setRepresentedFilename(fileName: string): Promise<void>;
    focusWindow(): Promise<void>;
    closeWindow(): Promise<void>;
    openWindow(uris: IURIToOpen[], options?: IOpenSettings): Promise<void>;
    isFocused(): Promise<boolean>;
    setDocumentEdited(flag: boolean): Promise<void>;
    isMaximized(): Promise<boolean>;
    maximizeWindow(): Promise<void>;
    unmaximizeWindow(): Promise<void>;
    minimizeWindow(): Promise<void>;
    onWindowTitleDoubleClick(): Promise<void>;
    showMessageBox(options: IMessageBoxOptions): Promise<IMessageBoxResult>;
    showSaveDialog(options: ISaveDialogOptions): Promise<string>;
    showOpenDialog(options: IOpenDialogOptions): Promise<string[]>;
    resolveProxy(url: string): Promise<string | undefined>;
}
export interface IWindowService extends Pick<IVscodeWindowService, 'isFocused' | 'openWindow' | 'onDidChangeFocus' | 'showSaveDialog' | 'showOpenDialog' | 'showMessageBox'> {
}
interface IVscodeWindowsService {
    pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;
    showMessageBox(windowId: number, options: IMessageBoxOptions): Promise<IMessageBoxResult>;
    showSaveDialog(windowId: number, options: ISaveDialogOptions): Promise<string>;
    showOpenDialog(windowId: number, options: IOpenDialogOptions): Promise<string[]>;
    reloadWindow(windowId: number, args?: any /** ParsedArgs */): Promise<void>;
    openDevTools(windowId: number, options?: IDevToolsOptions): Promise<void>;
    toggleDevTools(windowId: number): Promise<void>;
    closeWorkspace(windowId: number): Promise<void>;
    enterWorkspace(windowId: number, path: URI): Promise<IEnterWorkspaceResult | undefined>;
    toggleFullScreen(windowId: number): Promise<void>;
    setRepresentedFilename(windowId: number, fileName: string): Promise<void>;
    addRecentlyOpened(recents: any): Promise<void>;
    removeFromRecentlyOpened(paths: URI[]): Promise<void>;
    clearRecentlyOpened(): Promise<void>;
    focusWindow(windowId: number): Promise<void>;
    closeWindow(windowId: number): Promise<void>;
    isFocused(windowId: number): Promise<boolean>;
    isMaximized(windowId: number): Promise<boolean>;
    maximizeWindow(windowId: number): Promise<void>;
    unmaximizeWindow(windowId: number): Promise<void>;
    minimizeWindow(windowId: number): Promise<void>;
    onWindowTitleDoubleClick(windowId: number): Promise<void>;
    setDocumentEdited(windowId: number, flag: boolean): Promise<void>;
    quit(): Promise<void>;
    relaunch(options: {
        addArgs?: string[];
        removeArgs?: string[];
    }): Promise<void>;
    newWindowTab(): Promise<void>;
    showPreviousWindowTab(): Promise<void>;
    showNextWindowTab(): Promise<void>;
    moveWindowTabToNewWindow(): Promise<void>;
    mergeAllWindowTabs(): Promise<void>;
    toggleWindowTabsBar(): Promise<void>;
    whenSharedProcessReady(): Promise<void>;
    toggleSharedProcess(): Promise<void>;
    openWindow(windowId: number, uris: IURIToOpen[], options: IOpenSettings): Promise<void>;
    openNewWindow(options?: INewWindowOptions): Promise<void>;
    getWindows(): Promise<{
        id: number;
        workspace?: IWorkspaceIdentifier;
        folderUri?: ISingleFolderWorkspaceIdentifier;
        title: string;
        filename?: string;
    }[]>;
    getWindowCount(): Promise<number>;
    log(severity: string, ...messages: string[]): Promise<void>;
    showItemInFolder(path: URI): Promise<void>;
    getActiveWindowId(): Promise<number | undefined>;
    openExternal(url: string): Promise<boolean>;
    startCrashReporter(config: ICrashReporterStartOptions): Promise<void>;
    openAboutDialog(): Promise<void>;
    resolveProxy(windowId: number, url: string): Promise<string | undefined>;
}
export interface IWindowsService extends Pick<IVscodeWindowsService, 'openExternal' | 'addRecentlyOpened' | 'removeFromRecentlyOpened'> {
}
export {};

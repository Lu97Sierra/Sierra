"use strict";
/* tslint:disable */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AbstractWorkspaceService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractWorkspaceService = void 0;
const inversify_1 = require("inversify");
const resources_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const core_1 = require("../../core");
const configuration_1 = require("../../core/workspace/configuration");
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
const map_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/map");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const async_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/async");
// import * as ILogger from 'bunyan';
const core_2 = require("@common-stack/core");
let AbstractWorkspaceService = AbstractWorkspaceService_1 = class AbstractWorkspaceService extends lifecycle_1.Disposable {
    constructor(logger) {
        super();
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this._onDidChangeWorkspaceFolders = this._register(new event_1.Emitter());
        this.onDidChangeWorkspaceFolders = this._onDidChangeWorkspaceFolders.event;
        this._onDidChangeWorkspaceName = this._register(new event_1.Emitter());
        this.onDidChangeWorkspaceName = this._onDidChangeWorkspaceName.event;
        this._onDidChangeWorkbenchState = this._register(new event_1.Emitter());
        this.onDidChangeWorkbenchState = this._onDidChangeWorkbenchState.event;
        this.logger = logger.child({ className: 'AbstractWorkspaceService' });
        this.completeWorkspaceBarrier = new async_1.Barrier();
    }
    getCompleteWorkspace() {
        return this.completeWorkspaceBarrier.wait().then(() => this.getWorkspace());
    }
    getWorkspace() {
        return this.workspace;
    }
    getWorkbenchState() {
        // Workspace has configuration file
        if (this.workspace.configuration) {
            return 3 /* WORKSPACE */;
        }
        // Folder has single root
        if (this.workspace.folders.length === 1) {
            return 2 /* FOLDER */;
        }
        // Empty
        return 1 /* EMPTY */;
    }
    get configuration() {
        return this._configuration;
    }
    set configuration(configuration) {
        this._configuration = configuration;
    }
    getWorkspaceFolder(resource) {
        return this.workspace.getFolder(resource);
    }
    isInsideWorkspace(resource) {
        return !!this.getWorkspaceFolder(resource);
    }
    isCurrentWorkspace(workspaceIdentifier) {
        switch (this.getWorkbenchState()) {
            case 2 /* FOLDER */:
                return core_1.isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && resources_1.isEqual(workspaceIdentifier, this.workspace.folders[0].uri);
            case 3 /* WORKSPACE */:
                return core_1.isWorkspaceIdentifier(workspaceIdentifier) && this.workspace.id === workspaceIdentifier.id;
        }
        return false;
    }
    getConfigurationData() {
        return this.configuration.toData();
    }
    extAcceptConfigurationChanged(data, event) {
        this._configuration = AbstractWorkspaceService_1.parse(data);
        // this._confugrationScopes = data.configurationScopes;
        this._onDidChangeConfiguration.fire(event);
    }
    extAcceptChangedWorkbenchState(workspace, event) {
        this.workspace = this.reviveWorkspaceUris(workspace);
        this._onDidChangeWorkbenchState.fire(event);
        this.releaseUpdateWorkspaceBarrier();
    }
    extAcceptChangedWorkspaceFolders(workspace, event) {
        this.workspace = this.reviveWorkspaceUris(workspace);
        this._onDidChangeWorkspaceFolders.fire(event);
        this.releaseUpdateWorkspaceBarrier();
    }
    extAcceptChangedWorkspaceName(workspace) {
        this.workspace = this.reviveWorkspaceUris(workspace);
        this._onDidChangeWorkspaceName.fire();
        this.releaseUpdateWorkspaceBarrier();
    }
    getValue(arg1, arg2) {
        const section = typeof arg1 === 'string' ? arg1 : undefined;
        const overrides = core_1.isConfigurationOverrides(arg1) ? arg1 : core_1.isConfigurationOverrides(arg2) ? arg2 : {};
        return this.configuration.getValue(section, overrides);
    }
    inspect(key, overrides) {
        return this._configuration.inspect(key, overrides);
    }
    keys() {
        return this._configuration.keys();
    }
    triggerConfigurationChange(arg0, WORKSPACE) {
        throw new Error("Method not implemented.");
    }
    static parse(data) {
        const defaultConfiguration = AbstractWorkspaceService_1.parseConfigurationModel(data.defaults);
        const userConfiguration = AbstractWorkspaceService_1.parseConfigurationModel(data.user);
        const workspaceConfiguration = AbstractWorkspaceService_1.parseConfigurationModel(data.workspace);
        const folders = Object.keys(data.folders).reduce((result, key) => {
            result.set(uri_1.URI.parse(key), AbstractWorkspaceService_1.parseConfigurationModel(data.folders[key]));
            return result;
        }, new map_1.ResourceMap());
        return new configuration_1.WorkspaceConfiguration(defaultConfiguration, userConfiguration, new core_1.ConfigurationModel(), workspaceConfiguration, folders, new core_1.ConfigurationModel(), new map_1.ResourceMap());
    }
    releaseWorkspaceBarrier() {
        if (!this.completeWorkspaceBarrier.isOpen()) {
            this.completeWorkspaceBarrier.open();
        }
    }
    releaseUpdateWorkspaceBarrier() {
        if (this.updateWorkspaceBarrier && !this.updateWorkspaceBarrier.isOpen()) {
            this.updateWorkspaceBarrier.open();
        }
    }
    static parseConfigurationModel(model) {
        return new core_1.ConfigurationModel(model.contents, model.keys, model.overrides).freeze();
    }
    reviveWorkspaceUris(workspaceData) {
        let workspaceConfig, workspaceFolders;
        if (workspaceData.folders) {
            workspaceFolders = workspaceData.folders.map(({ index, uri: uriComponent, name }) => (new core_1.WorkspaceFolder({ index, uri: uri_1.URI.revive(uriComponent), name })));
        }
        if (workspaceData.configuration) {
            workspaceConfig = uri_1.URI.revive(workspaceData.configuration);
        }
        return new core_1.Workspace(workspaceData.id, workspaceFolders, workspaceConfig);
    }
};
AbstractWorkspaceService = AbstractWorkspaceService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(core_2.CommonType.LOGGER)),
    __metadata("design:paramtypes", [Object])
], AbstractWorkspaceService);
exports.AbstractWorkspaceService = AbstractWorkspaceService;
//# sourceMappingURL=abstract-workspace-configuration.js.map
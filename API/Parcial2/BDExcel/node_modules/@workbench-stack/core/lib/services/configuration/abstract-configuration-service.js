"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AbstractConfigurationClientService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractConfigurationClientService = void 0;
const inversify_1 = require("inversify");
const lifecycle_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle");
const core_1 = require("../../core");
const map_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/map");
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
const event_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/event");
let AbstractConfigurationClientService = AbstractConfigurationClientService_1 = class AbstractConfigurationClientService extends lifecycle_1.Disposable {
    constructor(logger) {
        super();
        this._onDidChangeConfiguration = this._register(new event_1.Emitter());
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this.logger = logger.child({ className: 'ConfigurationClientService' });
    }
    get configuration() {
        return this._configuration;
    }
    set configuration(configuration) {
        this._configuration = configuration;
    }
    getConfigurationData() {
        return this.configuration.toData();
    }
    getValue(arg1, arg2) {
        const section = typeof arg1 === 'string' ? arg1 : undefined;
        const overrides = core_1.isConfigurationOverrides(arg1) ? arg1 : core_1.isConfigurationOverrides(arg2) ? arg2 : {};
        return this.configuration.getValue(section, overrides, undefined);
    }
    updateValue(key, value, arg3, arg4) {
        return Promise.reject(new Error('not supported'));
    }
    inspect(key) {
        return this.configuration.inspect(key, {}, undefined);
    }
    keys() {
        return this.configuration.keys(undefined);
    }
    extAcceptConfigurationChanged(data, event) {
        this._configuration = AbstractConfigurationClientService_1.parse(data);
        // this._confugrationScopes = data.configurationScopes;
        this._onDidChangeConfiguration.fire(event);
    }
    static parse(data) {
        const defaultConfiguration = AbstractConfigurationClientService_1.parseConfigurationModel(data.defaults);
        const userConfiguration = AbstractConfigurationClientService_1.parseConfigurationModel(data.user);
        const workspaceConfiguration = AbstractConfigurationClientService_1.parseConfigurationModel(data.workspace);
        const folders = Object.keys(data.folders).reduce((result, key) => {
            result.set(uri_1.URI.parse(key), AbstractConfigurationClientService_1.parseConfigurationModel(data.folders[key]));
            return result;
        }, new map_1.ResourceMap());
        return new core_1.Configuration(defaultConfiguration, userConfiguration, new core_1.ConfigurationModel(), workspaceConfiguration, folders, new core_1.ConfigurationModel(), new map_1.ResourceMap(), false);
    }
    static parseConfigurationModel(model) {
        return new core_1.ConfigurationModel(model.contents, model.keys, model.overrides).freeze();
    }
};
AbstractConfigurationClientService = AbstractConfigurationClientService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject('Logger')),
    __metadata("design:paramtypes", [Object])
], AbstractConfigurationClientService);
exports.AbstractConfigurationClientService = AbstractConfigurationClientService;
//# sourceMappingURL=abstract-configuration-service.js.map
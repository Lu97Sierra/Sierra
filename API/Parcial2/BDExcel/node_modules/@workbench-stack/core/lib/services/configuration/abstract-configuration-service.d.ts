import { IClientConfigurationService, IConfigurationData, IConfigurationOverrides, ConfigurationTarget, IConfigurationModel, IConfigurationChangeEvent, IWorkspaceFolder } from '../../interfaces';
import { IDisposable, Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { Configuration, ConfigurationModel } from '../../core';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { CdmLogger } from '@cdm-logger/core';
declare type ILogger = CdmLogger.ILogger;
export declare abstract class AbstractConfigurationClientService extends Disposable implements IClientConfigurationService, IDisposable {
    private _configuration;
    protected logger: ILogger;
    constructor(logger: ILogger);
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    abstract extInitialize(): any;
    get configuration(): Configuration;
    set configuration(configuration: Configuration);
    getConfigurationData(): IConfigurationData;
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    updateValue(key: string, value: any): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    inspect<T>(key: string): {
        default: T;
        user: T;
        workspace?: T;
        workspaceFolder?: T;
        value: T;
    };
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    abstract reloadConfiguration(folder?: IWorkspaceFolder): Promise<void>;
    extAcceptConfigurationChanged(data: IConfigurationData, event: IConfigurationChangeEvent): void;
    static parse(data: IConfigurationData): Configuration;
    protected static parseConfigurationModel(model: IConfigurationModel): ConfigurationModel;
}
export {};

import { IWorkspaceFolder, IWorkspaceData, IConfigurationService, WorkbenchState, IConfigurationChangeEvent, IWorkspaceFoldersChangeEvent, IWorkspaceFolderCreationData, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier, IConfigurationData, IConfigurationOverrides, ConfigurationTarget, IConfigurationModel, IClientWorkspaceContextService } from '../../interfaces';
import { Workspace, ConfigurationModel } from '../../core';
import { WorkspaceConfiguration as Configuration } from '../../core/workspace/configuration';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event, Emitter } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { Disposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { Barrier } from '@vscode-alt/monaco-editor/esm/vs/base/common/async';
import { CdmLogger } from '@cdm-logger/core';
declare type ILogger = CdmLogger.ILogger;
export declare abstract class AbstractWorkspaceService extends Disposable implements IConfigurationService, IClientWorkspaceContextService {
    protected workspace: Workspace;
    protected completeWorkspaceBarrier: Barrier;
    protected updateWorkspaceBarrier: Barrier;
    private _configuration;
    protected logger: ILogger;
    protected readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent>;
    readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent>;
    protected readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent>;
    readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;
    protected readonly _onDidChangeWorkspaceName: Emitter<void>;
    readonly onDidChangeWorkspaceName: Event<void>;
    protected readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState>;
    readonly onDidChangeWorkbenchState: Event<WorkbenchState>;
    constructor(logger: ILogger);
    abstract extInitialize(): any;
    abstract initialize(args: any): any;
    getCompleteWorkspace(): Promise<Workspace>;
    getWorkspace(): Workspace;
    getWorkbenchState(): WorkbenchState;
    get configuration(): Configuration;
    set configuration(configuration: Configuration);
    getWorkspaceFolder(resource: URI): IWorkspaceFolder | null;
    abstract addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void>;
    abstract removeFolders(foldersToRemove: URI[]): Promise<void>;
    abstract updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void>;
    isInsideWorkspace(resource: URI): boolean;
    isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;
    getConfigurationData(): IConfigurationData;
    extAcceptConfigurationChanged(data: IConfigurationData, event: IConfigurationChangeEvent): void;
    extAcceptChangedWorkbenchState(workspace: IWorkspaceData, event: WorkbenchState): void;
    extAcceptChangedWorkspaceFolders(workspace: IWorkspaceData, event: IWorkspaceFoldersChangeEvent): void;
    extAcceptChangedWorkspaceName(workspace: IWorkspaceData): void;
    getValue<T>(): T;
    getValue<T>(section: string): T;
    getValue<T>(overrides: IConfigurationOverrides): T;
    getValue<T>(section: string, overrides: IConfigurationOverrides): T;
    abstract updateValue(key: string, value: any): Promise<void>;
    abstract updateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;
    abstract updateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;
    abstract updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;
    abstract updateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;
    abstract updateValue(key: string, value: any, arg3?: any, arg4?: any, donotNotifyError?: any): Promise<void>;
    abstract reloadConfiguration(folder?: IWorkspaceFolder): Promise<void>;
    inspect<T>(key: string, overrides?: IConfigurationOverrides): {
        default: T;
        user: T;
        userLocal?: T;
        userRemote?: T;
        workspace?: T;
        workspaceFolder?: T;
        memory?: T;
        value: T;
    };
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
        workspaceFolder: string[];
    };
    triggerConfigurationChange(arg0: any, WORKSPACE: any): void;
    static parse(data: IConfigurationData): Configuration;
    protected releaseWorkspaceBarrier(): void;
    protected releaseUpdateWorkspaceBarrier(): void;
    protected static parseConfigurationModel(model: IConfigurationModel): ConfigurationModel;
    protected reviveWorkspaceUris(workspaceData: IWorkspaceData): Workspace;
}
export {};

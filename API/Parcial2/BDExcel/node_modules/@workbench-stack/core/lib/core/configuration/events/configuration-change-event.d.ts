import { AbstractConfigurationChangeEvent } from './abastract-configuration-change-event';
import { IConfigurationChangeEvent } from '../../../interfaces';
import { ConfigurationTarget, IConfigurationModel } from '../../../interfaces';
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { ConfigurationModel } from '../models/configuration-model';
import { ResourceMap } from '@vscode-alt/monaco-editor/esm/vs/base/common/map';
export declare class ConfigurationChangeEvent extends AbstractConfigurationChangeEvent implements IConfigurationChangeEvent {
    private _changedConfiguration;
    private _changedConfigurationByResource;
    private _source;
    private _sourceConfig;
    constructor(_changedConfiguration?: ConfigurationModel, _changedConfigurationByResource?: ResourceMap<ConfigurationModel>);
    get changedConfiguration(): IConfigurationModel;
    get changedConfigurationByResource(): ResourceMap<IConfigurationModel>;
    change(event: ConfigurationChangeEvent): ConfigurationChangeEvent;
    change(keys: string[], resource?: URI): ConfigurationChangeEvent;
    telemetryData(source: ConfigurationTarget, sourceConfig: any): ConfigurationChangeEvent;
    get affectedKeys(): string[];
    get source(): ConfigurationTarget;
    get sourceConfig(): any;
    affectsConfiguration(config: string, resource?: URI): boolean;
    private changeWithKeys;
    private getOrSetChangedConfigurationForResource;
}

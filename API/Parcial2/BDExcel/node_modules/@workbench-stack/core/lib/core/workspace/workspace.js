"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toUri = exports.toWorkspaceFolders = exports.toWorkspaceFolder = exports.WorkspaceFolder = exports.Workspace = void 0;
/* tslint:disable */
const uri_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/uri");
const map_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/map");
const resources = require("@vscode-alt/monaco-editor/esm/vs/base/common/resources");
const path_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/path");
const helpers_1 = require("./helpers");
// src/vs/platform/workspace/common/workspace.ts
class Workspace {
    constructor(_id, folders = [], _configuration = null) {
        this._id = _id;
        this._configuration = _configuration;
        this._foldersMap = map_1.TernarySearchTree.forPaths();
        this.folders = folders;
    }
    update(workspace) {
        this._id = workspace.id;
        this._configuration = workspace.configuration;
        this.folders = workspace.folders;
    }
    get folders() {
        return this._folders;
    }
    set folders(folders) {
        this._folders = folders;
        this.updateFoldersMap();
    }
    get id() {
        return this._id;
    }
    get name() {
        return this._id;
    }
    get configuration() {
        return this._configuration;
    }
    set configuration(configuration) {
        this._configuration = configuration;
    }
    getFolder(resource) {
        if (!resource) {
            return null;
        }
        return this._foldersMap.findSubstr(resource.toString()) || null;
    }
    updateFoldersMap() {
        this._foldersMap = map_1.TernarySearchTree.forPaths();
        for (const folder of this.folders) {
            this._foldersMap.set(folder.uri.toString(), folder);
        }
    }
    toJSON() {
        return { id: this.id, name: this.name, folders: this.folders, configuration: this.configuration };
    }
}
exports.Workspace = Workspace;
class WorkspaceFolder {
    constructor(data, raw) {
        this.raw = raw;
        this.uri = data.uri;
        this.index = data.index;
        this.name = data.name;
    }
    toResource(relativePath) {
        return resources.joinPath(this.uri, relativePath);
    }
    toJSON() {
        return { uri: this.uri, name: this.name, index: this.index };
    }
}
exports.WorkspaceFolder = WorkspaceFolder;
function toWorkspaceFolder(resource) {
    return new WorkspaceFolder({ uri: resource, index: 0, name: resources.basenameOrAuthority(resource) }, { uri: resource.toString() });
}
exports.toWorkspaceFolder = toWorkspaceFolder;
function toWorkspaceFolders(configuredFolders, workspaceConfigFile) {
    let result = [];
    let seen = Object.create(null);
    const relativeTo = resources.dirname(workspaceConfigFile);
    for (let configuredFolder of configuredFolders) {
        let uri = null;
        if (helpers_1.isRawFileWorkspaceFolder(configuredFolder)) {
            if (configuredFolder.path) {
                uri = resources.resolvePath(relativeTo, configuredFolder.path);
            }
        }
        else if (helpers_1.isRawUriWorkspaceFolder(configuredFolder)) {
            try {
                uri = uri_1.URI.parse(configuredFolder.uri);
                // this makes sure all workspace folder are absolute
                if (uri.path[0] !== '/') {
                    uri = uri.with({ path: '/' + uri.path });
                }
            }
            catch (e) {
                console.warn(e);
                // ignore
            }
        }
        if (uri) {
            // remove duplicates
            let comparisonKey = resources.getComparisonKey(uri);
            if (!seen[comparisonKey]) {
                seen[comparisonKey] = true;
                const name = configuredFolder.name || resources.basenameOrAuthority(uri);
                result.push(new WorkspaceFolder({ uri, name, index: result.length }, configuredFolder));
            }
        }
    }
    return result;
}
exports.toWorkspaceFolders = toWorkspaceFolders;
function toUri(path, relativeTo) {
    if (path) {
        if (path_1.isAbsolute(path)) {
            return uri_1.URI.file(path);
        }
        if (relativeTo) {
            return resources.joinPath(relativeTo, path);
        }
    }
    return null;
}
exports.toUri = toUri;
//# sourceMappingURL=workspace.js.map
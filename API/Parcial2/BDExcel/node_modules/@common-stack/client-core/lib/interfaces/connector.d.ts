import { Resolvers, IdGetterObj, PossibleTypesMap, TypePolicies, Operation, ApolloLink } from '@apollo/client';
import { interfaces } from 'inversify';
import { Cache } from '@apollo/client/cache';
import { ReducersMapObject } from 'redux';
import { ErrorLink } from '@apollo/client/link/error';
import { ConnectionParams } from 'subscriptions-transport-ws';
export declare type ResolverType = Resolvers | Resolvers[] | ((service: any) => Resolvers) | ((service: any) => Resolvers)[] | ((service: any) => any) | ((service: any) => any)[];
export declare type ApolloLinkFunc = (container: interfaces.Container) => ApolloLink;
export declare type ApolloConnectionParamFunc = ((container: interfaces.Container) => ConnectionParams) | ConnectionParams;
export declare type IWSConnectionCallbackFunc = (webSocket: any, error: Error[], result?: any) => void | Promise<void>;
export declare type ApolloWSConnectionCallbackFunc = (container: interfaces.Container) => IWSConnectionCallbackFunc;
declare type IRetryLinkAttemptFuncs = (count: number, operation: Operation, error: any) => boolean | Promise<boolean>;
declare type IClientStateQueryDefault<T, V> = {
    type: 'query';
} & Cache.WriteQueryOptions<T, V>;
declare type IClientStateFragmentDefault<T, V> = {
    type: 'fragment';
} & Cache.WriteFragmentOptions<T, V>;
export declare type IClientStateDefault<T = unknown, V = unknown> = IClientStateFragmentDefault<T, V> | IClientStateQueryDefault<T, V>;
export interface IClientStateConfig {
    resolvers?: ResolverType;
    defaults?: IClientStateDefault[];
    typeDefs?: string | string[];
    possibleTypes?: PossibleTypesMap;
    typePolicies?: TypePolicies;
    retryLinkAttemptFuncs?: IRetryLinkAttemptFuncs;
    /**
     * @param preLinkFuncs all `apollo-link` that need to be composed before the network link. Should be a function.
     * @inheritdoc https://www.apollographql.com/docs/react/api/link/introduction/
     */
    preLinkFuncs?: ApolloLinkFunc[];
    /**
     * @param connectionParam To provide connectionParam to `WebSocketLink`. It takes a single `Object` or a `Function`.
     * @inheritdoc https://www.apollographql.com/docs/react/api/link/apollo-link-ws/
     */
    connectionParam?: ApolloConnectionParamFunc;
    /**
     * @param connectionCallback Accept only one function for all modules.
     * @inheritdoc
     */
    connectionCallbackFunc?: ApolloWSConnectionCallbackFunc;
}
export interface IClientState {
    resolvers?: Resolvers;
    defaults: IClientStateDefault[];
    typeDefs?: string | string[];
    possibleTypes?: PossibleTypesMap;
    retryLinkAttemptFuncs?: IRetryLinkAttemptFuncs[];
    typePolicies?: TypePolicies;
    preLinks: ApolloLink[];
    connectionParams: ConnectionParams[];
    connectionCallbackFuncs?: IWSConnectionCallbackFunc[];
}
/**
 * ModuleShape have optional configuration to be implemented by all the feature modules
 * in the application.
 */
export interface IModuleShape {
    /**
     * @param link all `apollo-link` that need to be composed.
     * @inheritdoc https://github.com/apollographql/apollo-link
     * @deprecated use ClientStateParms.preLinkFuncs
     */
    readonly link?: any;
    /**
     * @param errorLink compose all errorLink
     * @inheritdoc https://github.com/apollographql/apollo-link/tree/master/packages/apollo-link-error
     */
    readonly errorLink?: ErrorLink | ErrorLink[];
    readonly createFetch?: any;
    /**
     * @param connectionParam method that called when a client connects to the socket.
     * @inheritdoc https://github.com/apollographql/subscriptions-transport-ws#constructorurl-options-connectioncallback
     * @deprecated use clientStateParams
     */
    readonly connectionParam?: any;
    /**
     * @param epic all `epics` that need to be composed.
     * @inheritdoc https://redux-observable.js.org/docs/basics/Epics.html
     */
    readonly epic?: any;
    /**
     * @param reducer Redux reducers list
     */
    readonly reducer?: ReducersMapObject | ReducersMapObject[];
    /**
     * @param clientStateParams Client side configuration of `apollo-client`
     * @inheritdoc https://github.com/apollographql/apollo-client/tree/2d65da133c156f6d808e64aee7e7fd5f7cc71d7f
     */
    readonly clientStateParams?: IClientStateConfig | IClientStateConfig[];
    /**
     * @param dataIdFromObject A function that returns an object identifier given an particular result
     * object.
     * @inheritdoc https://github.com/apollographql/apollo-client/tree/ed66999bac40226abfeada8d6c83b454636bb4b0/packages/apollo-cache-inmemory#configuration
     */
    readonly dataIdFromObject?: {
        [key: string]: (value: any) => string;
    } | {
        [key: string]: (value: any) => string;
    }[] | IdGetterObj;
    /**
     * @param createContainerFunc Synchronous Container Modules of inversify.
     * @inheritdoc https://github.com/inversify/InversifyJS/blob/master/wiki/container_modules.md
     */
    readonly createContainerFunc?: Function | Function[];
    /**
     * @param createServiceFunc Services
     */
    readonly createServiceFunc?: Function | Function[];
    readonly sidebarSegments?: any;
    readonly routerFactory?: any;
    /**
     * @param route Route list
     */
    readonly route?: any;
    /**
     * @param navItem Top left navigation links
     */
    readonly navItem?: any;
    /**
     * @param navItemRightTop right navigation links
     */
    readonly navItemRight?: any;
    /**
     * @param rootComponentFactory Root component factory list
     */
    readonly rootComponentFactory?: any;
    /**
     * @param dataRootComponent Data root React elements list (data root elements wraps data fetching react subtree root)
     */
    readonly dataRootComponent?: any;
    readonly createFetchOptions?: any;
    /**
     * @param stylesInsert URL list to 3rd party css scripts
     */
    readonly stylesInsert?: any;
    /**
     * @param scriptsInsert URL list to 3rd party js scripts
     */
    readonly scriptsInsert?: any;
    /**
     * @deprecated
     */
    readonly catalogInfo?: any;
    /**
     * @deprecated
     */
    readonly languagesFuncs?: any;
    /**
     * @param leftMainPanelItems Components that will be placed left panel.
     */
    readonly leftMainPanelItems?: any;
    /**
     * @param middleMainPanelItems Components that will be placed middle center panel
     */
    readonly middleMainPanelItems?: any;
    /**
     * @param middleMainPanelItemsProps Props of the component that will be placed middle center panel
     */
    readonly middleMainPanelItemsProps?: any;
    /**
     * @param leftFooterItems Components that will be placed left footer panel
     */
    readonly leftFooterItems?: any;
    /**
     * @param rightFooterItems Components that will be placed right footer panel
     */
    readonly rightFooterItems?: any;
    /**
     * @param middleLowerPanelItems Components that will be placed below middle panel
     */
    readonly middleLowerPanelItems?: any;
    readonly reduxPersistTransforms?: any[];
}
/**
 * Feature module methods
 */
export interface IFeature extends IModuleShape {
    readonly data: any[];
    /**
     * @returns Redux-Observable Epics
     */
    readonly epics: any;
    readonly getRouter: any;
    /**
     * @returns client-side React route components list
     */
    readonly getRoutes: any;
    /**
     * @returns client-side top left navbar link component list
     */
    readonly navItems: any;
    /**
     * @returns client-side top right navbar link component list
     */
    readonly navItemsRight: any;
    /**
     * @returns Redux reducers
     */
    readonly reducers: any;
    readonly connectionParams: any;
    /**
     * @returns URL list to 3rd party css styles
     */
    readonly stylesInserts: any;
    /**
     * @returns URL list to 3rd party js styles
     */
    readonly scriptsInserts: any;
    readonly leftMainPanel: any;
    readonly middleMainPanel: any;
    readonly leftFooter: any;
    readonly rightFooter: any;
    readonly middleLowerPanel: any;
    readonly dataIdFromObject: any;
    /**
     * @param args Options to pass to each Container Module
     * @returns Created container and binds all the container modules
     */
    createContainers(args: any): any;
    createService(options: any, updateOptions: any): any;
    /**
     * @param args Provide resolverContext which can be passed to all resolver functions.
     * @returns IClientState
     */
    getStateParams(args?: {
        resolverContex?: any;
    }): IClientState;
    getDataIdFromObject(result: {
        [key: string]: string | number;
        __typename?: string;
    } | IdGetterObj): any;
    /**
     * @arguments root React tree root component
     * @arguments req Http Request
     * @returns React tree root component wrapped up by root components exposed by this module
     */
    getWrappedRoot(root: any, req?: any): any;
    /**
     * @param root React tree data root component (first React root components which is used for fetching data)
     *
     * @returns React tree data root component wrapped up by data root components exposed by this module
     */
    getDataRoot(root: any): any;
    registerLanguages(monaco: any): void;
}
export {};

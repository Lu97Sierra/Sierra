import { IFeature, IModuleShape, IClientStateConfig, IClientState } from '../interfaces';
import { IdGetterObj } from '@apollo/client';
import { ErrorLink } from '@apollo/client/link/error';
import { ReducersMapObject } from 'redux';
import { interfaces } from 'inversify';
export declare const featureCatalog: {};
export declare abstract class AbstractFeature implements IFeature {
    link: any;
    errorLink: ErrorLink[];
    createFetch: any;
    connectionParam: any;
    epic: any;
    reducer: ReducersMapObject[];
    reduxContext: any;
    clientStateParams?: IClientStateConfig[];
    sidebarSegments: any[];
    routerFactory: any;
    route: any;
    navItem: any;
    navItemRight: any;
    rootComponentFactory: any[];
    dataRootComponent: any[];
    createFetchOptions: any[];
    stylesInsert: any[];
    scriptsInsert: any[];
    catalogInfo: any[];
    languagesFuncs: any[];
    data: any[];
    dataIdFromObject: {
        [key: string]: (value: any) => string;
    }[];
    createContainerFunc: Function[];
    createServiceFunc: Function[];
    leftMainPanelItems: any;
    middleMainPanelItems: any;
    middleMainPanelItemsProps: any;
    leftFooterItems: any;
    rightFooterItems: any;
    middleLowerPanelItems: any;
    reduxPersistTransforms: any[];
    private isContainerLoaded;
    private services;
    private _container;
    /**
     * Constructs Client feature module representation, that folds all the feature modules
     * into a single module represented by this instance.
     * @param feature
     * @param features
     */
    constructor(feature?: IModuleShape, ...features: IModuleShape[]);
    private get container();
    get epics(): any;
    getRouter(withRoot?: boolean, rootComponent?: any): any;
    abstract getRoutes(searchPath?: RegExp): any;
    abstract get navItems(): any;
    abstract get navItemsRight(): any;
    get reducers(): any;
    createContainers(options: any): interfaces.Container;
    createService(options: any, updateOptions: any): any;
    getStateParams(args?: {
        resolverContex?: any;
    }): IClientState;
    get connectionParams(): any;
    get stylesInserts(): any[];
    get scriptsInserts(): any[];
    get leftMainPanel(): any;
    get middleMainPanel(): any;
    get leftFooter(): any;
    get rightFooter(): any;
    get middleLowerPanel(): any;
    get reduxPersistStateTransformers(): any[];
    getDataIdFromObject(result: {
        [key: string]: string | number;
        __typename?: string;
    } | IdGetterObj): any;
    abstract getWrappedRoot(root: any, req: any): any;
    abstract getDataRoot(root: any): any;
    abstract registerLanguages(monaco: any): any;
}

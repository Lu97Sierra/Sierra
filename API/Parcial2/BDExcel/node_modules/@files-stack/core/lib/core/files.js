"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toFileOperationResult = exports.toFileSystemProviderErrorCode = exports.markAsFileSystemProviderError = exports.createFileSystemProviderError = exports.FileSystemProviderError = exports.etag = exports.hasOpenReadWriteCloseCapability = exports.hasFileFolderCopyCapability = exports.hasReadWriteCapability = exports.FileOperationError = void 0;
/* tslint:disable */
const types_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
const interfaces_1 = require("../interfaces");
class FileOperationError extends Error {
    constructor(message, fileOperationResult, options) {
        super(message);
        this.fileOperationResult = fileOperationResult;
        this.options = options;
    }
    static isFileOperationError(obj) {
        return obj instanceof Error && !types_1.isUndefinedOrNull(obj.fileOperationResult);
    }
}
exports.FileOperationError = FileOperationError;
function hasReadWriteCapability(provider) {
    return !!(provider.capabilities & 2 /* FileReadWrite */);
}
exports.hasReadWriteCapability = hasReadWriteCapability;
function hasFileFolderCopyCapability(provider) {
    return !!(provider.capabilities & 8 /* FileFolderCopy */);
}
exports.hasFileFolderCopyCapability = hasFileFolderCopyCapability;
function hasOpenReadWriteCloseCapability(provider) {
    return !!(provider.capabilities & 4 /* FileOpenReadWriteClose */);
}
exports.hasOpenReadWriteCloseCapability = hasOpenReadWriteCloseCapability;
function etag(stat) {
    if (typeof stat.size !== 'number' || typeof stat.mtime !== 'number') {
        return undefined;
    }
    return stat.mtime.toString(29) + stat.size.toString(31);
}
exports.etag = etag;
class FileSystemProviderError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
exports.FileSystemProviderError = FileSystemProviderError;
function createFileSystemProviderError(error, code) {
    const providerError = new FileSystemProviderError(error.toString(), code);
    markAsFileSystemProviderError(providerError, code);
    return providerError;
}
exports.createFileSystemProviderError = createFileSystemProviderError;
function markAsFileSystemProviderError(error, code) {
    error.name = code ? `${code} (FileSystemError)` : `FileSystemError`;
    return error;
}
exports.markAsFileSystemProviderError = markAsFileSystemProviderError;
function toFileSystemProviderErrorCode(error) {
    // Guard against abuse
    if (!error) {
        return interfaces_1.FileSystemProviderErrorCode.Unknown;
    }
    // FileSystemProviderError comes with the code
    if (error instanceof FileSystemProviderError) {
        return error.code;
    }
    // Any other error, check for name match by assuming that the error
    // went through the markAsFileSystemProviderError() method
    const match = /^(.+) \(FileSystemError\)$/.exec(error.name);
    if (!match) {
        return interfaces_1.FileSystemProviderErrorCode.Unknown;
    }
    switch (match[1]) {
        case interfaces_1.FileSystemProviderErrorCode.FileExists: return interfaces_1.FileSystemProviderErrorCode.FileExists;
        case interfaces_1.FileSystemProviderErrorCode.FileIsADirectory: return interfaces_1.FileSystemProviderErrorCode.FileIsADirectory;
        case interfaces_1.FileSystemProviderErrorCode.FileNotADirectory: return interfaces_1.FileSystemProviderErrorCode.FileNotADirectory;
        case interfaces_1.FileSystemProviderErrorCode.FileNotFound: return interfaces_1.FileSystemProviderErrorCode.FileNotFound;
        case interfaces_1.FileSystemProviderErrorCode.NoPermissions: return interfaces_1.FileSystemProviderErrorCode.NoPermissions;
        case interfaces_1.FileSystemProviderErrorCode.Unavailable: return interfaces_1.FileSystemProviderErrorCode.Unavailable;
    }
    return interfaces_1.FileSystemProviderErrorCode.Unknown;
}
exports.toFileSystemProviderErrorCode = toFileSystemProviderErrorCode;
function toFileOperationResult(error) {
    // FileSystemProviderError comes with the result already
    if (error instanceof FileOperationError) {
        return error.fileOperationResult;
    }
    // Otherwise try to find from code
    switch (toFileSystemProviderErrorCode(error)) {
        case interfaces_1.FileSystemProviderErrorCode.FileNotFound:
            return "FILE_NOT_FOUND" /* FILE_NOT_FOUND */;
        case interfaces_1.FileSystemProviderErrorCode.FileIsADirectory:
            return "FILE_IS_DIRECTORY" /* FILE_IS_DIRECTORY */;
        case interfaces_1.FileSystemProviderErrorCode.NoPermissions:
            return "FILE_PERMISSION_DENIED" /* FILE_PERMISSION_DENIED */;
        case interfaces_1.FileSystemProviderErrorCode.FileExists:
            return "FILE_MOVE_CONFLICT" /* FILE_MOVE_CONFLICT */;
        case interfaces_1.FileSystemProviderErrorCode.FileNotADirectory:
        default:
            return "FILE_OTHER_ERROR" /* FILE_OTHER_ERROR */;
    }
}
exports.toFileOperationResult = toFileOperationResult;
//# sourceMappingURL=files.js.map
"use strict";
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBufferOrReadable = exports.TextSnapshotReadable = exports.stringToSnapshot = exports.snapshotToString = exports.TextFileOperationError = void 0;
const buffer_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/buffer");
const files_1 = require("./files");
const types_1 = require("@vscode-alt/monaco-editor/esm/vs/base/common/types");
class TextFileOperationError extends files_1.FileOperationError {
    constructor(message, textFileOperationResult, options) {
        super(message, "FILE_OTHER_ERROR" /* FILE_OTHER_ERROR */);
        this.textFileOperationResult = textFileOperationResult;
        this.options = options;
    }
    static isTextFileOperationError(obj) {
        return obj instanceof Error && !types_1.isUndefinedOrNull(obj.textFileOperationResult);
    }
}
exports.TextFileOperationError = TextFileOperationError;
/**
 * Helper method to convert a snapshot into its full string form.
 */
function snapshotToString(snapshot) {
    const chunks = [];
    let chunk;
    while (typeof (chunk = snapshot.read()) === 'string') {
        chunks.push(chunk);
    }
    return chunks.join('');
}
exports.snapshotToString = snapshotToString;
function stringToSnapshot(value) {
    let done = false;
    return {
        read() {
            if (!done) {
                done = true;
                return value;
            }
            return null;
        }
    };
}
exports.stringToSnapshot = stringToSnapshot;
class TextSnapshotReadable {
    constructor(snapshot, preamble) {
        this.snapshot = snapshot;
        this.preamble = preamble;
    }
    read() {
        let value = this.snapshot.read();
        // Handle preamble if provided
        if (!this.preambleHandled) {
            this.preambleHandled = true;
            // Handle preamble if provided
            if (typeof this.preamble === 'string') {
                if (typeof value === 'string') {
                    value = this.preamble + value;
                }
                else {
                    value = this.preamble;
                }
            }
        }
        if (typeof value === 'string') {
            return buffer_1.VSBuffer.fromString(value);
        }
        return null;
    }
}
exports.TextSnapshotReadable = TextSnapshotReadable;
function toBufferOrReadable(value) {
    if (typeof value === 'undefined') {
        return undefined;
    }
    if (typeof value === 'string') {
        return buffer_1.VSBuffer.fromString(value);
    }
    return new TextSnapshotReadable(value);
}
exports.toBufferOrReadable = toBufferOrReadable;
//# sourceMappingURL=textfiles.js.map
import { URI } from '@vscode-alt/monaco-editor/esm/vs/base/common/uri';
import { Event } from '@vscode-alt/monaco-editor/esm/vs/base/common/event';
import { IDisposable } from '@vscode-alt/monaco-editor/esm/vs/base/common/lifecycle';
import { IFiles_Stat as IStat, IFileOpenOptions as FileOpenOptions, IFileChange } from './generated-models';
import { FileDeleteOptions, FileOverwriteOptions, FileWriteOptions, IWatchOptions } from './type-redirects';
export declare enum FileType {
    Unknown = 0,
    File = 1,
    Directory = 2,
    SymbolicLink = 64
}
export declare enum FileKind {
    FILE = 0,
    FOLDER = 1,
    ROOT_FOLDER = 2
}
export interface IEncodingOverride {
    resource: URI;
    encoding: string;
}
/**
 * Possible changes that can occur to a file.
 */
export declare enum FileChangeType {
    UPDATED = "UPDATED",
    ADDED = "ADDED",
    DELETED = "DELETED"
}
export declare enum HotExitConfiguration {
    OFF = "off",
    ON_EXIT = "onExit",
    ON_EXIT_AND_WINDOW_CLOSE = "onExitAndWindowClose"
}
export interface IProgress<T> {
    report(item: T): void;
}
export declare const enum FileSystemProviderCapabilities {
    FileReadWrite = 2,
    FileOpenReadWriteClose = 4,
    FileFolderCopy = 8,
    PathCaseSensitive = 1024,
    Readonly = 2048,
    Trash = 4096
}
export declare enum FileSystemProviderErrorCode {
    FileExists = "EntryExists",
    FileNotFound = "EntryNotFound",
    FileNotADirectory = "EntryNotADirectory",
    FileIsADirectory = "EntryIsADirectory",
    NoPermissions = "NoPermissions",
    Unavailable = "Unavailable",
    Unknown = "Unknown"
}
export interface IFileSystemProviderActivationEvent {
    scheme: string;
    join(promise: Promise<void>): void;
}
export interface IFileSystemProviderRegistrationEvent {
    added: boolean;
    scheme: string;
    provider?: IFileSystemProvider;
}
export interface IFileSystemProvider {
    readonly capabilities: FileSystemProviderCapabilities;
    readonly onDidChangeCapabilities: Event<void>;
    readonly onDidErrorOccur?: Event<Error>;
    readonly onDidChangeFile: Event<IFileChange[]>;
    watch(resource: URI, opts: IWatchOptions): IDisposable;
    stat(resource: URI): Promise<IStat>;
    mkdir(resource: URI): Promise<void>;
    readdir(resource: URI): Promise<[string, FileType][]>;
    delete(resource: URI, opts: FileDeleteOptions): Promise<void>;
    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
    copy?(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
    readFile?(resource: URI): Promise<Uint8Array>;
    writeFile?(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;
    open?(resource: URI, opts: FileOpenOptions): Promise<number>;
    close?(fd: number): Promise<void>;
    read?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
    write?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
}
export interface IFileSystemProviderWithFileReadWriteCapability extends IFileSystemProvider {
    readFile(resource: URI): Promise<Uint8Array>;
    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;
}
export interface IFileSystemProviderWithOpenReadWriteCloseCapability extends IFileSystemProvider {
    open(resource: URI, opts: FileOpenOptions): Promise<number>;
    close(fd: number): Promise<void>;
    read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
}
export interface IFileSystemProviderWithFileFolderCopyCapability extends IFileSystemProvider {
    copy(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadStreamTextFileDocument = exports.FileOperationDocument = exports.FileDataDocument = exports.UntitledResourcesDocument = exports.FileStreamContent_WSDocument = exports.TextContent_WSDocument = exports.SelectedResourceDocument = exports.ResolveUntitledFileContentDocument = exports.ResolveFileContentDocument = exports.FileStat_WSDocument = exports.FileContent_WSDocument = exports.FileExists_WSDocument = exports.FileExistsDocument = exports.EditorStateDocument = exports.ChangedContentDocument = exports.WatchFile_WSDocument = exports.WatchFileDocument = exports.UpdateSelectedResourceDocument = exports.UpdateFileContent_WSDocument = exports.UpdateEditorStateDocument = exports.UpdateContentByChangesDocument = exports.UpdateFileDirtyStateDocument = exports.UnwatchFile_WSDocument = exports.UnwatchFileDocument = exports.SetTreeDataDocument = exports.SetEncodingDocument = exports.SaveFileChanges_WSDocument = exports.SaveFileAsDocument = exports.SaveFile_WSDocument = exports.SaveFileDocument = exports.SaveDelayFileChanges_WSDocument = exports.RenameFile_WSDocument = exports.RemoveChangedEventDocument = exports.MoveFile_WSDocument = exports.LoadTreeDataDocument = exports.LoadFileWithContentDocument = exports.LoadFileContent_WSDocument = exports.LoadFile_WSDocument = exports.GetFilesTreeDataDocument = exports.GetEditorStateDocument = exports.FindFileStatDocument = exports.DeleteFile_WSDocument = exports.CreateUntitledFileDocument = exports.CreateFolder_WSDocument = exports.CreateFile_WSDocument = exports.CopyFile_WSDocument = exports.CanHandleResource_WSDocument = exports.UpdateErrorFileOnFileStatFragmentDoc = exports.UntitledFileStatFragmentDoc = exports.UntitledFileOnFileStatFragmentDoc = exports.TextFileOnFileStatLiteFragmentDoc = exports.TextFileOnFileStatFragmentDoc = exports.SelectedResourceFragmentDoc = exports.FilesTreeDataMiniFragmentDoc = exports.FilesTreeItemMiniFragmentDoc = exports.FilesTreeDataFragmentDoc = exports.FilesTreeItemFragmentDoc = exports.FileStatNestedChildFragmentDoc = exports.FileSelfStatFragmentDoc = exports.FileSaveConfigFragmentDoc = exports.FileParentChildRefFragmentDoc = exports.EditorStateFragmentDoc = exports.TextContentFragmentDoc = exports.FileContentFragmentDoc = exports.ChangesOnChangedEventFragmentDoc = exports.changedEventFragmentDoc = exports.ChangeDirtyStateOnFileStatFragmentDoc = exports.EditorsFileRefFragmentDoc = exports.IWorkspaceContextServiceAction = exports.ITextFileServiceAction = exports.ITextFileOperationResult = exports.ITabSizingType = exports.ITabCloseButtonType = exports.IStorageScope = exports.IStatusbarAlignment = exports.ISTATUSBAR_ITEM_ID = exports.ISideBySideEditor = exports.ISettingValueType = exports.IscmResourceGroups = exports.IscmProviders = exports.SaveReason = exports.IRunActionInWindowRequestFrom = exports.IReadyState = exports.IProvidedRemoteConnectionStates = exports.IOpenSideBySideDirection = exports.IOpenPositioningType = exports.IOpenDialogOptionsProperties = exports.IOpenContext = exports.INotificationViewItemLabelKind = exports.INotificationSeverity = exports.INotificationChangeType = exports.IMoleculerServiceName = exports.IMergeGroupMode = exports.IMenuId = exports.ILableFormatType = exports.IKeybindingSource = exports.HotExitConfiguration = exports.IGroupsOrder = exports.IGroupsArrangement = exports.IGroupOrientation = exports.IGroupLocation = exports.IGroupDirection = exports.IGraphqlCallType = exports.FileType = exports.IFileStateChange = exports.IFileServiceAction = exports.IFileOperationResult = exports.IFileOperation = exports.IFileModelState = exports.IFileLoadReason = exports.FileContentStatus = exports.FileChangeType = exports.IExtensionType = exports.IExtensionKind = exports.IEnvironmentServiceAction = exports.IEditorsOrder = exports.IEditorOpenPositioning = exports.IEditorActionType = exports.IEDITOR_INPUT_RESOURCE_TYPE_ID = exports.IEDITOR_INPUT_ID = exports.IEDITOR_ID = exports.IDevToolsOptionsMode = exports.IConfigurationTarget = exports.IConfigurationServiceAction = exports.IConfigurationScope = exports.IcommentThread = exports.ICloseDirection = exports.IAutoSaveConfigurationType = void 0;
const files_1 = require("./files");
Object.defineProperty(exports, "FileChangeType", { enumerable: true, get: function () { return files_1.FileChangeType; } });
const files_2 = require("./files");
Object.defineProperty(exports, "HotExitConfiguration", { enumerable: true, get: function () { return files_2.HotExitConfiguration; } });
const textfiles_1 = require("./textfiles");
Object.defineProperty(exports, "SaveReason", { enumerable: true, get: function () { return textfiles_1.SaveReason; } });
const textfiles_2 = require("./textfiles");
Object.defineProperty(exports, "FileContentStatus", { enumerable: true, get: function () { return textfiles_2.FileContentStatus; } });
const files_3 = require("./files");
Object.defineProperty(exports, "FileType", { enumerable: true, get: function () { return files_3.FileType; } });
const graphql_tag_1 = require("graphql-tag");
var IAutoSaveConfigurationType;
(function (IAutoSaveConfigurationType) {
    IAutoSaveConfigurationType["off"] = "off";
    IAutoSaveConfigurationType["afterDelay"] = "afterDelay";
    IAutoSaveConfigurationType["onFocusChange"] = "onFocusChange";
    IAutoSaveConfigurationType["onWindowChange"] = "onWindowChange";
})(IAutoSaveConfigurationType = exports.IAutoSaveConfigurationType || (exports.IAutoSaveConfigurationType = {}));
;
var ICloseDirection;
(function (ICloseDirection) {
    ICloseDirection["LEFT"] = "LEFT";
    ICloseDirection["RIGHT"] = "RIGHT";
})(ICloseDirection = exports.ICloseDirection || (exports.ICloseDirection = {}));
;
var IcommentThread;
(function (IcommentThread) {
    IcommentThread["editable"] = "editable";
})(IcommentThread = exports.IcommentThread || (exports.IcommentThread = {}));
;
/**
 * A configuration settings can have one of the following possible scopes.
 * Configuration scopes determine when a settings is available to the user through the Settings editor and
 * whether the setting is applicable. If no scope is declared, the default is `window`.
 */
var IConfigurationScope;
(function (IConfigurationScope) {
    /** Application specific configuration, which can be configured only in local user settings. */
    IConfigurationScope["APPLICATION"] = "APPLICATION";
    /** Machine specific configuration, which can be configured only in local and remote user settings. */
    IConfigurationScope["MACHINE"] = "MACHINE";
    /** Window specific configuration, which can be configured in the user or workspace settings. */
    IConfigurationScope["WINDOW"] = "WINDOW";
    /** Resource specific configuration, which can be configured in the user, workspace or folder settings. */
    IConfigurationScope["RESOURCE"] = "RESOURCE";
})(IConfigurationScope = exports.IConfigurationScope || (exports.IConfigurationScope = {}));
;
var IConfigurationServiceAction;
(function (IConfigurationServiceAction) {
    IConfigurationServiceAction["getConfigurationData"] = "getConfigurationData";
    IConfigurationServiceAction["reloadConfiguration"] = "reloadConfiguration";
    IConfigurationServiceAction["onDidChangeConfiguration"] = "onDidChangeConfiguration";
    IConfigurationServiceAction["updateValue"] = "updateValue";
})(IConfigurationServiceAction = exports.IConfigurationServiceAction || (exports.IConfigurationServiceAction = {}));
;
var IConfigurationTarget;
(function (IConfigurationTarget) {
    /** Targets the user configuration file for writing. */
    IConfigurationTarget["USER"] = "USER";
    IConfigurationTarget["USER_LOCAL"] = "USER_LOCAL";
    IConfigurationTarget["USER_REMOTE"] = "USER_REMOTE";
    /** Targets the workspace configuration file for writing. This only works if a workspace is opened. */
    IConfigurationTarget["WORKSPACE"] = "WORKSPACE";
    /** Targets the folder configuration file for writing. This only works if a workspace is opened. */
    IConfigurationTarget["WORKSPACE_FOLDER"] = "WORKSPACE_FOLDER";
    IConfigurationTarget["DEFAULT"] = "DEFAULT";
    IConfigurationTarget["MEMORY"] = "MEMORY";
})(IConfigurationTarget = exports.IConfigurationTarget || (exports.IConfigurationTarget = {}));
;
var IDevToolsOptionsMode;
(function (IDevToolsOptionsMode) {
    IDevToolsOptionsMode["right"] = "right";
    IDevToolsOptionsMode["botton"] = "botton";
    IDevToolsOptionsMode["undocked"] = "undocked";
    IDevToolsOptionsMode["detach"] = "detach";
})(IDevToolsOptionsMode = exports.IDevToolsOptionsMode || (exports.IDevToolsOptionsMode = {}));
;
var IEDITOR_ID;
(function (IEDITOR_ID) {
    IEDITOR_ID["TEXT_RESOURCE_EDITOR"] = "TEXT_RESOURCE_EDITOR";
    IEDITOR_ID["TEXT_DIFF_EDITOR"] = "TEXT_DIFF_EDITOR";
    IEDITOR_ID["BINARY_DIFF_EDITOR"] = "BINARY_DIFF_EDITOR";
    IEDITOR_ID["SIDE_BY_SIDE_EDITOR"] = "SIDE_BY_SIDE_EDITOR";
})(IEDITOR_ID = exports.IEDITOR_ID || (exports.IEDITOR_ID = {}));
;
var IEDITOR_INPUT_ID;
(function (IEDITOR_INPUT_ID) {
    IEDITOR_INPUT_ID["DATA_URI_EDITOR_INPUT"] = "DATA_URI_EDITOR_INPUT";
    IEDITOR_INPUT_ID["DIFF_EDITOR_INPUT"] = "DIFF_EDITOR_INPUT";
    IEDITOR_INPUT_ID["FILE_EDITOR_INPUT"] = "FILE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["KEYBINDINGS_EDITOR_INPUT"] = "KEYBINDINGS_EDITOR_INPUT";
    IEDITOR_INPUT_ID["RESOURCE_EDITOR_INPUT"] = "RESOURCE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["SIDE_BY_SIDE_EDITOR_INPUT"] = "SIDE_BY_SIDE_EDITOR_INPUT";
    IEDITOR_INPUT_ID["file"] = "file";
})(IEDITOR_INPUT_ID = exports.IEDITOR_INPUT_ID || (exports.IEDITOR_INPUT_ID = {}));
;
var IEDITOR_INPUT_RESOURCE_TYPE_ID;
(function (IEDITOR_INPUT_RESOURCE_TYPE_ID) {
    /** If the resource is `file` */
    IEDITOR_INPUT_RESOURCE_TYPE_ID["file"] = "file";
})(IEDITOR_INPUT_RESOURCE_TYPE_ID = exports.IEDITOR_INPUT_RESOURCE_TYPE_ID || (exports.IEDITOR_INPUT_RESOURCE_TYPE_ID = {}));
;
var IEditorActionType;
(function (IEditorActionType) {
    IEditorActionType["init"] = "init";
    IEditorActionType["add"] = "add";
    IEditorActionType["remove"] = "remove";
    IEditorActionType["removeAll"] = "removeAll";
    IEditorActionType["activateEditor"] = "activateEditor";
})(IEditorActionType = exports.IEditorActionType || (exports.IEditorActionType = {}));
;
var IEditorOpenPositioning;
(function (IEditorOpenPositioning) {
    IEditorOpenPositioning["LEFT"] = "LEFT";
    IEditorOpenPositioning["RIGHT"] = "RIGHT";
    IEditorOpenPositioning["FIRST"] = "FIRST";
    IEditorOpenPositioning["LAST"] = "LAST";
})(IEditorOpenPositioning = exports.IEditorOpenPositioning || (exports.IEditorOpenPositioning = {}));
;
var IEditorsOrder;
(function (IEditorsOrder) {
    /** Editors sorted by most recent activity (most recent active first) */
    IEditorsOrder["MOST_RECENTLY_ACTIVE"] = "MOST_RECENTLY_ACTIVE";
    /** Editors sorted by sequential order */
    IEditorsOrder["SEQUENTIAL"] = "SEQUENTIAL";
})(IEditorsOrder = exports.IEditorsOrder || (exports.IEditorsOrder = {}));
;
var IEnvironmentServiceAction;
(function (IEnvironmentServiceAction) {
    IEnvironmentServiceAction["environment"] = "environment";
})(IEnvironmentServiceAction = exports.IEnvironmentServiceAction || (exports.IEnvironmentServiceAction = {}));
;
var IExtensionKind;
(function (IExtensionKind) {
    IExtensionKind["ui"] = "ui";
    IExtensionKind["workspace"] = "workspace";
})(IExtensionKind = exports.IExtensionKind || (exports.IExtensionKind = {}));
;
var IExtensionType;
(function (IExtensionType) {
    IExtensionType["System"] = "System";
    IExtensionType["User"] = "User";
})(IExtensionType = exports.IExtensionType || (exports.IExtensionType = {}));
;
var IFileLoadReason;
(function (IFileLoadReason) {
    IFileLoadReason["EDITOR"] = "EDITOR";
    IFileLoadReason["REFERENCE"] = "REFERENCE";
    IFileLoadReason["OTHER"] = "OTHER";
})(IFileLoadReason = exports.IFileLoadReason || (exports.IFileLoadReason = {}));
;
/** same as ModelState as in vscode */
var IFileModelState;
(function (IFileModelState) {
    /**  A model is saved.  */
    IFileModelState["SAVED"] = "SAVED";
    /**  A model is dirty.  */
    IFileModelState["DIRTY"] = "DIRTY";
    /**  A model is transitioning from dirty to saved.  */
    IFileModelState["PENDING_SAVE"] = "PENDING_SAVE";
    /**
     * A model is in conflict mode when changes cannot be saved because the
     * underlying file has changed. Models in conflict mode are always dirty.
     */
    IFileModelState["CONFLICT"] = "CONFLICT";
    /**  A model is in orphan state when the underlying file has been deleted.  */
    IFileModelState["ORPHAN"] = "ORPHAN";
    /**
     * Any error that happens during a save that is not causing the CONFLICT state.
     * Models in error mode are always dirty.
     */
    IFileModelState["ERROR"] = "ERROR";
    /**  Loading  */
    IFileModelState["PENDING_LOAD"] = "PENDING_LOAD";
    /**  Unkown  */
    IFileModelState["UNKNOWN"] = "UNKNOWN";
})(IFileModelState = exports.IFileModelState || (exports.IFileModelState = {}));
;
var IFileOperation;
(function (IFileOperation) {
    IFileOperation["CREATE"] = "CREATE";
    IFileOperation["DELETE"] = "DELETE";
    IFileOperation["MOVE"] = "MOVE";
    IFileOperation["COPY"] = "COPY";
})(IFileOperation = exports.IFileOperation || (exports.IFileOperation = {}));
;
var IFileOperationResult;
(function (IFileOperationResult) {
    IFileOperationResult["FILE_IS_DIRECTORY"] = "FILE_IS_DIRECTORY";
    IFileOperationResult["FILE_NOT_FOUND"] = "FILE_NOT_FOUND";
    IFileOperationResult["FILE_NOT_MODIFIED_SINCE"] = "FILE_NOT_MODIFIED_SINCE";
    IFileOperationResult["FILE_MODIFIED_SINCE"] = "FILE_MODIFIED_SINCE";
    IFileOperationResult["FILE_MOVE_CONFLICT"] = "FILE_MOVE_CONFLICT";
    IFileOperationResult["FILE_READ_ONLY"] = "FILE_READ_ONLY";
    IFileOperationResult["FILE_PERMISSION_DENIED"] = "FILE_PERMISSION_DENIED";
    IFileOperationResult["FILE_TOO_LARGE"] = "FILE_TOO_LARGE";
    IFileOperationResult["FILE_INVALID_PATH"] = "FILE_INVALID_PATH";
    IFileOperationResult["FILE_EXCEED_MEMORY_LIMIT"] = "FILE_EXCEED_MEMORY_LIMIT";
    IFileOperationResult["FILE_OTHER_ERROR"] = "FILE_OTHER_ERROR";
})(IFileOperationResult = exports.IFileOperationResult || (exports.IFileOperationResult = {}));
;
var IFileServiceAction;
(function (IFileServiceAction) {
    IFileServiceAction["onDidChangeFileSystemProviderRegistrations"] = "onDidChangeFileSystemProviderRegistrations";
    IFileServiceAction["onWillActivateFileSystemProvider"] = "onWillActivateFileSystemProvider";
    IFileServiceAction["registerProvider"] = "registerProvider";
    IFileServiceAction["onError"] = "onError";
    IFileServiceAction["activateProvder"] = "activateProvder";
    IFileServiceAction["canHandleResource"] = "canHandleResource";
    IFileServiceAction["hasCapability"] = "hasCapability";
    IFileServiceAction["onFileChanges"] = "onFileChanges";
    IFileServiceAction["onAfterOperation"] = "onAfterOperation";
    IFileServiceAction["resolve"] = "resolve";
    IFileServiceAction["resolveAll"] = "resolveAll";
    IFileServiceAction["exists"] = "exists";
    IFileServiceAction["readFile"] = "readFile";
    IFileServiceAction["readFileStream"] = "readFileStream";
    IFileServiceAction["writeFile"] = "writeFile";
    IFileServiceAction["move"] = "move";
    IFileServiceAction["copy"] = "copy";
    IFileServiceAction["createFile"] = "createFile";
    IFileServiceAction["createFolder"] = "createFolder";
    IFileServiceAction["del"] = "del";
    IFileServiceAction["watch"] = "watch";
    IFileServiceAction["unwatch"] = "unwatch";
    IFileServiceAction["dispose"] = "dispose";
})(IFileServiceAction = exports.IFileServiceAction || (exports.IFileServiceAction = {}));
;
var IFileStateChange;
(function (IFileStateChange) {
    IFileStateChange["DIRTY"] = "DIRTY";
    IFileStateChange["SAVING"] = "SAVING";
    IFileStateChange["SAVE_ERROR"] = "SAVE_ERROR";
    IFileStateChange["SAVED"] = "SAVED";
    IFileStateChange["REVERTED"] = "REVERTED";
    IFileStateChange["ENCODING"] = "ENCODING";
    IFileStateChange["CONTENT_CHANGE"] = "CONTENT_CHANGE";
    IFileStateChange["ORPHANED_CHANGE"] = "ORPHANED_CHANGE";
})(IFileStateChange = exports.IFileStateChange || (exports.IFileStateChange = {}));
;
var IGraphqlCallType;
(function (IGraphqlCallType) {
    IGraphqlCallType["mutation"] = "mutation";
    IGraphqlCallType["query"] = "query";
})(IGraphqlCallType = exports.IGraphqlCallType || (exports.IGraphqlCallType = {}));
;
var IGroupDirection;
(function (IGroupDirection) {
    IGroupDirection["DOWN"] = "DOWN";
    IGroupDirection["LEFT"] = "LEFT";
    IGroupDirection["RIGHT"] = "RIGHT";
    IGroupDirection["UP"] = "UP";
})(IGroupDirection = exports.IGroupDirection || (exports.IGroupDirection = {}));
;
var IGroupLocation;
(function (IGroupLocation) {
    IGroupLocation["FIRST"] = "FIRST";
    IGroupLocation["LAST"] = "LAST";
    IGroupLocation["NEXT"] = "NEXT";
    IGroupLocation["PREVIOUS"] = "PREVIOUS";
})(IGroupLocation = exports.IGroupLocation || (exports.IGroupLocation = {}));
;
var IGroupOrientation;
(function (IGroupOrientation) {
    IGroupOrientation["HORIZONTAL"] = "HORIZONTAL";
    IGroupOrientation["VERTICAL"] = "VERTICAL";
})(IGroupOrientation = exports.IGroupOrientation || (exports.IGroupOrientation = {}));
;
var IGroupsArrangement;
(function (IGroupsArrangement) {
    /** Size all groups evenly. */
    IGroupsArrangement["EVEN"] = "EVEN";
    /**
     * Make the current active group consume the maximum
     * amount of space possible.
     */
    IGroupsArrangement["MINIMIZE_OTHERS"] = "MINIMIZE_OTHERS";
})(IGroupsArrangement = exports.IGroupsArrangement || (exports.IGroupsArrangement = {}));
;
var IGroupsOrder;
(function (IGroupsOrder) {
    /** Groups sorted by creation order (oldest one first) */
    IGroupsOrder["CREATION_TIME"] = "CREATION_TIME";
    /** Groups sorted by grid widget order */
    IGroupsOrder["GRID_APPEARANCE"] = "GRID_APPEARANCE";
    /** Groups sorted by most recent activity (most recent active first) */
    IGroupsOrder["MOST_RECENTLY_ACTIVE"] = "MOST_RECENTLY_ACTIVE";
})(IGroupsOrder = exports.IGroupsOrder || (exports.IGroupsOrder = {}));
;
var IKeybindingSource;
(function (IKeybindingSource) {
    IKeybindingSource["Default"] = "Default";
    IKeybindingSource["User"] = "User";
})(IKeybindingSource = exports.IKeybindingSource || (exports.IKeybindingSource = {}));
;
var ILableFormatType;
(function (ILableFormatType) {
    ILableFormatType["default"] = "default";
    ILableFormatType["short"] = "short";
    ILableFormatType["medium"] = "medium";
    ILableFormatType["long"] = "long";
})(ILableFormatType = exports.ILableFormatType || (exports.ILableFormatType = {}));
;
var IMenuId;
(function (IMenuId) {
    IMenuId["CommandPalette"] = "CommandPalette";
    IMenuId["DebugBreakpointsContext"] = "DebugBreakpointsContext";
    IMenuId["DebugCallStackContext"] = "DebugCallStackContext";
    IMenuId["DebugConsoleContext"] = "DebugConsoleContext";
    IMenuId["DebugVariablesContext"] = "DebugVariablesContext";
    IMenuId["DebugWatchContext"] = "DebugWatchContext";
    IMenuId["DebugTooBar"] = "DebugTooBar";
    IMenuId["EditorContext"] = "EditorContext";
    IMenuId["EditorTitle"] = "EditorTitle";
    IMenuId["EditorTitleContext"] = "EditorTitleContext";
    IMenuId["EmptyEditorGroupContext"] = "EmptyEditorGroupContext";
    IMenuId["ExplorerContext"] = "ExplorerContext";
    IMenuId["MenubarAppearanceMenu"] = "MenubarAppearanceMenu";
    IMenuId["MenubarDebugMenu"] = "MenubarDebugMenu";
    IMenuId["MenubarEditMenu"] = "MenubarEditMenu";
    IMenuId["MenubarFileMenu"] = "MenubarFileMenu";
    IMenuId["MenubarGoMenu"] = "MenubarGoMenu";
    IMenuId["MenubarNewBreakpointMenu"] = "MenubarNewBreakpointMenu";
    IMenuId["MenubarPreferencesMenu"] = "MenubarPreferencesMenu";
    IMenuId["MenubarRecentMenu"] = "MenubarRecentMenu";
    IMenuId["MenubarSelectionMenu"] = "MenubarSelectionMenu";
    IMenuId["MenubarSwitchEditorMenu"] = "MenubarSwitchEditorMenu";
    IMenuId["MenubarSwitchGroupMenu"] = "MenubarSwitchGroupMenu";
    IMenuId["MenubarTerminalMenu"] = "MenubarTerminalMenu";
    IMenuId["MenubarViewMenu"] = "MenubarViewMenu";
    IMenuId["OpenEditorContext"] = "OpenEditorContext";
    IMenuId["ProblemsPanelContext"] = "ProblemsPanelContext";
    IMenuId["SCMChangeContext"] = "SCMChangeContext";
    IMenuId["SCMResourceContext"] = "SCMResourceContext";
    IMenuId["SCMResourceGroupContext"] = "SCMResourceGroupContext";
    IMenuId["SCMResourceControl"] = "SCMResourceControl";
    IMenuId["SCMTitle"] = "SCMTitle";
    IMenuId["SearchContext"] = "SearchContext";
    IMenuId["StatusBarWindowIndicatorMenu"] = "StatusBarWindowIndicatorMenu";
    IMenuId["TouchBarContext"] = "TouchBarContext";
    IMenuId["ViewItemContext"] = "ViewItemContext";
    IMenuId["ViewTitle"] = "ViewTitle";
    IMenuId["CommentThreadTitle"] = "CommentThreadTitle";
    IMenuId["CommentThreadActions"] = "CommentThreadActions";
    IMenuId["CommentTitle"] = "CommentTitle";
    IMenuId["CommentActions"] = "CommentActions";
})(IMenuId = exports.IMenuId || (exports.IMenuId = {}));
;
var IMergeGroupMode;
(function (IMergeGroupMode) {
    IMergeGroupMode["COPY_EDITORS"] = "COPY_EDITORS";
    IMergeGroupMode["MOVE_EDITORS"] = "MOVE_EDITORS";
})(IMergeGroupMode = exports.IMergeGroupMode || (exports.IMergeGroupMode = {}));
;
/**  All Moleculer Topic names are extended from this. */
var IMoleculerServiceName;
(function (IMoleculerServiceName) {
    IMoleculerServiceName["ConfigurationClientService"] = "ConfigurationClientService";
    IMoleculerServiceName["ConfigurationService"] = "ConfigurationService";
    IMoleculerServiceName["EnvironmentService"] = "EnvironmentService";
    IMoleculerServiceName["FileClientService"] = "FileClientService";
    IMoleculerServiceName["FileService"] = "FileService";
    IMoleculerServiceName["LifecycleService"] = "LifecycleService";
    IMoleculerServiceName["TextFileClientService"] = "TextFileClientService";
    IMoleculerServiceName["TextFileService"] = "TextFileService";
    IMoleculerServiceName["WorkbenchLifecycleEmitter"] = "WorkbenchLifecycleEmitter";
    IMoleculerServiceName["WorkbenchLifecycleListener"] = "WorkbenchLifecycleListener";
    IMoleculerServiceName["WorkspaceClientContextService"] = "WorkspaceClientContextService";
    IMoleculerServiceName["WorkspaceContextService"] = "WorkspaceContextService";
    IMoleculerServiceName["WorkspaceEventually"] = "WorkspaceEventually";
    /**  Following services will help to wait other services  */
    IMoleculerServiceName["WorkspaceReady"] = "WorkspaceReady";
    IMoleculerServiceName["WorkspaceRestore"] = "WorkspaceRestore";
    IMoleculerServiceName["dummy"] = "dummy";
})(IMoleculerServiceName = exports.IMoleculerServiceName || (exports.IMoleculerServiceName = {}));
;
var INotificationChangeType;
(function (INotificationChangeType) {
    INotificationChangeType["ADD"] = "ADD";
    INotificationChangeType["CHANGE"] = "CHANGE";
    INotificationChangeType["REMOVE"] = "REMOVE";
})(INotificationChangeType = exports.INotificationChangeType || (exports.INotificationChangeType = {}));
;
var INotificationSeverity;
(function (INotificationSeverity) {
    INotificationSeverity["Ignore"] = "Ignore";
    INotificationSeverity["Info"] = "Info";
    INotificationSeverity["Warning"] = "Warning";
    INotificationSeverity["Error"] = "Error";
})(INotificationSeverity = exports.INotificationSeverity || (exports.INotificationSeverity = {}));
;
var INotificationViewItemLabelKind;
(function (INotificationViewItemLabelKind) {
    INotificationViewItemLabelKind["SEVERITY"] = "SEVERITY";
    INotificationViewItemLabelKind["MESSAGE"] = "MESSAGE";
    INotificationViewItemLabelKind["ACTIONS"] = "ACTIONS";
    INotificationViewItemLabelKind["PROGRESS"] = "PROGRESS";
})(INotificationViewItemLabelKind = exports.INotificationViewItemLabelKind || (exports.INotificationViewItemLabelKind = {}));
;
var IOpenContext;
(function (IOpenContext) {
    /** opening when running from the command line */
    IOpenContext["CLI"] = "CLI";
    /** macOS only: opening from the dock (also when opening files to a running instance from desktop) */
    IOpenContext["DOCK"] = "DOCK";
    /** opening from the main application window */
    IOpenContext["MENU"] = "MENU";
    /** opening from a file or folder dialog */
    IOpenContext["DIALOG"] = "DIALOG";
    /** opening from the OS's UI  */
    IOpenContext["DESKTOP"] = "DESKTOP";
    /** opening through the API */
    IOpenContext["API"] = "API";
})(IOpenContext = exports.IOpenContext || (exports.IOpenContext = {}));
;
var IOpenDialogOptionsProperties;
(function (IOpenDialogOptionsProperties) {
    IOpenDialogOptionsProperties["openFile"] = "openFile";
    IOpenDialogOptionsProperties["openDirectory"] = "openDirectory";
    IOpenDialogOptionsProperties["multiSelections"] = "multiSelections";
    IOpenDialogOptionsProperties["showHiddenFiles"] = "showHiddenFiles";
    IOpenDialogOptionsProperties["createDirectory"] = "createDirectory";
    IOpenDialogOptionsProperties["promptToCreate"] = "promptToCreate";
    IOpenDialogOptionsProperties["noResolveAliases"] = "noResolveAliases";
    IOpenDialogOptionsProperties["treatPackageAsDirectory"] = "treatPackageAsDirectory";
})(IOpenDialogOptionsProperties = exports.IOpenDialogOptionsProperties || (exports.IOpenDialogOptionsProperties = {}));
;
var IOpenPositioningType;
(function (IOpenPositioningType) {
    IOpenPositioningType["left"] = "left";
    IOpenPositioningType["right"] = "right";
    IOpenPositioningType["first"] = "first";
    IOpenPositioningType["last"] = "last";
})(IOpenPositioningType = exports.IOpenPositioningType || (exports.IOpenPositioningType = {}));
;
var IOpenSideBySideDirection;
(function (IOpenSideBySideDirection) {
    IOpenSideBySideDirection["right"] = "right";
    IOpenSideBySideDirection["down"] = "down";
})(IOpenSideBySideDirection = exports.IOpenSideBySideDirection || (exports.IOpenSideBySideDirection = {}));
;
var IProvidedRemoteConnectionStates;
(function (IProvidedRemoteConnectionStates) {
    IProvidedRemoteConnectionStates["initializing"] = "initializing";
    IProvidedRemoteConnectionStates["disconnected"] = "disconnected";
    IProvidedRemoteConnectionStates["connected"] = "connected";
})(IProvidedRemoteConnectionStates = exports.IProvidedRemoteConnectionStates || (exports.IProvidedRemoteConnectionStates = {}));
;
var IReadyState;
(function (IReadyState) {
    /** This window has  not loaded any HTML yet */
    IReadyState["NONE"] = "NONE";
    /** This window is loading HTML */
    IReadyState["LOADING"] = "LOADING";
    /** This window is navigating to another HTML */
    IReadyState["NAVIGATING"] = "NAVIGATING";
    /** This window is done loading HTML */
    IReadyState["READY"] = "READY";
})(IReadyState = exports.IReadyState || (exports.IReadyState = {}));
;
var IRunActionInWindowRequestFrom;
(function (IRunActionInWindowRequestFrom) {
    IRunActionInWindowRequestFrom["menu"] = "menu";
    IRunActionInWindowRequestFrom["touchbar"] = "touchbar";
    IRunActionInWindowRequestFrom["mouse"] = "mouse";
})(IRunActionInWindowRequestFrom = exports.IRunActionInWindowRequestFrom || (exports.IRunActionInWindowRequestFrom = {}));
;
var IscmProviders;
(function (IscmProviders) {
    IscmProviders["git"] = "git";
})(IscmProviders = exports.IscmProviders || (exports.IscmProviders = {}));
;
var IscmResourceGroups;
(function (IscmResourceGroups) {
    IscmResourceGroups["workingTree"] = "workingTree";
    IscmResourceGroups["merge"] = "merge";
    IscmResourceGroups["index"] = "index";
})(IscmResourceGroups = exports.IscmResourceGroups || (exports.IscmResourceGroups = {}));
;
var ISettingValueType;
(function (ISettingValueType) {
    ISettingValueType["Null"] = "Null";
    ISettingValueType["Enum"] = "Enum";
    ISettingValueType["String"] = "String";
    ISettingValueType["Integer"] = "Integer";
    ISettingValueType["Number"] = "Number";
    ISettingValueType["Boolean"] = "Boolean";
    ISettingValueType["Exclude"] = "Exclude";
    ISettingValueType["Complex"] = "Complex";
    ISettingValueType["NullableInteger"] = "NullableInteger";
    ISettingValueType["NullableNumber"] = "NullableNumber";
})(ISettingValueType = exports.ISettingValueType || (exports.ISettingValueType = {}));
;
var ISideBySideEditor;
(function (ISideBySideEditor) {
    /** Usually Right Side of the side-by-side editor */
    ISideBySideEditor["MASTER"] = "MASTER";
    /** Usually Left Side of the side-by-side editor */
    ISideBySideEditor["DETAILS"] = "DETAILS";
})(ISideBySideEditor = exports.ISideBySideEditor || (exports.ISideBySideEditor = {}));
;
var ISTATUSBAR_ITEM_ID;
(function (ISTATUSBAR_ITEM_ID) {
    ISTATUSBAR_ITEM_ID["TERMINAL"] = "TERMINAL";
    ISTATUSBAR_ITEM_ID["SELECTION_STATUS"] = "SELECTION_STATUS";
    ISTATUSBAR_ITEM_ID["INDENTATION_STATUS"] = "INDENTATION_STATUS";
    ISTATUSBAR_ITEM_ID["ENCODING_STATUS"] = "ENCODING_STATUS";
    ISTATUSBAR_ITEM_ID["EOL_STATUS"] = "EOL_STATUS";
    ISTATUSBAR_ITEM_ID["LANGUAGE_MODE_STATUS"] = "LANGUAGE_MODE_STATUS";
})(ISTATUSBAR_ITEM_ID = exports.ISTATUSBAR_ITEM_ID || (exports.ISTATUSBAR_ITEM_ID = {}));
;
var IStatusbarAlignment;
(function (IStatusbarAlignment) {
    IStatusbarAlignment["LEFT"] = "LEFT";
    IStatusbarAlignment["RIGHT"] = "RIGHT";
})(IStatusbarAlignment = exports.IStatusbarAlignment || (exports.IStatusbarAlignment = {}));
;
var IStorageScope;
(function (IStorageScope) {
    /** The stored data will be scoped to all workspaces of this domain. */
    IStorageScope["GLOBAL"] = "GLOBAL";
    /** The stored data will be scoped to the current workspace. */
    IStorageScope["WORKSPACE"] = "WORKSPACE";
})(IStorageScope = exports.IStorageScope || (exports.IStorageScope = {}));
;
var ITabCloseButtonType;
(function (ITabCloseButtonType) {
    ITabCloseButtonType["left"] = "left";
    ITabCloseButtonType["right"] = "right";
    ITabCloseButtonType["off"] = "off";
})(ITabCloseButtonType = exports.ITabCloseButtonType || (exports.ITabCloseButtonType = {}));
;
var ITabSizingType;
(function (ITabSizingType) {
    ITabSizingType["fit"] = "fit";
    ITabSizingType["shrink"] = "shrink";
})(ITabSizingType = exports.ITabSizingType || (exports.ITabSizingType = {}));
;
var ITextFileOperationResult;
(function (ITextFileOperationResult) {
    ITextFileOperationResult["FILE_IS_BINARY"] = "FILE_IS_BINARY";
})(ITextFileOperationResult = exports.ITextFileOperationResult || (exports.ITextFileOperationResult = {}));
;
var ITextFileServiceAction;
(function (ITextFileServiceAction) {
    ITextFileServiceAction["onWillMove"] = "onWillMove";
    ITextFileServiceAction["onAutoSaveConfigurationChange"] = "onAutoSaveConfigurationChange";
    ITextFileServiceAction["onFilesAssociationChange"] = "onFilesAssociationChange";
    ITextFileServiceAction["isHotExistEnabled"] = "isHotExistEnabled";
    ITextFileServiceAction["encoding"] = "encoding";
    ITextFileServiceAction["isDirty"] = "isDirty";
    ITextFileServiceAction["getDirty"] = "getDirty";
    ITextFileServiceAction["save"] = "save";
    ITextFileServiceAction["saveAs"] = "saveAs";
    ITextFileServiceAction["saveAll"] = "saveAll";
    ITextFileServiceAction["revert"] = "revert";
    ITextFileServiceAction["revertAll"] = "revertAll";
    ITextFileServiceAction["create"] = "create";
    ITextFileServiceAction["read"] = "read";
    ITextFileServiceAction["readStream"] = "readStream";
    ITextFileServiceAction["readStringStream"] = "readStringStream";
    ITextFileServiceAction["write"] = "write";
    ITextFileServiceAction["writeChunkWithDelay"] = "writeChunkWithDelay";
    ITextFileServiceAction["writeChunk"] = "writeChunk";
    ITextFileServiceAction["writeStream"] = "writeStream";
    ITextFileServiceAction["delete"] = "delete";
    ITextFileServiceAction["move"] = "move";
    ITextFileServiceAction["confirmSave"] = "confirmSave";
    ITextFileServiceAction["getAutoSaveMode"] = "getAutoSaveMode";
    ITextFileServiceAction["getAutoSaveConfiguration"] = "getAutoSaveConfiguration";
})(ITextFileServiceAction = exports.ITextFileServiceAction || (exports.ITextFileServiceAction = {}));
;
var IWorkspaceContextServiceAction;
(function (IWorkspaceContextServiceAction) {
    IWorkspaceContextServiceAction["getWorkspace"] = "getWorkspace";
    IWorkspaceContextServiceAction["onDidChangeWorkbenchState"] = "onDidChangeWorkbenchState";
    IWorkspaceContextServiceAction["onDidChangeWorkspaceName"] = "onDidChangeWorkspaceName";
    IWorkspaceContextServiceAction["onDidChangeWorkspaceFolders"] = "onDidChangeWorkspaceFolders";
    IWorkspaceContextServiceAction["addFolders"] = "addFolders";
    IWorkspaceContextServiceAction["removeFolders"] = "removeFolders";
    IWorkspaceContextServiceAction["updateFolders"] = "updateFolders";
})(IWorkspaceContextServiceAction = exports.IWorkspaceContextServiceAction || (exports.IWorkspaceContextServiceAction = {}));
;
exports.EditorsFileRefFragmentDoc = graphql_tag_1.default `
    fragment EditorsFileRef on FileStatWithMetadata {
  title: name
  resource
  name
  isDirectory
  isSymbolicLink
  isReadonly
  dirty
  size
  state @client
  preferredMode
  encoding
}
    `;
exports.ChangeDirtyStateOnFileStatFragmentDoc = graphql_tag_1.default `
    fragment ChangeDirtyStateOnFileStat on FileStatWithMetadata {
  dirty @client
}
    `;
exports.changedEventFragmentDoc = graphql_tag_1.default `
    fragment changedEvent on FileStatWithMetadata {
  changes @client
  eol @client
  versionId @client
  isUndoing @client
  isRedoing @client
  isFlush @client
}
    `;
exports.ChangesOnChangedEventFragmentDoc = graphql_tag_1.default `
    fragment ChangesOnChangedEvent on FileStatWithMetadata {
  changes @client
}
    `;
exports.FileContentFragmentDoc = graphql_tag_1.default `
    fragment FileContent on FileContent {
  resource
  name
  size
  mtime
  etag
  value
  isReadonly
}
    `;
exports.TextContentFragmentDoc = graphql_tag_1.default `
    fragment TextContent on TextFileContent {
  resource
  name
  size
  mtime
  etag
  value
  encoding
  isReadonly
}
    `;
exports.EditorStateFragmentDoc = graphql_tag_1.default `
    fragment EditorState on CodeEditorViewState {
  cursorState @client
  viewState @client
  contributionsState @client
}
    `;
exports.FileParentChildRefFragmentDoc = graphql_tag_1.default `
    fragment FileParentChildRef on FileStatWithMetadata {
  children @client {
    resource
  }
}
    `;
exports.FileSaveConfigFragmentDoc = graphql_tag_1.default `
    fragment FileSaveConfig on Configuration {
  files {
    autoSave
    autoSaveDelay
  }
}
    `;
exports.FileSelfStatFragmentDoc = graphql_tag_1.default `
    fragment FileSelfStat on FileStatWithMetadata {
  title: name
  resourcePath @client
  resource
  name
  isDirectory
  isSymbolicLink
  isReadonly
  size
  mtime
  etag
  expanded @client
  hasChildren @client
  dirty @client
  inConflictMode @client
  inOrphanMode @client
  inErrorMode @client
  inPendingSave @client
  preferredMode @client
  preferredEncoding @client
  encoding @client
  state @client
}
    `;
exports.FileStatNestedChildFragmentDoc = graphql_tag_1.default `
    fragment FileStatNestedChild on FileStatWithMetadata {
  children @client {
    ...FileSelfStat
    children @client {
      ...FileSelfStat
      children @client {
        ...FileSelfStat
        children @client {
          ...FileSelfStat
          children @client {
            ...FileSelfStat
            children @client {
              ...FileSelfStat
              children @client {
                ...FileSelfStat
                children @client {
                  ...FileSelfStat
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.FilesTreeItemFragmentDoc = graphql_tag_1.default `
    fragment FilesTreeItem on FileStatWithMetadata {
  title: name
  name
  resourcePath @client
  path
  mtime
  etag
  isDirectory
  hasChildren @client
  expanded @client
  size
}
    `;
exports.FilesTreeDataFragmentDoc = graphql_tag_1.default `
    fragment FilesTreeData on FileStatWithMetadata {
  ...FilesTreeItem
  children @client(always: true) {
    ...FilesTreeItem
    children @client(always: true) {
      ...FilesTreeItem
      children @client(always: true) {
        ...FilesTreeItem
        children @client(always: true) {
          ...FilesTreeItem
          children @client(always: true) {
            ...FilesTreeItem
            children @client(always: true) {
              ...FilesTreeItem
              children @client(always: true) {
                ...FilesTreeItem
                children @client(always: true) {
                  ...FilesTreeItem
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${exports.FilesTreeItemFragmentDoc}`;
exports.FilesTreeItemMiniFragmentDoc = graphql_tag_1.default `
    fragment FilesTreeItemMini on FileStatWithMetadata {
  expanded @client
}
    `;
exports.FilesTreeDataMiniFragmentDoc = graphql_tag_1.default `
    fragment FilesTreeDataMini on FileStatWithMetadata {
  ...FilesTreeItemMini
  children {
    ...FilesTreeItemMini
    children {
      ...FilesTreeItemMini
      children {
        ...FilesTreeItemMini
        children {
          ...FilesTreeItemMini
          children {
            ...FilesTreeItemMini
            children {
              ...FilesTreeItemMini
              children {
                ...FilesTreeItemMini
                children {
                  ...FilesTreeItemMini
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${exports.FilesTreeItemMiniFragmentDoc}`;
exports.SelectedResourceFragmentDoc = graphql_tag_1.default `
    fragment SelectedResource on Context {
  resource
  isFileSystemResource
}
    `;
exports.TextFileOnFileStatFragmentDoc = graphql_tag_1.default `
    fragment TextFileOnFileStat on FileStatWithMetadata {
  resource
  name
  mtime
  etag
  size
  isReadonly
  contentEncoding: encoding
  dirty @client
  inConflictMode @client
  inOrphanMode @client
  inErrorMode @client
  inPendingSave @client
  versionId @client
  preferredMode @client
  preferredEncoding @client
}
    `;
exports.TextFileOnFileStatLiteFragmentDoc = graphql_tag_1.default `
    fragment TextFileOnFileStatLite on FileStatWithMetadata {
  resource
  name
  mtime
  etag
  size
  isReadonly
  contentEncoding: encoding
  dirty @client
  inConflictMode @client
  inOrphanMode @client
  inErrorMode @client
  inPendingSave @client
  preferredMode @client
  preferredEncoding @client
}
    `;
exports.UntitledFileOnFileStatFragmentDoc = graphql_tag_1.default `
    fragment UntitledFileOnFileStat on FileStatWithMetadata {
  resource
  name
  dirty @client
}
    `;
exports.UntitledFileStatFragmentDoc = graphql_tag_1.default `
    fragment UntitledFileStat on FileStatWithMetadata {
  ...FileSelfStat
  value
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.UpdateErrorFileOnFileStatFragmentDoc = graphql_tag_1.default `
    fragment UpdateErrorFileOnFileStat on FileStatWithMetadata {
  inConflictMode @client
  inErrorMode @client
  state @client
}
    `;
exports.CanHandleResource_WSDocument = graphql_tag_1.default `
    mutation CanHandleResource_WS($resource: URI!) {
  canHandleResource(resource: $resource)
}
    `;
exports.CopyFile_WSDocument = graphql_tag_1.default `
    mutation CopyFile_WS($source: URI!, $target: URI!, $overwrite: Boolean = false) {
  copyFile(source: $source, target: $target, overwrite: $overwrite) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.CreateFile_WSDocument = graphql_tag_1.default `
    mutation CreateFile_WS($resource: URI!) {
  createFile(resource: $resource) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.CreateFolder_WSDocument = graphql_tag_1.default `
    mutation CreateFolder_WS($resource: URI!) {
  createFolder(resource: $resource) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.CreateUntitledFileDocument = graphql_tag_1.default `
    mutation CreateUntitledFile($resource: URI, $mode: String, $initialValue: String, $encoding: String, $hasAssociatedFilePath: Boolean) {
  createUntitledFile(resource: $resource, mode: $mode, initialValue: $initialValue, encoding: $encoding, hasAssociatedFilePath: $hasAssociatedFilePath) @client {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.DeleteFile_WSDocument = graphql_tag_1.default `
    mutation DeleteFile_WS($resource: URI!, $options: DeleteFileOptions_Input) {
  del(resource: $resource, options: $options)
}
    `;
exports.FindFileStatDocument = graphql_tag_1.default `
    mutation FindFileStat($resource: URI!) {
  findFileStat(resource: $resource) @client {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.GetEditorStateDocument = graphql_tag_1.default `
    mutation GetEditorState($resource: URI!, $editorId: String!) {
  getEditorState(resource: $resource, editorId: $editorId) @client {
    ...EditorState
  }
}
    ${exports.EditorStateFragmentDoc}`;
exports.GetFilesTreeDataDocument = graphql_tag_1.default `
    mutation GetFilesTreeData($resource: URI!) {
  getFilesTreeData(resource: $resource) @client(always: true) {
    ...FilesTreeItem
  }
}
    ${exports.FilesTreeItemFragmentDoc}`;
exports.LoadFile_WSDocument = graphql_tag_1.default `
    mutation LoadFile_WS($resource: URI!, $options: ResolveMetadataFileOptions_Input) {
  loadFile(resource: $resource, options: $options) {
    ...FileSelfStat
    children {
      ...FileSelfStat
    }
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.LoadFileContent_WSDocument = graphql_tag_1.default `
    mutation LoadFileContent_WS($resource: URI!, $options: ReadFileOptions_Input) {
  loadFileContent(resource: $resource, options: $options) {
    ...FileContent
  }
}
    ${exports.FileContentFragmentDoc}`;
exports.LoadFileWithContentDocument = graphql_tag_1.default `
    mutation LoadFileWithContent($resource: URI!, $options: LoadOptions_Input) {
  loadFileWithContent(resource: $resource, options: $options) {
    resource
    name
    value
    encoding
  }
}
    `;
exports.LoadTreeDataDocument = graphql_tag_1.default `
    mutation LoadTreeData($resource: URI!) {
  loadFilesTreeData(resource: $resource) @client(always: true) {
    ...FilesTreeItem
  }
}
    ${exports.FilesTreeItemFragmentDoc}`;
exports.MoveFile_WSDocument = graphql_tag_1.default `
    mutation MoveFile_WS($source: URI!, $target: URI!, $overwrite: Boolean = false) {
  moveFile(source: $source, target: $target, overwrite: $overwrite) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.RemoveChangedEventDocument = graphql_tag_1.default `
    mutation RemoveChangedEvent($resource: URI!) {
  removeChangedContent(resource: $resource) @client
}
    `;
exports.RenameFile_WSDocument = graphql_tag_1.default `
    mutation RenameFile_WS($resource: URI!, $target: URI!, $overwrite: Boolean) {
  rename(resource: $resource, target: $target, overwrite: $overwrite) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.SaveDelayFileChanges_WSDocument = graphql_tag_1.default `
    mutation SaveDelayFileChanges_WS($resource: URI!, $changes: [ChangesChunk_Input]!, $options: WriteTextFileOptions_Input!) {
  writeChunkWithDelay(resource: $resource, changes: $changes, options: $options) {
    resource
  }
}
    `;
exports.SaveFileDocument = graphql_tag_1.default `
    mutation SaveFile($resource: URI!, $versionId: Int, $options: SaveOptions_Input!) {
  saveFile(resource: $resource, versionId: $versionId, options: $options) @client {
    resource
  }
}
    `;
exports.SaveFile_WSDocument = graphql_tag_1.default `
    mutation SaveFile_WS($resource: URI!, $value: String!, $options: WriteTextFileOptions_Input!) {
  writeTextFile(resource: $resource, value: $value, options: $options) {
    ...FileSelfStat
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.SaveFileAsDocument = graphql_tag_1.default `
    mutation SaveFileAs($resource: String!, $versionId: Int, $options: SaveOptions_Input!, $target: String) {
  saveFileAs(resource: $resource, versionId: $versionId, options: $options, target: $target) @client
}
    `;
exports.SaveFileChanges_WSDocument = graphql_tag_1.default `
    mutation SaveFileChanges_WS($resource: URI!, $changes: [ChangesChunk_Input]!, $options: WriteTextFileOptions_Input!) {
  writeChunk(resource: $resource, changes: $changes, options: $options) {
    resource
  }
}
    `;
exports.SetEncodingDocument = graphql_tag_1.default `
    mutation SetEncoding($resource: URI!, $encoding: String) {
  setEncoding(resource: $resource, encoding: $encoding) @client
}
    `;
exports.SetTreeDataDocument = graphql_tag_1.default `
    mutation SetTreeData($treeData: [TreeData_Input], $originalData: TreeData_Input) {
  setFilesTreeData(treeData: $treeData, originalData: $originalData) @client
}
    `;
exports.UnwatchFileDocument = graphql_tag_1.default `
    mutation UnwatchFile($resource: URI!, $session: String!) {
  unwatch(resource: $resource, session: $session) @client
}
    `;
exports.UnwatchFile_WSDocument = graphql_tag_1.default `
    mutation UnwatchFile_WS($resource: URI!, $session: String!) {
  unwatchFileChanges(resource: $resource, session: $session)
}
    `;
exports.UpdateFileDirtyStateDocument = graphql_tag_1.default `
    mutation UpdateFileDirtyState($resource: URI!, $isFileDirty: Boolean!) {
  updateFileDirtyState(resource: $resource, isFileDirty: $isFileDirty) @client
}
    `;
exports.UpdateContentByChangesDocument = graphql_tag_1.default `
    mutation UpdateContentByChanges($resource: URI!, $changedEvent: ContentChangedEvent_Input!) {
  updateChangedContent(resource: $resource, changedEvent: $changedEvent) @client
}
    `;
exports.UpdateEditorStateDocument = graphql_tag_1.default `
    mutation UpdateEditorState($resource: URI!, $editorId: String!, $state: CodeEditorViewState_Input!) {
  updateEditorState(resource: $resource, editorId: $editorId, state: $state) @client
}
    `;
exports.UpdateFileContent_WSDocument = graphql_tag_1.default `
    mutation UpdateFileContent_WS($resource: URI!, $options: ReadTextFileOptions_Input) {
  readTextFile(resource: $resource, options: $options) {
    ...TextContent
  }
}
    ${exports.TextContentFragmentDoc}`;
exports.UpdateSelectedResourceDocument = graphql_tag_1.default `
    mutation UpdateSelectedResource($resource: URI!) {
  updateSelectedResource(resource: $resource) @client
}
    `;
exports.WatchFileDocument = graphql_tag_1.default `
    mutation WatchFile($resource: URI!) {
  watchFile(resource: $resource) @client
}
    `;
exports.WatchFile_WSDocument = graphql_tag_1.default `
    mutation WatchFile_WS($resource: URI!, $options: WatchOptions_Input!) {
  watchFileChanges(resource: $resource, options: $options)
}
    `;
exports.ChangedContentDocument = graphql_tag_1.default `
    query ChangedContent($resource: URI!) {
  getChangedEvent(resource: $resource) @client {
    changes
    eol
    versionId
    isUndoing
    isRedoing
    isFlush
  }
}
    `;
exports.EditorStateDocument = graphql_tag_1.default `
    query EditorState($resource: URI!, $editorId: String!) {
  editorState(resource: $resource, editorId: $editorId) @client(always: true) {
    ...EditorState
  }
}
    ${exports.EditorStateFragmentDoc}`;
exports.FileExistsDocument = graphql_tag_1.default `
    query FileExists($resource: URI!) {
  existsFile(resource: $resource) @client
}
    `;
exports.FileExists_WSDocument = graphql_tag_1.default `
    query FileExists_WS($resource: URI!) {
  existsFile(resource: $resource)
}
    `;
exports.FileContent_WSDocument = graphql_tag_1.default `
    query FileContent_WS($resource: URI!) {
  resolveContent(resource: $resource) {
    ...FileContent
  }
}
    ${exports.FileContentFragmentDoc}`;
exports.FileStat_WSDocument = graphql_tag_1.default `
    query FileStat_WS($resource: URI!, $options: ResolveMetadataFileOptions_Input) {
  resolveFile(resource: $resource, options: $options) {
    ...FileSelfStat
    children {
      ...FileSelfStat
      children @client(always: true) {
        ...FileSelfStat
        children @client(always: true) {
          ...FileSelfStat
          children @client(always: true) {
            ...FileSelfStat
            children @client(always: true) {
              ...FileSelfStat
              children @client(always: true) {
                ...FileSelfStat
                children @client(always: true) {
                  ...FileSelfStat
                  children @client(always: true) {
                    ...FileSelfStat
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.ResolveFileContentDocument = graphql_tag_1.default `
    query ResolveFileContent($resource: URI!, $options: LoadOptions_Input) {
  resolveFileContent(resource: $resource, options: $options) @client(always: true) {
    resource
    name
    value
    encoding
  }
}
    `;
exports.ResolveUntitledFileContentDocument = graphql_tag_1.default `
    query ResolveUntitledFileContent($resource: URI!) {
  resolveUntitledFileContent(resource: $resource) @client {
    resource
    name
    value
    dirty
  }
}
    `;
exports.SelectedResourceDocument = graphql_tag_1.default `
    query SelectedResource {
  selectedResource @client {
    ...SelectedResource
  }
}
    ${exports.SelectedResourceFragmentDoc}`;
exports.TextContent_WSDocument = graphql_tag_1.default `
    query TextContent_WS($resource: URI!, $options: ReadTextFileOptions_Input) {
  readTextFile(resource: $resource, options: $options) {
    ...TextContent
  }
}
    ${exports.TextContentFragmentDoc}`;
exports.FileStreamContent_WSDocument = graphql_tag_1.default `
    query FileStreamContent_WS($resource: URI!, $options: ReadTextFileOptions_Input) {
  readStringStreamTextFile(resource: $resource, options: $options) {
    resource
    name
    value
    encoding
    status
    streamSeq
  }
}
    `;
exports.UntitledResourcesDocument = graphql_tag_1.default `
    query UntitledResources {
  untitledResources @client
}
    `;
exports.FileDataDocument = graphql_tag_1.default `
    subscription FileData($resource: URI!) {
  fileData(resource: $resource) {
    type
    resource
  }
}
    `;
exports.FileOperationDocument = graphql_tag_1.default `
    subscription FileOperation($resource: URI!) {
  fileOperation(resource: $resource) {
    resource
    target {
      ...FileSelfStat
    }
    operation
  }
}
    ${exports.FileSelfStatFragmentDoc}`;
exports.ReadStreamTextFileDocument = graphql_tag_1.default `
    subscription ReadStreamTextFile($resource: URI!) {
  readStreamTextString(resource: $resource) {
    resource
    name
    encoding
    value
    status
    streamSeq
  }
}
    `;
//# sourceMappingURL=generated-models.js.map
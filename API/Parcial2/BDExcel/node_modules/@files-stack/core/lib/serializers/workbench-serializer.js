"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkbenchSerializer = void 0;
const JsonSerializer = require('moleculer/src/serializers/json');
const P = require('moleculer/src/packets');
/**
 * Comination of several serializer for Workbench App
 *
 * @class WorbenchSerialier
 */
class WorkbenchSerializer extends JsonSerializer {
    /**
     * Creates an instance of WorkbenchSerializer.
     *
     * @member of WorkbenchSerializer
     */
    constructor() {
        super();
    }
    // /**
    //  * Serialize custom fields (stringify)
    //  *
    //  * @param {String} type
    //  * @param {Packet} obj
    //  * @returns {Packet}
    //  * @memberof Serializer
    //  */
    // public serializeCustomFields(type, obj) {
    //     switch (type) {
    //         case P.PACKET_INFO: {
    //             obj.services = JSON.stringify(obj.services);
    //             if (obj.config) {
    //                 obj.config = JSON.stringify(obj.config);
    //             }
    //             if (obj.metadata) {
    //                 obj.metadata = JSON.stringify(obj.metadata);
    //             }
    //             break;
    //         }
    //         case P.PACKET_EVENT: {
    //             this.convertDataToTransport(obj, 'data', 'dataType');
    //             obj.meta = JSON.stringify(obj.meta);
    //             break;
    //         }
    //         case P.PACKET_REQUEST: {
    //             this.convertDataToTransport(obj, 'params', 'paramsType');
    //             obj.meta = JSON.stringify(obj.meta);
    //             break;
    //         }
    //         case P.PACKET_RESPONSE: {
    //             this.convertDataToTransport(obj, 'data', 'dataType');
    //             obj.meta = JSON.stringify(obj.meta);
    //             if (obj.error) {
    //                 obj.error = JSON.stringify(obj.error);
    //             }
    //             break;
    //         }
    //         case P.PACKET_GOSSIP_REQ: {
    //             if (obj.online) {
    //                 obj.online = JSON.stringify(obj.online);
    //             }
    //             if (obj.offline) {
    //                 obj.offline = JSON.stringify(obj.offline);
    //             }
    //             break;
    //         }
    //         case P.PACKET_GOSSIP_RES: {
    //             if (obj.online) {
    //                 obj.online = JSON.stringify(obj.online);
    //             }
    //             if (obj.offline) {
    //                 obj.offline = JSON.stringify(obj.offline);
    //             }
    //             break;
    //         }
    //         default:
    //     }
    //     return obj;
    // }
    // private convertDataToTransport(obj, field, fieldType) {
    //     if (obj[field] === undefined) {
    //         obj[fieldType] = P.DATATYPE_UNDEFINED;
    //     } else if (obj[field] === null) {
    //         obj[fieldType] = P.DATATYPE_NULL;
    //     } else if (Buffer.isBuffer(obj[field])) {
    //         obj[fieldType] = P.DATATYPE_BUFFER;
    //     } else {
    //         // JSON
    //         obj[fieldType] = P.DATATYPE_JSON;
    //         obj[field] = Buffer.from(JSON.stringify(obj[field]));
    //     }
    // }
    /**
     * Serializer a JS object to Buffer
     *
     * @param {Object} obj
     * @param {String} type of packet
     * @returns {Buffer}
     *
     * @memberof Serializer
     */
    serialize(obj) {
        console.log('----serialise ', obj);
        return Buffer.from(JSON.stringify(obj));
    }
    /**
     * Deserialize Buffer to JS object
     *
     * @param {Buffer} buf
     * @param {String} type of packet
     * @returns {Object}
     *
     * @memberof Serializer
     */
    deserialize(buf) {
        const result = JSON.parse(buf);
        console.log(result);
        return result;
    }
}
exports.WorkbenchSerializer = WorkbenchSerializer;
//# sourceMappingURL=workbench-serializer.js.map